"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,y=u["".concat(r,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(y,l(l({ref:t},p),{},{components:n})):a.createElement(y,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96516:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var a=n(87462),i=(n(67294),n(3905));const o={},l="Update a connection",s={type:"api",id:"update-a-connection",unversionedId:"update-a-connection",title:"Update a connection",description:"",slug:"/update-a-connection",frontMatter:{},api:{description:"<b>Note:</b> if you use the options parameter, the whole options object will be overridden, so ensure that all parameters are present\\n",tags:["connections"],parameters:[{name:"id",in:"path",description:"The id of the connection to retrieve",required:!0,schema:{type:"string"}}],requestBody:{content:{"application/json":{schema:{type:"object",properties:{display_name:{type:"string",description:"Connection name used in the new universal login experience",maxLength:128},options:{type:"object",nullable:!0,description:"The connection's options (depend on the connection strategy)",additionalProperties:{},properties:{validation:{type:"object",nullable:!0,description:"Options for validation",properties:{username:{type:"object",nullable:!0,required:["max","min"],properties:{min:{type:"integer"},max:{type:"integer"}}}}},non_persistent_attrs:{type:"array",description:"An array of user fields that should not be stored in the Auth0 database (https://manage.local.dev.auth0.com/docs/security/data-security/denylist)",items:{type:"string"}},enabledDatabaseCustomization:{type:"boolean",description:"Set to true to use a legacy user store"},import_mode:{type:"boolean",description:"Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"},customScripts:{type:"object",description:"A map of scripts used to integrate with a custom database.",properties:{login:{type:"string",minLength:1},get_user:{type:"string",minLength:1},delete:{type:"string",minLength:1},change_password:{type:"string",minLength:1},verify:{type:"string",minLength:1},create:{type:"string",minLength:1}}},passwordPolicy:{type:"string",description:"Password strength level",nullable:!0,enum:["none","low","fair","good","excellent",null]},password_complexity_options:{type:"object",nullable:!0,description:"Password complexity options",properties:{min_length:{type:"integer",description:"Minimum password length"}}},password_history:{type:"object",nullable:!0,description:"Options for password history policy",required:["enable"],properties:{enable:{type:"boolean"},size:{type:"integer"}}},password_no_personal_info:{type:"object",nullable:!0,description:"Options for password expiration policy",required:["enable"],properties:{enable:{type:"boolean"}}},password_dictionary:{type:"object",nullable:!0,description:"Options for password dictionary policy",required:["enable"],properties:{enable:{type:"boolean"},dictionary:{type:"array",description:"Custom Password Dictionary. An array of up to 200 entries.",items:{type:"string",description:"Custom Password Dictionary entry. 50 characters max.",maxLength:50}}}},api_enable_users:{type:"boolean"},basic_profile:{type:"boolean"},ext_admin:{type:"boolean"},ext_is_suspended:{type:"boolean"},ext_agreed_terms:{type:"boolean"},ext_groups:{type:"boolean"},ext_assigned_plans:{type:"boolean"},ext_profile:{type:"boolean"},upstream_params:{type:"object",nullable:!0,description:"Options for adding parameters in the request to the upstream IdP",additionalProperties:{}},set_user_root_attributes:{type:"string",description:"Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on_each_login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter)",default:"on_each_login",enum:["on_each_login","on_first_login"]},gateway_authentication:{type:"object",nullable:!0,description:"Token-based authentication settings to be applied when connection is using an sms strategy.",additionalProperties:{},required:["method","audience","secret"],properties:{method:{type:"string",description:"The Authorization header type."},subject:{type:"string",description:"The subject to be added to the JWT payload."},audience:{type:"string",description:"The audience to be added to the JWT payload."},secret:{type:"string",description:"The secret to be used for signing tokens."},secret_base64_encoded:{type:"boolean",description:"Set to true if the provided secret is base64 encoded."}}}}},enabled_clients:{type:"array",description:"The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.",items:{type:"string",description:"The client_id of the client to for which the connection is to be enabled"}},is_domain_connection:{type:"boolean"},realms:{type:"array",description:"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",items:{type:"string",description:"The realm where this connection belongs"}},metadata:{type:"object",description:"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",additionalProperties:{}}}}},"application/x-www-form-urlencoded":{schema:{type:"object",properties:{display_name:{type:"string",description:"Connection name used in the new universal login experience",maxLength:128},options:{type:"object",nullable:!0,description:"The connection's options (depend on the connection strategy)",additionalProperties:{},properties:{validation:{type:"object",nullable:!0,description:"Options for validation",properties:{username:{type:"object",nullable:!0,required:["max","min"],properties:{min:{type:"integer"},max:{type:"integer"}}}}},non_persistent_attrs:{type:"array",description:"An array of user fields that should not be stored in the Auth0 database (https://manage.local.dev.auth0.com/docs/security/data-security/denylist)",items:{type:"string"}},enabledDatabaseCustomization:{type:"boolean",description:"Set to true to use a legacy user store"},import_mode:{type:"boolean",description:"Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"},customScripts:{type:"object",description:"A map of scripts used to integrate with a custom database.",properties:{login:{type:"string",minLength:1},get_user:{type:"string",minLength:1},delete:{type:"string",minLength:1},change_password:{type:"string",minLength:1},verify:{type:"string",minLength:1},create:{type:"string",minLength:1}}},passwordPolicy:{type:"string",description:"Password strength level",nullable:!0,enum:["none","low","fair","good","excellent",null]},password_complexity_options:{type:"object",nullable:!0,description:"Password complexity options",properties:{min_length:{type:"integer",description:"Minimum password length"}}},password_history:{type:"object",nullable:!0,description:"Options for password history policy",required:["enable"],properties:{enable:{type:"boolean"},size:{type:"integer"}}},password_no_personal_info:{type:"object",nullable:!0,description:"Options for password expiration policy",required:["enable"],properties:{enable:{type:"boolean"}}},password_dictionary:{type:"object",nullable:!0,description:"Options for password dictionary policy",required:["enable"],properties:{enable:{type:"boolean"},dictionary:{type:"array",description:"Custom Password Dictionary. An array of up to 200 entries.",items:{type:"string",description:"Custom Password Dictionary entry. 50 characters max.",maxLength:50}}}},api_enable_users:{type:"boolean"},basic_profile:{type:"boolean"},ext_admin:{type:"boolean"},ext_is_suspended:{type:"boolean"},ext_agreed_terms:{type:"boolean"},ext_groups:{type:"boolean"},ext_assigned_plans:{type:"boolean"},ext_profile:{type:"boolean"},upstream_params:{type:"object",nullable:!0,description:"Options for adding parameters in the request to the upstream IdP",additionalProperties:{}},set_user_root_attributes:{type:"string",description:"Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on_each_login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter)",default:"on_each_login",enum:["on_each_login","on_first_login"]},gateway_authentication:{type:"object",nullable:!0,description:"Token-based authentication settings to be applied when connection is using an sms strategy.",additionalProperties:{},required:["method","audience","secret"],properties:{method:{type:"string",description:"The Authorization header type."},subject:{type:"string",description:"The subject to be added to the JWT payload."},audience:{type:"string",description:"The audience to be added to the JWT payload."},secret:{type:"string",description:"The secret to be used for signing tokens."},secret_base64_encoded:{type:"boolean",description:"Set to true if the provided secret is base64 encoded."}}}}},enabled_clients:{type:"array",description:"The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.",items:{type:"string",description:"The client_id of the client to for which the connection is to be enabled"}},is_domain_connection:{type:"boolean"},realms:{type:"array",description:"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",items:{type:"string",description:"The realm where this connection belongs"}},metadata:{type:"object",description:"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",additionalProperties:{}}}}}}},responses:{200:{description:"The connection was updated. See <strong>Response Class</strong> below for schema.",content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the connection",default:"My connection"},display_name:{type:"string",description:"Connection name used in login screen"},options:{type:"object",additionalProperties:{}},id:{type:"string",description:"The connection's identifier",default:"con_0000000000000001"},strategy:{type:"string",description:"The type of the connection, related to the identity provider",default:"auth0"},realms:{type:"array",description:"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",items:{type:"string",description:"The realm where this connection belongs"}},is_domain_connection:{type:"boolean",description:"True if the connection is domain level"},metadata:{type:"object",description:"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",additionalProperties:{}}}}}}},400:{description:"options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"},401:{description:"Invalid signature received for JSON Web Token validation"},403:{description:"Insufficient scope, expected any of: update:connections"},404:{description:"The connection does not exist"},409:{description:"The name/client_id tuple has already been used for another connection"},429:{description:"Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."}},operationId:"patch_connections_by_id",security:[{bearerAuth:[]},{oAuth2ClientCredentials:["update:connections"]}],method:"patch",path:"/connections/{id}",servers:[{url:"https://login0.local.dev.auth0.com/api/v2"}],securitySchemes:{bearerAuth:{type:"http",scheme:"bearer",bearerFormat:"jwt"},oAuth2ClientCredentials:{type:"oauth2",flows:{clientCredentials:{tokenUrl:"https://login0.local.dev.auth0.com/oauth/token/","x-form-parameters":{audience:"https://login0.local.dev.auth0.com/api/v2/"},scopes:{"delete:actions":"Delete Actions","read:actions":"Read Actions","update:actions":"Update Actions","create:actions":"Create Actions","delete:anomaly_blocks":"Delete Anomaly Detection Blocks","read:anomaly_blocks":"Read Anomaly Detection Blocks","read:attack_protection":"Read attack protection","update:attack_protection":"Update attack protection","blacklist:tokens":"Blacklist Tokens","read:branding":"Read branding settings","update:branding":"Update branding settings","delete:branding":"Delete branding settings","delete:client_grants":"Delete Client Grants","read:client_grants":"Read Client Grants","update:client_grants":"Update Client Grants","create:client_grants":"Create Client Grants","delete:clients":"Delete Clients","read:clients":"Read Clients","update:clients":"Update Clients","create:clients":"Create Clients","delete:client_credentials":"Delete Client Credentials","read:client_credentials":"Read Client Credentials","update:client_credentials":"Update Client Credentials","create:client_credentials":"Create Client Credentials","delete:client_keys":"Delete Client Keys","read:client_keys":"Read Client Keys","update:client_keys":"Update Client Keys","create:client_keys":"Create Client Keys","delete:connections":"Delete Connections","read:connections":"Read Connections","update:connections":"Update Connections","create:connections":"Create Connections","delete:custom_domains":"Delete custom domain configurations","read:custom_domains":"Read custom domain configurations","update:custom_domains":"Update custom domain configurations","create:custom_domains":"Configure new custom domains","update:device_codes":"Update Device Codes","read:device_codes":"Read Device Codes","delete:device_credentials":"Delete Device Credentials","read:device_credentials":"Read Device Credentials","update:device_credentials":"Update Device Credentials","create:device_credentials":"Create Device Credentials","delete:current_user_device_credentials":"Delete Current User Device Credentials","read:current_user_device_credentials":"Read Current User Device Credentials","create:current_user_device_credentials":"Create Current User Device Credentials","delete:email_templates":"Delete email templates","read:email_templates":"Read email emplates","update:email_templates":"Update email templates","create:email_templates":"Create email templates","read:email_triggers":"Read email triggers","update:email_triggers":"Update email triggers","delete:email_provider":"Delete Email Provider","read:email_provider":"Read Email Provider","update:email_provider":"Update Email Provider","create:email_provider":"Create Email Provider","read:entitlements":"Read entitlements","delete:guardian_enrollments":"Delete Guardian enrollments","read:guardian_enrollments":"Read Guardian enrollments","create:guardian_enrollment_tickets":"Create enrollment tickets for Guardian","read:guardian_factors":"Read Guardian factors configuration","update:guardian_factors":"Update Guardian factors","read:grants":"Read User Grants","delete:grants":"Delete User Grants","delete:hooks":"Delete Hooks","read:hooks":"Read Hooks","update:hooks":"Update Hooks","create:hooks":"Create Hooks","read:insights":"Read Insights","delete:integrations":"Delete integrations","read:integrations":"Read integrations","update:integrations":"Update integrations","create:integrations":"Create integrations","read:limits":"Read entity limits","update:limits":"Update entity limits","read:log_streams":"Read log_streams","delete:log_streams":"Delete log_streams","update:log_streams":"Update log_streams","create:log_streams":"Create log_streams","read:logs":"Read Logs","read:logs_users":"Read logs relating to users","read:mfa_policies":"Read Multifactor Authentication policies","update:mfa_policies":"Update Multifactor Authentication policies","delete:organization_connections":"Delete organization connections","read:organization_connections":"Read organization connections","update:organization_connections":"Update organization connections","create:organization_connections":"Create organization connections","delete:organization_invitations":"Delete organization invitations","read:organization_invitations":"Read organization invitations","create:organization_invitations":"Create organization invitations","delete:organization_member_roles":"Delete organization member roles","read:organization_member_roles":"Read organization member roles","create:organization_member_roles":"Create organization member roles","delete:organizations":"Delete organizations","read:organizations":"Read organizations","create:organizations":"Create organizations","update:organizations":"Update organizations","delete:organization_members":"Delete organization members","read:organization_members":"Read organization members","create:organization_members":"Create organization members","read:organizations_summary":"Read organization summary","create:passwords_checking_job":"Create password checking jobs","delete:passwords_checking_job":"Deletes password checking job and all its resources","read:prompts":"Read prompts settings","update:prompts":"Update prompts settings","delete:requested_scopes":"Delete Requested Scopes","read:requested_scopes":"Read Requested Scopes","update:requested_scopes":"Update Requested Scopes","create:requested_scopes":"Create Requested Scopes","delete:resource_servers":"Delete Resource Servers","read:resource_servers":"Read Resource Servers","update:resource_servers":"Update Resource Servers","create:resource_servers":"Create Resource Servers","create:role_members":"Create role members","read:role_members":"Read role members","update:role_members":"Update role members","delete:role_members":"Delete role members","delete:roles":"Delete roles","read:roles":"Read roles","update:roles":"Update roles","create:roles":"Create roles","delete:rules":"Delete Rules","read:rules":"Read Rules","update:rules":"Update Rules","create:rules":"Create Rules","delete:rules_configs":"Delete Rules Configs","read:rules_configs":"Read Rules Configs","update:rules_configs":"Update Rules Configs","delete:signing_keys":"Delete signing keys","create:signing_keys":"Create signing keys","read:signing_keys":"Read signing keys","update:signing_keys":"Update signing keys","delete:shields":"Delete Shields","read:shields":"Read Shields","update:shields":"Update Shields","create:shields":"Create Shields","read:stats":"Read Stats","create:test_email_dispatch":"Create test email dispatch","read:tenant_settings":"Read Tenant Settings","update:tenant_settings":"Update Tenant Settings","read:triggers":"Read Triggers","update:triggers":"Update Triggers","create:user_tickets":"Create User Tickets","delete:users":"Delete Users","read:users":"Read Users","update:users":"Update Users","create:users":"Create Users","read:current_user":"Read Current User","delete:current_user":"Delete Current User","read:user_idp_tokens":"Read Users IDP tokens","delete:users_app_metadata":"Delete Users App Metadata","read:users_app_metadata":"Read Users App Metadata","update:users_app_metadata":"Update Users App Metadata","create:users_app_metadata":"Create Users App Metadata","delete:user_custom_blocks":"Delete Custom User Blocks","read:user_custom_blocks":"Read Custom User Blocks","create:user_custom_blocks":"Create Custom User Blocks","update:current_user_identities":"Update Current User Identities"}}}}},jsonRequestBodyExample:{display_name:"string",options:{validation:{username:{min:0,max:0}},non_persistent_attrs:["string"],enabledDatabaseCustomization:!0,import_mode:!0,customScripts:{login:"string",get_user:"string",delete:"string",change_password:"string",verify:"string",create:"string"},passwordPolicy:"none",password_complexity_options:{min_length:0},password_history:{enable:!0,size:0},password_no_personal_info:{enable:!0},password_dictionary:{enable:!0,dictionary:["string"]},api_enable_users:!0,basic_profile:!0,ext_admin:!0,ext_is_suspended:!0,ext_agreed_terms:!0,ext_groups:!0,ext_assigned_plans:!0,ext_profile:!0,upstream_params:{},set_user_root_attributes:"on_each_login",gateway_authentication:{method:"string",subject:"string",audience:"string",secret:"string",secret_base64_encoded:!0}},enabled_clients:["string"],is_domain_connection:!0,realms:["string"],metadata:{}},info:{title:"Auth0 Management API",description:"Auth0 Management API v2.",termsOfService:"https://auth0.com/web-terms/",version:"2.0"},postman:{name:"Update a connection",description:{content:"<b>Note:</b> if you use the options parameter, the whole options object will be overridden, so ensure that all parameters are present\\n",type:"text/plain"},url:{path:["connections",":id"],host:["{{baseUrl}}"],query:[],variable:[{description:{content:"(Required) The id of the connection to retrieve",type:"text/plain"},type:"any",value:"<string>",key:"id"}]},header:[{key:"Content-Type",value:"application/x-www-form-urlencoded"}],method:"PATCH",body:{mode:"urlencoded",urlencoded:[{description:{content:"Connection name used in the new universal login experience",type:"text/plain"},key:"display_name",value:"<string>"},{description:{content:"The connection's options (depend on the connection strategy)",type:"text/plain"},key:"options",value:'{"validation":{"username":{"max":"<integer>","min":"<integer>"}},"non_persistent_attrs":["<string>","<string>"],"enabledDatabaseCustomization":"<boolean>","import_mode":"<boolean>","customScripts":{"login":"<string>","get_user":"<string>","delete":"<string>","change_password":"<string>","verify":"<string>","create":"<string>"},"passwordPolicy":"<string>","password_complexity_options":{"min_length":"<integer>"},"password_history":{"enable":"<boolean>","size":"<integer>"},"password_no_personal_info":{"enable":"<boolean>"},"password_dictionary":{"enable":"<boolean>","dictionary":["<string>","<string>"]},"api_enable_users":"<boolean>","basic_profile":"<boolean>","ext_admin":"<boolean>","ext_is_suspended":"<boolean>","ext_agreed_terms":"<boolean>","ext_groups":"<boolean>","ext_assigned_plans":"<boolean>","ext_profile":"<boolean>","upstream_params":"<object>","set_user_root_attributes":"on_each_login","gateway_authentication":{"method":"<string>","audience":"<string>","secret":"<string>","subject":"<string>","secret_base64_encoded":"<boolean>"}}'},{description:{content:"The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.",type:"text/plain"},key:"enabled_clients",value:'["<string>","<string>"]'},{description:{content:"",type:"text/plain"},key:"is_domain_connection",value:"<boolean>"},{description:{content:"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",type:"text/plain"},key:"realms",value:'["<string>","<string>"]'},{description:{content:"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",type:"text/plain"},key:"metadata",value:"<object>"}]},auth:{type:"oauth2",oauth2:[]}}},source:"@site/openapi.json",sourceDirName:".",permalink:"/api/update-a-connection",previous:{title:"Delete a connection",permalink:"/api/delete-a-connection"},next:{title:"Check connection status",permalink:"/api/check-connection-status"}},r=[],d={toc:r};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"update-a-connection"},"Update a connection"),(0,i.kt)("b",null,"Note:")," if you use the options parameter, the whole options object will be overridden, so ensure that all parameters are present\\n",(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Path Parameters"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The id of the connection to retrieve")))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Request Body ",(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"display_name"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," length \u2264 128")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Connection name used in the new universal login experience")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"options"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The connection's options (depend on the connection strategy)")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"validation"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Options for validation")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"username"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"min"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"max"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))))))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"non_persistent_attrs"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"An array of user fields that should not be stored in the Auth0 database (",(0,i.kt)("a",{parentName:"p",href:"https://manage.local.dev.auth0.com/docs/security/data-security/denylist"},"https://manage.local.dev.auth0.com/docs/security/data-security/denylist"),")")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"enabledDatabaseCustomization"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Set to true to use a legacy user store")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"import_mode"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"customScripts"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"A map of scripts used to integrate with a custom database.")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"login"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"get_user"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"delete"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"change_password"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"verify"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"create"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," 1 \u2264 length")))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"passwordPolicy"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," ","[",(0,i.kt)("inlineCode",{parentName:"p"},"none"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"low"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fair"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"good"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"excellent"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"]")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Password strength level")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"password_complexity_options"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Password complexity options")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"min_length"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Minimum password length")))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"password_history"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Options for password history policy")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"enable"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"size"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"password_no_personal_info"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Options for password expiration policy")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"enable"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"password_dictionary"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Options for password dictionary policy")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"enable"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"dictionary"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," length \u2264 50")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Custom Password Dictionary. An array of up to 200 entries.")))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"api_enable_users"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"basic_profile"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_admin"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_is_suspended"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_agreed_terms"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_groups"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_assigned_plans"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"ext_profile"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"upstream_params"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Options for adding parameters in the request to the upstream IdP")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"set_user_root_attributes"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," ","[",(0,i.kt)("inlineCode",{parentName:"p"},"on_each_login"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"on_first_login"),"]")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on_each_login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter)")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"gateway_authentication"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Token-based authentication settings to be applied when connection is using an sms strategy.")),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"method"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The Authorization header type.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"subject"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The subject to be added to the JWT payload.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"audience"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The audience to be added to the JWT payload.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"secret"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The secret to be used for signing tokens.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"secret_base64_encoded"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Set to true if the provided secret is base64 encoded.")))))))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"enabled_clients"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"is_domain_connection"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"realms"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"metadata"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.")))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"200")),(0,i.kt)("div",null,(0,i.kt)("p",null,"The connection was updated. See ",(0,i.kt)("strong",null,"Response Class")," below for schema."))),(0,i.kt)("div",null,(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"name"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The name of the connection")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"display_name"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Connection name used in login screen")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"options"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"id"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The connection's identifier")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"strategy"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The type of the connection, related to the identity provider")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"realms"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"is_domain_connection"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"True if the connection is domain level")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"metadata"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed."))))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"400")),(0,i.kt)("div",null,(0,i.kt)("p",null,"options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"))),(0,i.kt)("div",null))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"401")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Invalid signature received for JSON Web Token validation"))),(0,i.kt)("div",null))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"403")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Insufficient scope, expected any of: update:connections"))),(0,i.kt)("div",null))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"404")),(0,i.kt)("div",null,(0,i.kt)("p",null,"The connection does not exist"))),(0,i.kt)("div",null))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"409")),(0,i.kt)("div",null,(0,i.kt)("p",null,"The name/client_id tuple has already been used for another connection"))),(0,i.kt)("div",null))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"429")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."))),(0,i.kt)("div",null))))))}p.isMDXComponent=!0}}]);