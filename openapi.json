{
   "openapi": "3.0.0",
   "info": {
      "title": "Auth0 Management API",
      "description": "Auth0 Management API v2.",
      "termsOfService": "https://auth0.com/web-terms/",
      "version": "2.0"
   },
   "servers": [
      {
         "url": "https://login0.local.dev.auth0.com/api/v2"
      }
   ],
   "security": [
      {
         "bearerAuth": []
      }
   ],
   "externalDocs": {
      "description": "Auth0 Management API Documentation",
      "url": "https://auth0.com/docs/api/management/v2/"
   },
   "components": {
      "securitySchemes": {
         "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "jwt"
         },
         "oAuth2ClientCredentials": {
            "type": "oauth2",
            "flows": {
               "clientCredentials": {
                  "tokenUrl": "https://login0.local.dev.auth0.com/oauth/token/",
                  "x-form-parameters": {
                     "audience": "https://login0.local.dev.auth0.com/api/v2/"
                  },
                  "scopes": {
                     "delete:actions": "Delete Actions",
                     "read:actions": "Read Actions",
                     "update:actions": "Update Actions",
                     "create:actions": "Create Actions",
                     "delete:anomaly_blocks": "Delete Anomaly Detection Blocks",
                     "read:anomaly_blocks": "Read Anomaly Detection Blocks",
                     "read:attack_protection": "Read attack protection",
                     "update:attack_protection": "Update attack protection",
                     "blacklist:tokens": "Blacklist Tokens",
                     "read:branding": "Read branding settings",
                     "update:branding": "Update branding settings",
                     "delete:branding": "Delete branding settings",
                     "delete:client_grants": "Delete Client Grants",
                     "read:client_grants": "Read Client Grants",
                     "update:client_grants": "Update Client Grants",
                     "create:client_grants": "Create Client Grants",
                     "delete:clients": "Delete Clients",
                     "read:clients": "Read Clients",
                     "update:clients": "Update Clients",
                     "create:clients": "Create Clients",
                     "delete:client_credentials": "Delete Client Credentials",
                     "read:client_credentials": "Read Client Credentials",
                     "update:client_credentials": "Update Client Credentials",
                     "create:client_credentials": "Create Client Credentials",
                     "delete:client_keys": "Delete Client Keys",
                     "read:client_keys": "Read Client Keys",
                     "update:client_keys": "Update Client Keys",
                     "create:client_keys": "Create Client Keys",
                     "delete:connections": "Delete Connections",
                     "read:connections": "Read Connections",
                     "update:connections": "Update Connections",
                     "create:connections": "Create Connections",
                     "delete:custom_domains": "Delete custom domain configurations",
                     "read:custom_domains": "Read custom domain configurations",
                     "update:custom_domains": "Update custom domain configurations",
                     "create:custom_domains": "Configure new custom domains",
                     "update:device_codes": "Update Device Codes",
                     "read:device_codes": "Read Device Codes",
                     "delete:device_credentials": "Delete Device Credentials",
                     "read:device_credentials": "Read Device Credentials",
                     "update:device_credentials": "Update Device Credentials",
                     "create:device_credentials": "Create Device Credentials",
                     "delete:current_user_device_credentials": "Delete Current User Device Credentials",
                     "read:current_user_device_credentials": "Read Current User Device Credentials",
                     "create:current_user_device_credentials": "Create Current User Device Credentials",
                     "delete:email_templates": "Delete email templates",
                     "read:email_templates": "Read email emplates",
                     "update:email_templates": "Update email templates",
                     "create:email_templates": "Create email templates",
                     "read:email_triggers": "Read email triggers",
                     "update:email_triggers": "Update email triggers",
                     "delete:email_provider": "Delete Email Provider",
                     "read:email_provider": "Read Email Provider",
                     "update:email_provider": "Update Email Provider",
                     "create:email_provider": "Create Email Provider",
                     "read:entitlements": "Read entitlements",
                     "delete:guardian_enrollments": "Delete Guardian enrollments",
                     "read:guardian_enrollments": "Read Guardian enrollments",
                     "create:guardian_enrollment_tickets": "Create enrollment tickets for Guardian",
                     "read:guardian_factors": "Read Guardian factors configuration",
                     "update:guardian_factors": "Update Guardian factors",
                     "read:grants": "Read User Grants",
                     "delete:grants": "Delete User Grants",
                     "delete:hooks": "Delete Hooks",
                     "read:hooks": "Read Hooks",
                     "update:hooks": "Update Hooks",
                     "create:hooks": "Create Hooks",
                     "read:insights": "Read Insights",
                     "delete:integrations": "Delete integrations",
                     "read:integrations": "Read integrations",
                     "update:integrations": "Update integrations",
                     "create:integrations": "Create integrations",
                     "read:limits": "Read entity limits",
                     "update:limits": "Update entity limits",
                     "read:log_streams": "Read log_streams",
                     "delete:log_streams": "Delete log_streams",
                     "update:log_streams": "Update log_streams",
                     "create:log_streams": "Create log_streams",
                     "read:logs": "Read Logs",
                     "read:logs_users": "Read logs relating to users",
                     "read:mfa_policies": "Read Multifactor Authentication policies",
                     "update:mfa_policies": "Update Multifactor Authentication policies",
                     "delete:organization_connections": "Delete organization connections",
                     "read:organization_connections": "Read organization connections",
                     "update:organization_connections": "Update organization connections",
                     "create:organization_connections": "Create organization connections",
                     "delete:organization_invitations": "Delete organization invitations",
                     "read:organization_invitations": "Read organization invitations",
                     "create:organization_invitations": "Create organization invitations",
                     "delete:organization_member_roles": "Delete organization member roles",
                     "read:organization_member_roles": "Read organization member roles",
                     "create:organization_member_roles": "Create organization member roles",
                     "delete:organizations": "Delete organizations",
                     "read:organizations": "Read organizations",
                     "create:organizations": "Create organizations",
                     "update:organizations": "Update organizations",
                     "delete:organization_members": "Delete organization members",
                     "read:organization_members": "Read organization members",
                     "create:organization_members": "Create organization members",
                     "read:organizations_summary": "Read organization summary",
                     "create:passwords_checking_job": "Create password checking jobs",
                     "delete:passwords_checking_job": "Deletes password checking job and all its resources",
                     "read:prompts": "Read prompts settings",
                     "update:prompts": "Update prompts settings",
                     "delete:requested_scopes": "Delete Requested Scopes",
                     "read:requested_scopes": "Read Requested Scopes",
                     "update:requested_scopes": "Update Requested Scopes",
                     "create:requested_scopes": "Create Requested Scopes",
                     "delete:resource_servers": "Delete Resource Servers",
                     "read:resource_servers": "Read Resource Servers",
                     "update:resource_servers": "Update Resource Servers",
                     "create:resource_servers": "Create Resource Servers",
                     "create:role_members": "Create role members",
                     "read:role_members": "Read role members",
                     "update:role_members": "Update role members",
                     "delete:role_members": "Delete role members",
                     "delete:roles": "Delete roles",
                     "read:roles": "Read roles",
                     "update:roles": "Update roles",
                     "create:roles": "Create roles",
                     "delete:rules": "Delete Rules",
                     "read:rules": "Read Rules",
                     "update:rules": "Update Rules",
                     "create:rules": "Create Rules",
                     "delete:rules_configs": "Delete Rules Configs",
                     "read:rules_configs": "Read Rules Configs",
                     "update:rules_configs": "Update Rules Configs",
                     "delete:signing_keys": "Delete signing keys",
                     "create:signing_keys": "Create signing keys",
                     "read:signing_keys": "Read signing keys",
                     "update:signing_keys": "Update signing keys",
                     "delete:shields": "Delete Shields",
                     "read:shields": "Read Shields",
                     "update:shields": "Update Shields",
                     "create:shields": "Create Shields",
                     "read:stats": "Read Stats",
                     "create:test_email_dispatch": "Create test email dispatch",
                     "read:tenant_settings": "Read Tenant Settings",
                     "update:tenant_settings": "Update Tenant Settings",
                     "read:triggers": "Read Triggers",
                     "update:triggers": "Update Triggers",
                     "create:user_tickets": "Create User Tickets",
                     "delete:users": "Delete Users",
                     "read:users": "Read Users",
                     "update:users": "Update Users",
                     "create:users": "Create Users",
                     "read:current_user": "Read Current User",
                     "delete:current_user": "Delete Current User",
                     "read:user_idp_tokens": "Read Users IDP tokens",
                     "delete:users_app_metadata": "Delete Users App Metadata",
                     "read:users_app_metadata": "Read Users App Metadata",
                     "update:users_app_metadata": "Update Users App Metadata",
                     "create:users_app_metadata": "Create Users App Metadata",
                     "delete:user_custom_blocks": "Delete Custom User Blocks",
                     "read:user_custom_blocks": "Read Custom User Blocks",
                     "create:user_custom_blocks": "Create Custom User Blocks",
                     "update:current_user_identities": "Update Current User Identities"
                  }
               }
            }
         }
      },
      "schemas": {
         "draftUpdate": {
            "type": "object",
            "properties": {
               "update_draft": {
                  "type": "boolean",
                  "description": "True if the draft of the action should be updated with the reverted version.",
                  "default": false
               }
            }
         },
         "tenantSettings": {
            "type": "object",
            "properties": {
               "change_password": {
                  "type": "object",
                  "nullable": true,
                  "description": "Change Password page customization.",
                  "properties": {
                     "enabled": {
                        "type": "boolean",
                        "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                        "default": false
                     },
                     "html": {
                        "type": "string",
                        "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                        "default": ""
                     }
                  }
               },
               "guardian_mfa_page": {
                  "type": "object",
                  "nullable": true,
                  "description": "Guardian page customization.",
                  "properties": {
                     "enabled": {
                        "type": "boolean",
                        "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                        "default": false
                     },
                     "html": {
                        "type": "string",
                        "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                        "default": ""
                     }
                  }
               },
               "default_audience": {
                  "type": "string",
                  "description": "Default audience for API authorization.",
                  "default": ""
               },
               "default_directory": {
                  "type": "string",
                  "description": "Name of connection used for password grants at the `/token`endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
                  "default": ""
               },
               "error_page": {
                  "type": "object",
                  "nullable": true,
                  "description": "Error page customization.",
                  "properties": {
                     "html": {
                        "type": "string",
                        "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                        "default": ""
                     },
                     "show_log_link": {
                        "type": "boolean",
                        "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                        "default": false
                     },
                     "url": {
                        "type": "string",
                        "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                        "default": "https://mycompany.org/error"
                     }
                  }
               },
               "device_flow": {
                  "type": "object",
                  "nullable": true,
                  "description": "Device Flow configuration",
                  "properties": {
                     "charset": {
                        "type": "string",
                        "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                        "default": "base20",
                        "enum": [
                           "base20",
                           "digits"
                        ]
                     },
                     "mask": {
                        "type": "string",
                        "description": "Mask used to format a generated User Code into a friendly, readable format.",
                        "default": "****-****",
                        "maxLength": 20
                     }
                  }
               },
               "flags": {
                  "type": "object",
                  "description": "Flags used to change the behavior of this tenant.",
                  "properties": {
                     "change_pwd_flow_v1": {
                        "type": "boolean",
                        "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                        "default": false
                     },
                     "enable_apis_section": {
                        "type": "boolean",
                        "description": "Whether the APIs section is enabled (true) or disabled (false).",
                        "default": false
                     },
                     "disable_impersonation": {
                        "type": "boolean",
                        "description": "Whether the impersonation functionality has been disabled (true) or not (false). Read-only.",
                        "default": false
                     },
                     "enable_client_connections": {
                        "type": "boolean",
                        "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false).",
                        "default": true
                     },
                     "enable_pipeline2": {
                        "type": "boolean",
                        "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false).",
                        "default": true
                     },
                     "allow_legacy_delegation_grant_types": {
                        "type": "boolean",
                        "description": "If enabled, clients are able to add legacy delegation grants."
                     },
                     "allow_legacy_ro_grant_types": {
                        "type": "boolean",
                        "description": "If enabled, clients are able to add legacy RO grants."
                     },
                     "allow_legacy_tokeninfo_endpoint": {
                        "type": "boolean",
                        "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
                     },
                     "enable_legacy_profile": {
                        "type": "boolean",
                        "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
                     },
                     "enable_idtoken_api2": {
                        "type": "boolean",
                        "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
                     },
                     "enable_public_signup_user_exists_error": {
                        "type": "boolean",
                        "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
                     },
                     "enable_sso": {
                        "type": "boolean",
                        "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
                     },
                     "allow_changing_enable_sso": {
                        "type": "boolean",
                        "description": "Whether the `enable_sso` setting can be changed (true) or not (false)."
                     },
                     "disable_clickjack_protection_headers": {
                        "type": "boolean",
                        "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
                     },
                     "no_disclose_enterprise_connections": {
                        "type": "boolean",
                        "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
                     },
                     "enforce_client_authentication_on_passwordless_start": {
                        "type": "boolean",
                        "description": "Enforce client authentication for passwordless start."
                     },
                     "enable_adfs_waad_email_verification": {
                        "type": "boolean",
                        "description": "Enables the email verification flow during login for Azure AD and ADFS connections"
                     },
                     "revoke_refresh_token_grant": {
                        "type": "boolean",
                        "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
                     },
                     "dashboard_log_streams_next": {
                        "type": "boolean",
                        "description": "Enables beta access to log streaming changes"
                     },
                     "dashboard_insights_view": {
                        "type": "boolean",
                        "description": "Enables new insights activity page view"
                     },
                     "disable_fields_map_fix": {
                        "type": "boolean",
                        "description": "Disables SAML fields map fix for bad mappings with repeated attributes"
                     }
                  }
               },
               "friendly_name": {
                  "type": "string",
                  "description": "Friendly name for this tenant.",
                  "default": "My Company"
               },
               "picture_url": {
                  "type": "string",
                  "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
                  "default": "https://mycompany.org/logo.png"
               },
               "support_email": {
                  "type": "string",
                  "description": "End-user support email address.",
                  "default": "support@mycompany.org"
               },
               "support_url": {
                  "type": "string",
                  "description": "End-user support URL.",
                  "default": "https://mycompany.org/support"
               },
               "allowed_logout_urls": {
                  "type": "array",
                  "description": "URLs that are valid to redirect to after logout from Auth0.",
                  "items": {
                     "type": "string"
                  }
               },
               "session_lifetime": {
                  "type": "number",
                  "description": "Number of hours a session will stay valid.",
                  "default": 168
               },
               "idle_session_lifetime": {
                  "type": "number",
                  "description": "Number of hours for which a session can be inactive before the user must log in again.",
                  "default": 72
               },
               "sandbox_version": {
                  "type": "string",
                  "description": "Selected sandbox version for the extensibility environment.",
                  "default": "12"
               },
               "sandbox_versions_available": {
                  "type": "array",
                  "description": "Available sandbox versions for the extensibility environment.",
                  "items": {
                     "type": "string"
                  }
               },
               "default_redirection_uri": {
                  "type": "string",
                  "description": "The default absolute redirection uri, must be https"
               },
               "enabled_locales": {
                  "type": "array",
                  "description": "Supported locales for the user interface.",
                  "items": {
                     "type": "string",
                     "enum": [
                        "ar",
                        "bg",
                        "bs",
                        "cs",
                        "da",
                        "de",
                        "el",
                        "en",
                        "es",
                        "et",
                        "fi",
                        "fr",
                        "fr-CA",
                        "fr-FR",
                        "he",
                        "hi",
                        "hr",
                        "hu",
                        "id",
                        "is",
                        "it",
                        "ja",
                        "ko",
                        "lt",
                        "lv",
                        "nb",
                        "nl",
                        "pl",
                        "pt",
                        "pt-BR",
                        "pt-PT",
                        "ro",
                        "ru",
                        "sk",
                        "sl",
                        "sr",
                        "sv",
                        "th",
                        "tr",
                        "uk",
                        "vi",
                        "zh-CN",
                        "zh-TW"
                     ]
                  }
               },
               "session_cookie": {
                  "type": "object",
                  "nullable": true,
                  "description": "Session cookie configuration",
                  "required": [
                     "mode"
                  ],
                  "properties": {
                     "mode": {
                        "type": "string",
                        "description": "Behavior of the session cookie",
                        "default": "persistent",
                        "enum": [
                           "persistent",
                           "non-persistent"
                        ]
                     }
                  }
               }
            }
         },
         "token": {
            "type": "object",
            "required": [
               "jti"
            ],
            "properties": {
               "aud": {
                  "type": "string",
                  "description": "JWT's aud claim (the client_id to which the JWT was issued)."
               },
               "jti": {
                  "type": "string",
                  "description": "jti (unique ID within aud) of the blacklisted JWT.",
                  "minLength": 1
               }
            }
         },
         "clientGrant": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID of the client grant."
               },
               "client_id": {
                  "type": "string",
                  "description": "ID of the client."
               },
               "audience": {
                  "type": "string",
                  "description": "Audience or API identifier of this client grant.",
                  "minLength": 1
               },
               "scope": {
                  "type": "array",
                  "description": "Scopes allowed for this client grant.",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               }
            }
         },
         "clientGrantCreate": {
            "type": "object",
            "required": [
               "client_id",
               "audience",
               "scope"
            ],
            "properties": {
               "client_id": {
                  "type": "string",
                  "description": "ID of the client."
               },
               "audience": {
                  "type": "string",
                  "description": "Audience or API identifier of this client grant.",
                  "minLength": 1
               },
               "scope": {
                  "type": "array",
                  "description": "Scopes allowed for this client grant.",
                  "items": {
                     "type": "string",
                     "minLength": 1,
                     "maxLength": 280
                  }
               }
            }
         },
         "client": {
            "type": "object",
            "properties": {
               "client_id": {
                  "type": "string",
                  "description": "ID of this client.",
                  "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
               },
               "tenant": {
                  "type": "string",
                  "description": "Name of the tenant this client belongs to.",
                  "default": ""
               },
               "name": {
                  "type": "string",
                  "description": "Name of this client (min length: 1 character, does not allow `<` or `>`).",
                  "default": "My application"
               },
               "description": {
                  "type": "string",
                  "description": "Free text description of this client (max length: 140 characters).",
                  "default": ""
               },
               "global": {
                  "type": "boolean",
                  "description": "Whether this is your global 'All Applications' client representing legacy tenant settings (true) or a regular client (false).",
                  "default": false
               },
               "client_secret": {
                  "type": "string",
                  "description": "Client secret (which you must not make public).",
                  "default": "MG_TNT2ver-SylNat-_VeMmd-4m0Waba0jr1troztBniSChEw0glxEmgEi2Kw40H"
               },
               "app_type": {
                  "type": "string",
                  "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
                  "default": ""
               },
               "logo_uri": {
                  "type": "string",
                  "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
               },
               "is_first_party": {
                  "type": "boolean",
                  "description": "Whether this client a first party client (true) or not (false).",
                  "default": false
               },
               "oidc_conformant": {
                  "type": "boolean",
                  "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
                  "default": false
               },
               "callbacks": {
                  "type": "array",
                  "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
                  "items": {
                     "type": "string"
                  }
               },
               "allowed_origins": {
                  "type": "array",
                  "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
                  "items": {
                     "type": "string"
                  }
               },
               "web_origins": {
                  "type": "array",
                  "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
                  "items": {
                     "type": "string"
                  }
               },
               "client_aliases": {
                  "type": "array",
                  "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
                  "items": {
                     "type": "string"
                  }
               },
               "allowed_clients": {
                  "type": "array",
                  "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
                  "items": {
                     "type": "string"
                  }
               },
               "allowed_logout_urls": {
                  "type": "array",
                  "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
                  "items": {
                     "type": "string"
                  }
               },
               "oidc_backchannel_logout": {
                  "type": "object",
                  "description": "Configuration for OIDC backchannel logout",
                  "properties": {
                     "backchannel_logout_urls": {
                        "type": "array",
                        "description": "Comma-separated list of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.",
                        "items": {
                           "type": "string"
                        }
                     }
                  }
               },
               "grant_types": {
                  "type": "array",
                  "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, and `urn:ietf:params:oauth:grant-type:device_code`.",
                  "items": {
                     "type": "string"
                  }
               },
               "jwt_configuration": {
                  "type": "object",
                  "description": "Configuration related to JWTs for the client.",
                  "properties": {
                     "lifetime_in_seconds": {
                        "type": "integer",
                        "description": "Number of seconds the JWT will be valid for (affects `exp` claim).",
                        "default": 36000
                     },
                     "secret_encoded": {
                        "type": "boolean",
                        "description": "Whether the client secret is base64 encoded (true) or unencoded (false).",
                        "default": true
                     },
                     "scopes": {
                        "type": "object",
                        "description": "Configuration related to id token claims for the client.",
                        "additionalProperties": {}
                     },
                     "alg": {
                        "type": "string",
                        "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                        "default": "HS256",
                        "enum": [
                           "HS256",
                           "RS256"
                        ]
                     }
                  }
               },
               "signing_keys": {
                  "type": "array",
                  "description": "Signing certificates associated with this client.",
                  "items": {
                     "type": "object",
                     "additionalProperties": {},
                     "properties": {
                        "pkcs7": {
                           "type": "string",
                           "description": "Signing certificate public key and chain in PKCS#7 (.P7B) format.",
                           "default": ""
                        },
                        "cert": {
                           "type": "string",
                           "description": "Signing certificate public key in X.590 (.CER) format.",
                           "default": ""
                        },
                        "subject": {
                           "type": "string",
                           "description": "Subject name for this certificate in the format `/CN={domain}`.",
                           "default": ""
                        }
                     }
                  }
               },
               "encryption_key": {
                  "type": "object",
                  "nullable": true,
                  "description": "Encryption used for WsFed responses with this client.",
                  "properties": {
                     "pub": {
                        "type": "string",
                        "description": "Encryption Public RSA Key."
                     },
                     "cert": {
                        "type": "string",
                        "description": "Encryption certificate for public key in X.590 (.CER) format."
                     },
                     "subject": {
                        "type": "string",
                        "description": "Encryption certificate name for this certificate in the format `/CN={domain}`."
                     }
                  }
               },
               "sso": {
                  "type": "boolean",
                  "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false).",
                  "default": false
               },
               "sso_disabled": {
                  "type": "boolean",
                  "description": "Whether Single Sign On is disabled (true) or enabled (true). Defaults to true.",
                  "default": false
               },
               "cross_origin_auth": {
                  "type": "boolean",
                  "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
               },
               "cross_origin_loc": {
                  "type": "string",
                  "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page."
               },
               "custom_login_page_on": {
                  "type": "boolean",
                  "description": "Whether a custom login page is to be used (true) or the default provided login page (false).",
                  "default": true
               },
               "custom_login_page": {
                  "type": "string",
                  "description": "The content (HTML, CSS, JS) of the custom login page.",
                  "default": ""
               },
               "custom_login_page_preview": {
                  "type": "string",
                  "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
                  "default": ""
               },
               "form_template": {
                  "type": "string",
                  "description": "HTML form template to be used for WS-Federation.",
                  "default": ""
               },
               "addons": {
                  "type": "object",
                  "description": "Addons enabled for this client and their associated configurations.",
                  "properties": {
                     "aws": {
                        "type": "object",
                        "description": "AWS addon configuration.",
                        "properties": {
                           "principal": {
                              "type": "string",
                              "description": "AWS principal ARN, e.g. `arn:aws:iam::010616021751:saml-provider/idpname`"
                           },
                           "role": {
                              "type": "string",
                              "description": "AWS role ARN, e.g. `arn:aws:iam::010616021751:role/foo`"
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "AWS token lifetime in seconds"
                           }
                        }
                     },
                     "azure_blob": {
                        "type": "object",
                        "description": "Azure Blob Storage addon configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Your Azure storage account name. Usually first segment in your Azure storage URL. e.g. `https://acme-org.blob.core.windows.net` would be the account name `acme-org`."
                           },
                           "storageAccessKey": {
                              "type": "string",
                              "description": "Access key associated with this storage account."
                           },
                           "containerName": {
                              "type": "string",
                              "description": "Container to request a token for. e.g. `my-container`."
                           },
                           "blobName": {
                              "type": "string",
                              "description": "Entity to request a token for. e.g. `my-blob`. If blank the computed SAS will apply to the entire storage container."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Expiration in minutes for the generated token (default of 5 minutes)."
                           },
                           "signedIdentifier": {
                              "type": "string",
                              "description": "Shared access policy identifier defined in your storage account resource."
                           },
                           "blob_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation."
                           },
                           "blob_write": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "blob_delete": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to delete the blob."
                           },
                           "container_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation"
                           },
                           "container_write": {
                              "type": "boolean",
                              "description": "Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "container_delete": {
                              "type": "boolean",
                              "description": "Indicates if issued token has permission to delete any blob in the container."
                           },
                           "container_list": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to list blobs in the container."
                           }
                        }
                     },
                     "azure_sb": {
                        "type": "object",
                        "description": "Azure Storage Bus addon configuration.",
                        "properties": {
                           "namespace": {
                              "type": "string",
                              "description": "Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (e.g. `https://acme-org.servicebus.windows.net` would be `acme-org`)."
                           },
                           "sasKeyName": {
                              "type": "string",
                              "description": "Your shared access policy name defined in your Service Bus entity."
                           },
                           "sasKey": {
                              "type": "string",
                              "description": "Primary Key associated with your shared access policy."
                           },
                           "entityPath": {
                              "type": "string",
                              "description": "Entity you want to request a token for. e.g. `my-queue`.'"
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "rms": {
                        "type": "object",
                        "description": "Active Directory Rights Management Service SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "URL of your Rights Management Server. It can be internal or external, but users will have to be able to reach it."
                           }
                        }
                     },
                     "mscrm": {
                        "type": "object",
                        "description": "Microsoft Dynamics CRM SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Microsoft Dynamics CRM application URL."
                           }
                        }
                     },
                     "slack": {
                        "type": "object",
                        "description": "Slack team or workspace name usually first segment in your Slack URL. e.g. `https://acme-org.slack.com` would be `acme-org`.",
                        "required": [
                           "team"
                        ],
                        "properties": {
                           "team": {
                              "type": "string",
                              "description": "Slack team name."
                           }
                        }
                     },
                     "sentry": {
                        "type": "object",
                        "description": "Sentry SSO configuration.",
                        "properties": {
                           "org_slug": {
                              "type": "string",
                              "description": "Generated slug for your Sentry organization. Found in your Sentry URL. e.g. `https://sentry.acme.com/acme-org/` would be `acme-org`."
                           },
                           "base_url": {
                              "type": "string",
                              "description": "URL prefix only if running Sentry Community Edition, otherwise leave should be blank."
                           }
                        }
                     },
                     "box": {
                        "type": "object",
                        "description": "Box SSO indicator (no configuration settings needed for Box SSO).",
                        "additionalProperties": {}
                     },
                     "cloudbees": {
                        "type": "object",
                        "description": "CloudBees SSO indicator (no configuration settings needed for CloudBees SSO).",
                        "additionalProperties": {}
                     },
                     "concur": {
                        "type": "object",
                        "description": "Concur SSO indicator (no configuration settings needed for Concur SSO).",
                        "additionalProperties": {}
                     },
                     "dropbox": {
                        "type": "object",
                        "description": "Dropbox SSO indicator (no configuration settings needed for Dropbox SSO).",
                        "additionalProperties": {}
                     },
                     "echosign": {
                        "type": "object",
                        "description": "Adobe EchoSign SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your EchoSign URL. e.g. `https://acme-org.echosign.com` would be `acme-org`."
                           }
                        }
                     },
                     "egnyte": {
                        "type": "object",
                        "description": "Egnyte SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your Egnyte URL. e.g. `https://acme-org.egnyte.com` would be `acme-org`."
                           }
                        }
                     },
                     "firebase": {
                        "type": "object",
                        "description": "Google Firebase addon configuration.",
                        "properties": {
                           "secret": {
                              "type": "string",
                              "description": "Google Firebase Secret. (SDK 2 only)."
                           },
                           "private_key_id": {
                              "type": "string",
                              "description": "Optional ID of the private key to obtain kid header in the issued token (SDK v3+ tokens only)."
                           },
                           "private_key": {
                              "type": "string",
                              "description": "Private Key for signing the token (SDK v3+ tokens only)."
                           },
                           "client_email": {
                              "type": "string",
                              "description": "ID of the Service Account you have created (shown as `client_email` in the generated JSON file, SDK v3+ tokens only)."
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "Optional expiration in seconds for the generated token. Defaults to 3600 seconds (SDK v3+ tokens only)."
                           }
                        }
                     },
                     "newrelic": {
                        "type": "object",
                        "description": "New Relic SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path. e.g. `https://rpm.newrelic.com/accounts/123456/query` would be `123456`."
                           }
                        }
                     },
                     "office365": {
                        "type": "object",
                        "description": "Microsoft Office 365 SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your Office 365 domain name. e.g. `acme-org.com`."
                           },
                           "connection": {
                              "type": "string",
                              "description": "Optional Auth0 database connection for testing an already-configured Office 365 tenant."
                           }
                        }
                     },
                     "salesforce": {
                        "type": "object",
                        "description": "Salesforce SSO configuration.",
                        "properties": {
                           "entity_id": {
                              "type": "string",
                              "description": "Arbitrary logical URL that identifies the Saleforce resource. e.g. `https://acme-org.com`."
                           }
                        }
                     },
                     "salesforce_api": {
                        "type": "object",
                        "description": "Salesforce API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "salesforce_sandbox_api": {
                        "type": "object",
                        "description": "Salesforce Sandbox addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "samlp": {
                        "type": "object",
                        "description": "SAML2 addon indicator (no configuration settings needed for SAML2 addon).",
                        "properties": {
                           "mappings": {
                              "type": "object",
                              "additionalProperties": {}
                           },
                           "audience": {
                              "type": "string"
                           },
                           "recipient": {
                              "type": "string"
                           },
                           "createUpnClaim": {
                              "type": "boolean"
                           },
                           "mapUnknownClaimsAsIs": {
                              "type": "boolean"
                           },
                           "passthroughClaimsWithNoMapping": {
                              "type": "boolean"
                           },
                           "mapIdentities": {
                              "type": "boolean"
                           },
                           "signatureAlgorithm": {
                              "type": "string"
                           },
                           "digestAlgorithm": {
                              "type": "string"
                           },
                           "issuer": {
                              "type": "string"
                           },
                           "destination": {
                              "type": "string"
                           },
                           "lifetimeInSeconds": {
                              "type": "integer"
                           },
                           "signResponse": {
                              "type": "boolean"
                           },
                           "nameIdentifierFormat": {
                              "type": "string"
                           },
                           "nameIdentifierProbes": {
                              "type": "array",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           },
                           "authnContextClassRef": {
                              "type": "string"
                           }
                        }
                     },
                     "layer": {
                        "type": "object",
                        "description": "Layer addon configuration.",
                        "required": [
                           "providerId",
                           "keyId",
                           "privateKey"
                        ],
                        "properties": {
                           "providerId": {
                              "type": "string",
                              "description": "Provider ID of your Layer account"
                           },
                           "keyId": {
                              "type": "string",
                              "description": "Authentication Key identifier used to sign the Layer token."
                           },
                           "privateKey": {
                              "type": "string",
                              "description": "Private key for signing the Layer token."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property used as the unique user id in Layer. If not specified `user_id` is used."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "sap_api": {
                        "type": "object",
                        "description": "SAP API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "If activated in the OAuth 2.0 client configuration (transaction SOAUTH2) the SAML attribute client_id must be set and equal the client_id form parameter of the access token request."
                           },
                           "usernameAttribute": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a SAP username. e.g. `email`."
                           },
                           "tokenEndpointUrl": {
                              "type": "string",
                              "description": "Your SAP OData server OAuth2 token endpoint URL."
                           },
                           "scope": {
                              "type": "string",
                              "description": "Requested scope for SAP APIs."
                           },
                           "servicePassword": {
                              "type": "string",
                              "description": "Service account password to use to authenticate API calls to the token endpoint."
                           },
                           "nameIdentifierFormat": {
                              "type": "string",
                              "description": "NameID element of the Subject which can be used to express the user's identity. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`."
                           }
                        }
                     },
                     "sharepoint": {
                        "type": "object",
                        "description": "SharePoint SSO configuration.",
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Internal SharePoint application URL."
                           },
                           "external_url": {
                              "description": "External SharePoint application URLs if exposed to the Internet.",
                              "oneOf": [
                                 {
                                    "type": "array",
                                    "items": {
                                       "type": "string"
                                    }
                                 },
                                 {
                                    "type": "string"
                                 }
                              ]
                           }
                        }
                     },
                     "springcm": {
                        "type": "object",
                        "description": "SpringCM SSO configuration.",
                        "properties": {
                           "acsurl": {
                              "type": "string",
                              "description": "SpringCM ACS URL, e.g. `https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx`."
                           }
                        }
                     },
                     "wams": {
                        "type": "object",
                        "description": "Windows Azure Mobile Services addon configuration.",
                        "properties": {
                           "masterkey": {
                              "type": "string",
                              "description": "Your master key for Windows Azure Mobile Services."
                           }
                        }
                     },
                     "wsfed": {
                        "type": "object",
                        "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in `callback` and `client_aliases` properties on the client.",
                        "additionalProperties": {}
                     },
                     "zendesk": {
                        "type": "object",
                        "description": "Zendesk SSO configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Zendesk account name usually first segment in your Zendesk URL. e.g. `https://acme-org.zendesk.com` would be `acme-org`."
                           }
                        }
                     },
                     "zoom": {
                        "type": "object",
                        "description": "Zoom SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Zoom account name usually first segment of your Zoom URL, e.g. `https://acme-org.zoom.us` would be `acme-org`."
                           }
                        }
                     },
                     "sso_integration": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "SSO integration name"
                           },
                           "version": {
                              "type": "string",
                              "description": "SSO integration version installed"
                           }
                        }
                     }
                  }
               },
               "token_endpoint_auth_method": {
                  "type": "string",
                  "description": "Defines the requested authentication method for the token endpoint. Can be `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), or `client_secret_basic` (client uses HTTP Basic).",
                  "default": "none",
                  "enum": [
                     "none",
                     "client_secret_post",
                     "client_secret_basic"
                  ]
               },
               "client_metadata": {
                  "type": "object",
                  "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.  Field names (max 255 chars) are alphanumeric and may only include the following special characters:  :,-+=_*?\"\/\\()><@[Tab] [Space]",
                  "additionalProperties": {}
               },
               "mobile": {
                  "type": "object",
                  "description": "Additional configuration for native mobile apps.",
                  "properties": {
                     "android": {
                        "type": "object",
                        "description": "Android native app configuration.",
                        "properties": {
                           "app_package_name": {
                              "type": "string",
                              "description": "App package name found in AndroidManifest.xml.",
                              "default": ""
                           },
                           "sha256_cert_fingerprints": {
                              "type": "array",
                              "description": "SHA256 fingerprints of the app's signing certificate. Multiple fingerprints can be used to support different versions of your app, such as debug and production builds.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     },
                     "ios": {
                        "type": "object",
                        "description": "iOS native app configuration.",
                        "properties": {
                           "team_id": {
                              "type": "string",
                              "description": "Identifier assigned to the Apple account that signs and uploads the app to the store.",
                              "default": ""
                           },
                           "app_bundle_identifier": {
                              "type": "string",
                              "description": "Assigned by developer to the app as its unique identifier inside the store. Usually this is a reverse domain plus the app name, e.g. `com.you.MyApp`.",
                              "default": ""
                           }
                        }
                     }
                  }
               },
               "initiate_login_uri": {
                  "type": "string",
                  "description": "Initiate login uri, must be https"
               },
               "native_social_login": {
                  "type": "object",
                  "nullable": true,
                  "description": "Configure native social settings",
                  "properties": {
                     "apple": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Apple connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using an Apple authorization code",
                              "default": false
                           }
                        }
                     },
                     "facebook": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Facebook connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using Facebook",
                              "default": false
                           }
                        }
                     }
                  }
               },
               "refresh_token": {
                  "type": "object",
                  "nullable": true,
                  "description": "Refresh token configuration",
                  "required": [
                     "rotation_type",
                     "expiration_type"
                  ],
                  "properties": {
                     "rotation_type": {
                        "type": "string",
                        "description": "Refresh token rotation types, one of: rotating, non-rotating",
                        "default": "non-rotating",
                        "enum": [
                           "rotating",
                           "non-rotating"
                        ]
                     },
                     "expiration_type": {
                        "type": "string",
                        "description": "Refresh token expiration types, one of: expiring, non-expiring",
                        "default": "non-expiring",
                        "enum": [
                           "expiring",
                           "non-expiring"
                        ]
                     },
                     "leeway": {
                        "type": "integer",
                        "description": "Period in seconds where the previous refresh token can be exchanged without triggering breach detection",
                        "default": 0
                     },
                     "token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid"
                     },
                     "infinite_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from having a set lifetime when `true` (takes precedence over `token_lifetime` values)"
                     },
                     "idle_token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid without use"
                     },
                     "infinite_idle_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from expiring without use when `true` (takes precedence over `idle_token_lifetime` values)",
                        "default": false
                     }
                  }
               },
               "organization_usage": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`.",
                  "default": "deny",
                  "enum": [
                     "deny",
                     "allow",
                     "require"
                  ]
               },
               "organization_require_behavior": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default) or `pre_login_prompt`.",
                  "default": "no_prompt",
                  "enum": [
                     "no_prompt",
                     "pre_login_prompt"
                  ]
               }
            }
         },
         "clientCreate": {
            "type": "object",
            "required": [
               "name"
            ],
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this client (min length: 1 character, does not allow `<` or `>`)."
               },
               "description": {
                  "type": "string",
                  "description": "Free text description of this client (max length: 140 characters).",
                  "maxLength": 140
               },
               "logo_uri": {
                  "type": "string",
                  "description": "URL of the logo to display for this client. Recommended size is 150x150 pixels."
               },
               "callbacks": {
                  "type": "array",
                  "description": "Comma-separated list of URLs whitelisted for Auth0 to use as a callback to the client after authentication.",
                  "items": {
                     "type": "string"
                  }
               },
               "oidc_backchannel_logout": {
                  "type": "object",
                  "description": "Configuration for OIDC backchannel logout",
                  "required": [
                     "backchannel_logout_urls"
                  ],
                  "properties": {
                     "backchannel_logout_urls": {
                        "type": "array",
                        "description": "Comma-separated list of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.",
                        "items": {
                           "type": "string"
                        }
                     }
                  }
               },
               "allowed_origins": {
                  "type": "array",
                  "description": "Comma-separated list of URLs allowed to make requests from JavaScript to Auth0 API (typically used with CORS). By default, all your callback URLs will be allowed. This field allows you to enter other origins if necessary. You can also use wildcards at the subdomain level (e.g., https://*.contoso.com). Query strings and hash information are not taken into account when validating these URLs.",
                  "items": {
                     "type": "string"
                  }
               },
               "web_origins": {
                  "type": "array",
                  "description": "Comma-separated list of allowed origins for use with <a href='https://auth0.com/docs/cross-origin-authentication'>Cross-Origin Authentication</a>, <a href='https://auth0.com/docs/flows/concepts/device-auth'>Device Flow</a>, and <a href='https://auth0.com/docs/protocols/oauth2#how-response-mode-works'>web message response mode</a>.",
                  "items": {
                     "type": "string"
                  }
               },
               "client_aliases": {
                  "type": "array",
                  "description": "List of audiences/realms for SAML protocol. Used by the wsfed addon.",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "allowed_clients": {
                  "type": "array",
                  "description": "List of allow clients and API ids that are allowed to make delegation requests. Empty means all all your clients are allowed.",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "allowed_logout_urls": {
                  "type": "array",
                  "description": "Comma-separated list of URLs that are valid to redirect to after logout from Auth0. Wildcards are allowed for subdomains.",
                  "items": {
                     "type": "string"
                  }
               },
               "grant_types": {
                  "type": "array",
                  "description": "List of grant types supported for this application. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, and `urn:ietf:params:oauth:grant-type:device_code`.",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "token_endpoint_auth_method": {
                  "type": "string",
                  "description": "Defines the requested authentication method for the token endpoint. Can be `none` (public client without a client secret), `client_secret_post` (client uses HTTP POST parameters), or `client_secret_basic` (client uses HTTP Basic).",
                  "enum": [
                     "none",
                     "client_secret_post",
                     "client_secret_basic"
                  ]
               },
               "app_type": {
                  "type": "string",
                  "description": "Type of client used to determine which settings are applicable. Can be `spa`, `native`, `non_interactive`, or `regular_web`.",
                  "enum": [
                     "native",
                     "spa",
                     "regular_web",
                     "non_interactive",
                     "rms",
                     "box",
                     "cloudbees",
                     "concur",
                     "dropbox",
                     "mscrm",
                     "echosign",
                     "egnyte",
                     "newrelic",
                     "office365",
                     "salesforce",
                     "sentry",
                     "sharepoint",
                     "slack",
                     "springcm",
                     "zendesk",
                     "zoom",
                     "sso_integration"
                  ]
               },
               "is_first_party": {
                  "type": "boolean",
                  "description": "Whether this client a first party client or not",
                  "default": true
               },
               "oidc_conformant": {
                  "type": "boolean",
                  "description": "Whether this client conforms to <a href='https://auth0.com/docs/api-auth/tutorials/adoption'>strict OIDC specifications</a> (true) or uses legacy features (false).",
                  "default": false
               },
               "jwt_configuration": {
                  "type": "object",
                  "description": "Configuration related to JWTs for the client.",
                  "properties": {
                     "lifetime_in_seconds": {
                        "type": "integer",
                        "description": "Number of seconds the JWT will be valid for (affects `exp` claim)."
                     },
                     "scopes": {
                        "type": "object",
                        "description": "Configuration related to id token claims for the client.",
                        "additionalProperties": {}
                     },
                     "alg": {
                        "type": "string",
                        "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                        "enum": [
                           "HS256",
                           "RS256"
                        ]
                     }
                  }
               },
               "encryption_key": {
                  "type": "object",
                  "description": "Encryption used for WsFed responses with this client.",
                  "properties": {
                     "pub": {
                        "type": "string",
                        "description": "Encryption Public RSA Key.",
                        "minLength": 1
                     },
                     "cert": {
                        "type": "string",
                        "description": "Encryption certificate for public key in X.590 (.CER) format.",
                        "minLength": 1
                     },
                     "subject": {
                        "type": "string",
                        "description": "Encryption certificate name for this certificate in the format `/CN={domain}`.",
                        "minLength": 1
                     }
                  }
               },
               "sso": {
                  "type": "boolean",
                  "description": "Applies only to SSO clients and determines whether Auth0 will handle Single Sign On (true) or whether the Identity Provider will (false)."
               },
               "cross_origin_auth": {
                  "type": "boolean",
                  "description": "Whether this client can be used to make cross-origin authentication requests (true) or it is not allowed to make such requests (false)."
               },
               "cross_origin_loc": {
                  "type": "string",
                  "description": "URL of the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page."
               },
               "sso_disabled": {
                  "type": "boolean",
                  "description": "<code>true<\/code> to disable Single Sign On, <code>false<\/code> otherwise (default: <code>false<\/code>)"
               },
               "custom_login_page_on": {
                  "type": "boolean",
                  "description": "<code>true<\/code> if the custom login page is to be used, <code>false<\/code> otherwise. Defaults to <code>true<\/code>"
               },
               "custom_login_page": {
                  "type": "string",
                  "description": "The content (HTML, CSS, JS) of the custom login page.",
                  "minLength": 1
               },
               "custom_login_page_preview": {
                  "type": "string",
                  "description": "The content (HTML, CSS, JS) of the custom login page. (Used on Previews)",
                  "minLength": 1
               },
               "form_template": {
                  "type": "string",
                  "description": "HTML form template to be used for WS-Federation.",
                  "minLength": 1
               },
               "addons": {
                  "type": "object",
                  "description": "Addons enabled for this client and their associated configurations.",
                  "properties": {
                     "aws": {
                        "type": "object",
                        "description": "AWS addon configuration.",
                        "properties": {
                           "principal": {
                              "type": "string",
                              "description": "AWS principal ARN, e.g. `arn:aws:iam::010616021751:saml-provider/idpname`"
                           },
                           "role": {
                              "type": "string",
                              "description": "AWS role ARN, e.g. `arn:aws:iam::010616021751:role/foo`"
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "AWS token lifetime in seconds"
                           }
                        }
                     },
                     "azure_blob": {
                        "type": "object",
                        "description": "Azure Blob Storage addon configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Your Azure storage account name. Usually first segment in your Azure storage URL. e.g. `https://acme-org.blob.core.windows.net` would be the account name `acme-org`."
                           },
                           "storageAccessKey": {
                              "type": "string",
                              "description": "Access key associated with this storage account."
                           },
                           "containerName": {
                              "type": "string",
                              "description": "Container to request a token for. e.g. `my-container`."
                           },
                           "blobName": {
                              "type": "string",
                              "description": "Entity to request a token for. e.g. `my-blob`. If blank the computed SAS will apply to the entire storage container."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Expiration in minutes for the generated token (default of 5 minutes)."
                           },
                           "signedIdentifier": {
                              "type": "string",
                              "description": "Shared access policy identifier defined in your storage account resource."
                           },
                           "blob_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation."
                           },
                           "blob_write": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "blob_delete": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to delete the blob."
                           },
                           "container_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation"
                           },
                           "container_write": {
                              "type": "boolean",
                              "description": "Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "container_delete": {
                              "type": "boolean",
                              "description": "Indicates if issued token has permission to delete any blob in the container."
                           },
                           "container_list": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to list blobs in the container."
                           }
                        }
                     },
                     "azure_sb": {
                        "type": "object",
                        "description": "Azure Storage Bus addon configuration.",
                        "properties": {
                           "namespace": {
                              "type": "string",
                              "description": "Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (e.g. `https://acme-org.servicebus.windows.net` would be `acme-org`)."
                           },
                           "sasKeyName": {
                              "type": "string",
                              "description": "Your shared access policy name defined in your Service Bus entity."
                           },
                           "sasKey": {
                              "type": "string",
                              "description": "Primary Key associated with your shared access policy."
                           },
                           "entityPath": {
                              "type": "string",
                              "description": "Entity you want to request a token for. e.g. `my-queue`.'"
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "rms": {
                        "type": "object",
                        "description": "Active Directory Rights Management Service SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "URL of your Rights Management Server. It can be internal or external, but users will have to be able to reach it."
                           }
                        }
                     },
                     "mscrm": {
                        "type": "object",
                        "description": "Microsoft Dynamics CRM SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Microsoft Dynamics CRM application URL."
                           }
                        }
                     },
                     "slack": {
                        "type": "object",
                        "description": "Slack team or workspace name usually first segment in your Slack URL. e.g. `https://acme-org.slack.com` would be `acme-org`.",
                        "required": [
                           "team"
                        ],
                        "properties": {
                           "team": {
                              "type": "string",
                              "description": "Slack team name."
                           }
                        }
                     },
                     "sentry": {
                        "type": "object",
                        "description": "Sentry SSO configuration.",
                        "properties": {
                           "org_slug": {
                              "type": "string",
                              "description": "Generated slug for your Sentry organization. Found in your Sentry URL. e.g. `https://sentry.acme.com/acme-org/` would be `acme-org`."
                           },
                           "base_url": {
                              "type": "string",
                              "description": "URL prefix only if running Sentry Community Edition, otherwise leave should be blank."
                           }
                        }
                     },
                     "box": {
                        "type": "object",
                        "description": "Box SSO indicator (no configuration settings needed for Box SSO).",
                        "additionalProperties": {}
                     },
                     "cloudbees": {
                        "type": "object",
                        "description": "CloudBees SSO indicator (no configuration settings needed for CloudBees SSO).",
                        "additionalProperties": {}
                     },
                     "concur": {
                        "type": "object",
                        "description": "Concur SSO indicator (no configuration settings needed for Concur SSO).",
                        "additionalProperties": {}
                     },
                     "dropbox": {
                        "type": "object",
                        "description": "Dropbox SSO indicator (no configuration settings needed for Dropbox SSO).",
                        "additionalProperties": {}
                     },
                     "echosign": {
                        "type": "object",
                        "description": "Adobe EchoSign SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your EchoSign URL. e.g. `https://acme-org.echosign.com` would be `acme-org`."
                           }
                        }
                     },
                     "egnyte": {
                        "type": "object",
                        "description": "Egnyte SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your Egnyte URL. e.g. `https://acme-org.egnyte.com` would be `acme-org`."
                           }
                        }
                     },
                     "firebase": {
                        "type": "object",
                        "description": "Google Firebase addon configuration.",
                        "properties": {
                           "secret": {
                              "type": "string",
                              "description": "Google Firebase Secret. (SDK 2 only)."
                           },
                           "private_key_id": {
                              "type": "string",
                              "description": "Optional ID of the private key to obtain kid header in the issued token (SDK v3+ tokens only)."
                           },
                           "private_key": {
                              "type": "string",
                              "description": "Private Key for signing the token (SDK v3+ tokens only)."
                           },
                           "client_email": {
                              "type": "string",
                              "description": "ID of the Service Account you have created (shown as `client_email` in the generated JSON file, SDK v3+ tokens only)."
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "Optional expiration in seconds for the generated token. Defaults to 3600 seconds (SDK v3+ tokens only)."
                           }
                        }
                     },
                     "newrelic": {
                        "type": "object",
                        "description": "New Relic SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path. e.g. `https://rpm.newrelic.com/accounts/123456/query` would be `123456`."
                           }
                        }
                     },
                     "office365": {
                        "type": "object",
                        "description": "Microsoft Office 365 SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your Office 365 domain name. e.g. `acme-org.com`."
                           },
                           "connection": {
                              "type": "string",
                              "description": "Optional Auth0 database connection for testing an already-configured Office 365 tenant."
                           }
                        }
                     },
                     "salesforce": {
                        "type": "object",
                        "description": "Salesforce SSO configuration.",
                        "properties": {
                           "entity_id": {
                              "type": "string",
                              "description": "Arbitrary logical URL that identifies the Saleforce resource. e.g. `https://acme-org.com`."
                           }
                        }
                     },
                     "salesforce_api": {
                        "type": "object",
                        "description": "Salesforce API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "salesforce_sandbox_api": {
                        "type": "object",
                        "description": "Salesforce Sandbox addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "samlp": {
                        "type": "object",
                        "description": "SAML2 addon indicator (no configuration settings needed for SAML2 addon).",
                        "properties": {
                           "mappings": {
                              "type": "object",
                              "additionalProperties": {}
                           },
                           "audience": {
                              "type": "string"
                           },
                           "recipient": {
                              "type": "string"
                           },
                           "createUpnClaim": {
                              "type": "boolean"
                           },
                           "mapUnknownClaimsAsIs": {
                              "type": "boolean"
                           },
                           "passthroughClaimsWithNoMapping": {
                              "type": "boolean"
                           },
                           "mapIdentities": {
                              "type": "boolean"
                           },
                           "signatureAlgorithm": {
                              "type": "string"
                           },
                           "digestAlgorithm": {
                              "type": "string"
                           },
                           "issuer": {
                              "type": "string"
                           },
                           "destination": {
                              "type": "string"
                           },
                           "lifetimeInSeconds": {
                              "type": "integer"
                           },
                           "signResponse": {
                              "type": "boolean"
                           },
                           "nameIdentifierFormat": {
                              "type": "string"
                           },
                           "nameIdentifierProbes": {
                              "type": "array",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           },
                           "authnContextClassRef": {
                              "type": "string"
                           }
                        }
                     },
                     "layer": {
                        "type": "object",
                        "description": "Layer addon configuration.",
                        "required": [
                           "providerId",
                           "keyId",
                           "privateKey"
                        ],
                        "properties": {
                           "providerId": {
                              "type": "string",
                              "description": "Provider ID of your Layer account"
                           },
                           "keyId": {
                              "type": "string",
                              "description": "Authentication Key identifier used to sign the Layer token."
                           },
                           "privateKey": {
                              "type": "string",
                              "description": "Private key for signing the Layer token."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property used as the unique user id in Layer. If not specified `user_id` is used."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "sap_api": {
                        "type": "object",
                        "description": "SAP API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "If activated in the OAuth 2.0 client configuration (transaction SOAUTH2) the SAML attribute client_id must be set and equal the client_id form parameter of the access token request."
                           },
                           "usernameAttribute": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a SAP username. e.g. `email`."
                           },
                           "tokenEndpointUrl": {
                              "type": "string",
                              "description": "Your SAP OData server OAuth2 token endpoint URL."
                           },
                           "scope": {
                              "type": "string",
                              "description": "Requested scope for SAP APIs."
                           },
                           "servicePassword": {
                              "type": "string",
                              "description": "Service account password to use to authenticate API calls to the token endpoint."
                           },
                           "nameIdentifierFormat": {
                              "type": "string",
                              "description": "NameID element of the Subject which can be used to express the user's identity. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`."
                           }
                        }
                     },
                     "sharepoint": {
                        "type": "object",
                        "description": "SharePoint SSO configuration.",
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Internal SharePoint application URL."
                           },
                           "external_url": {
                              "description": "External SharePoint application URLs if exposed to the Internet.",
                              "oneOf": [
                                 {
                                    "type": "array",
                                    "items": {
                                       "type": "string"
                                    }
                                 },
                                 {
                                    "type": "string"
                                 }
                              ]
                           }
                        }
                     },
                     "springcm": {
                        "type": "object",
                        "description": "SpringCM SSO configuration.",
                        "properties": {
                           "acsurl": {
                              "type": "string",
                              "description": "SpringCM ACS URL, e.g. `https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx`."
                           }
                        }
                     },
                     "wams": {
                        "type": "object",
                        "description": "Windows Azure Mobile Services addon configuration.",
                        "properties": {
                           "masterkey": {
                              "type": "string",
                              "description": "Your master key for Windows Azure Mobile Services."
                           }
                        }
                     },
                     "wsfed": {
                        "type": "object",
                        "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in `callback` and `client_aliases` properties on the client.",
                        "additionalProperties": {}
                     },
                     "zendesk": {
                        "type": "object",
                        "description": "Zendesk SSO configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Zendesk account name usually first segment in your Zendesk URL. e.g. `https://acme-org.zendesk.com` would be `acme-org`."
                           }
                        }
                     },
                     "zoom": {
                        "type": "object",
                        "description": "Zoom SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Zoom account name usually first segment of your Zoom URL, e.g. `https://acme-org.zoom.us` would be `acme-org`."
                           }
                        }
                     },
                     "sso_integration": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "SSO integration name"
                           },
                           "version": {
                              "type": "string",
                              "description": "SSO integration version installed"
                           }
                        }
                     }
                  }
               },
               "client_metadata": {
                  "type": "object",
                  "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.  Field names (max 255 chars) are alphanumeric and may only include the following special characters:  :,-+=_*?\"\/\\()><@[Tab] [Space]",
                  "additionalProperties": {}
               },
               "mobile": {
                  "type": "object",
                  "description": "Additional configuration for native mobile apps.",
                  "properties": {
                     "android": {
                        "type": "object",
                        "description": "Android native app configuration.",
                        "properties": {
                           "app_package_name": {
                              "type": "string",
                              "description": "App package name found in AndroidManifest.xml.",
                              "default": "",
                              "minLength": 1
                           },
                           "sha256_cert_fingerprints": {
                              "type": "array",
                              "description": "SHA256 fingerprints of the app's signing certificate. Multiple fingerprints can be used to support different versions of your app, such as debug and production builds.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     },
                     "ios": {
                        "type": "object",
                        "description": "Configuration related to iOS native apps",
                        "properties": {
                           "team_id": {
                              "type": "string",
                              "description": "Identifier assigned to the account that signs and upload the app to the store",
                              "default": "",
                              "minLength": 1
                           },
                           "app_bundle_identifier": {
                              "type": "string",
                              "description": "Assigned by the developer to the app as its unique identifier inside the store, usually is a reverse domain plus the app name: <code>com.you.MyApp<\/code>",
                              "default": "",
                              "minLength": 1
                           }
                        }
                     }
                  }
               },
               "initiate_login_uri": {
                  "type": "string",
                  "description": "Initiate login uri, must be https"
               },
               "native_social_login": {
                  "type": "object",
                  "nullable": true,
                  "description": "Configure native social settings",
                  "properties": {
                     "apple": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Apple connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using an Apple authorization code",
                              "default": false
                           }
                        }
                     },
                     "facebook": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Facebook connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using Facebook",
                              "default": false
                           }
                        }
                     }
                  }
               },
               "refresh_token": {
                  "type": "object",
                  "nullable": true,
                  "description": "Refresh token configuration",
                  "required": [
                     "rotation_type",
                     "expiration_type"
                  ],
                  "properties": {
                     "rotation_type": {
                        "type": "string",
                        "description": "Refresh token rotation types, one of: rotating, non-rotating",
                        "default": "non-rotating",
                        "enum": [
                           "rotating",
                           "non-rotating"
                        ]
                     },
                     "expiration_type": {
                        "type": "string",
                        "description": "Refresh token expiration types, one of: expiring, non-expiring",
                        "default": "non-expiring",
                        "enum": [
                           "expiring",
                           "non-expiring"
                        ]
                     },
                     "leeway": {
                        "type": "integer",
                        "description": "Period in seconds where the previous refresh token can be exchanged without triggering breach detection",
                        "default": 0
                     },
                     "token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid"
                     },
                     "infinite_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from having a set lifetime when `true` (takes precedence over `token_lifetime` values)"
                     },
                     "idle_token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid without use"
                     },
                     "infinite_idle_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from expiring without use when `true` (takes precedence over `idle_token_lifetime` values)",
                        "default": false
                     }
                  }
               },
               "organization_usage": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`.",
                  "default": "deny",
                  "enum": [
                     "deny",
                     "allow",
                     "require"
                  ]
               },
               "organization_require_behavior": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default) or `pre_login_prompt`.",
                  "default": "no_prompt",
                  "enum": [
                     "no_prompt",
                     "pre_login_prompt"
                  ]
               }
            }
         },
         "clientUpdate": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "The name of the client. Must contain at least one character. Does not allow '<' or '>'."
               },
               "description": {
                  "type": "string",
                  "description": "Free text description of the purpose of the Client. (Max character length: <code>140<\/code>)",
                  "maxLength": 140
               },
               "client_secret": {
                  "type": "string",
                  "description": "The secret used to sign tokens for the client",
                  "minLength": 1
               },
               "logo_uri": {
                  "type": "string",
                  "description": "The URL of the client logo (recommended size: 150x150)"
               },
               "callbacks": {
                  "type": "array",
                  "description": "A set of URLs that are valid to call back from Auth0 when authenticating users",
                  "items": {
                     "type": "string"
                  }
               },
               "oidc_backchannel_logout": {
                  "type": "object",
                  "nullable": true,
                  "description": "Configuration for OIDC backchannel logout",
                  "properties": {
                     "backchannel_logout_urls": {
                        "type": "array",
                        "description": "Comma-separated list of URLs that are valid to call back from Auth0 for OIDC backchannel logout. Currently only one URL is allowed.",
                        "items": {
                           "type": "string"
                        }
                     }
                  }
               },
               "allowed_origins": {
                  "type": "array",
                  "description": "A set of URLs that represents valid origins for CORS",
                  "items": {
                     "type": "string"
                  }
               },
               "web_origins": {
                  "type": "array",
                  "description": "A set of URLs that represents valid web origins for use with web message response mode",
                  "items": {
                     "type": "string"
                  }
               },
               "grant_types": {
                  "type": "array",
                  "description": "A set of grant types that the client is authorized to use",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "client_aliases": {
                  "type": "array",
                  "description": "List of audiences for SAML protocol",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "allowed_clients": {
                  "type": "array",
                  "description": "Ids of clients that will be allowed to perform delegation requests. Clients that will be allowed to make delegation request. By default, all your clients will be allowed. This field allows you to specify specific clients",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               },
               "allowed_logout_urls": {
                  "type": "array",
                  "description": "URLs that are valid to redirect to after logout from Auth0.",
                  "items": {
                     "type": "string"
                  }
               },
               "jwt_configuration": {
                  "type": "object",
                  "nullable": true,
                  "description": "An object that holds settings related to how JWTs are created",
                  "properties": {
                     "lifetime_in_seconds": {
                        "type": "integer",
                        "description": "The amount of time (in seconds) that the token will be valid after being issued"
                     },
                     "scopes": {
                        "type": "object",
                        "additionalProperties": {}
                     },
                     "alg": {
                        "type": "string",
                        "description": "The algorithm used to sign the JsonWebToken",
                        "enum": [
                           "HS256",
                           "RS256"
                        ]
                     }
                  }
               },
               "encryption_key": {
                  "type": "object",
                  "nullable": true,
                  "description": "The client's encryption key",
                  "properties": {
                     "pub": {
                        "type": "string",
                        "description": "Encryption public key",
                        "minLength": 1
                     },
                     "cert": {
                        "type": "string",
                        "description": "Encryption certificate",
                        "minLength": 1
                     },
                     "subject": {
                        "type": "string",
                        "description": "Certificate subject",
                        "minLength": 1
                     }
                  }
               },
               "sso": {
                  "type": "boolean",
                  "description": "<code>true<\/code> to use Auth0 instead of the IdP to do Single Sign On, <code>false<\/code> otherwise (default: <code>false<\/code>)"
               },
               "cross_origin_auth": {
                  "type": "boolean",
                  "description": "<code>true<\/code> if this client can be used to make cross-origin authentication requests, <code>false<\/code> otherwise (default: <code>false<\/code>)"
               },
               "cross_origin_loc": {
                  "type": "string",
                  "description": "URL for the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page.",
                  "nullable": true
               },
               "sso_disabled": {
                  "type": "boolean",
                  "description": "<code>true<\/code> to disable Single Sign On, <code>false<\/code> otherwise (default: <code>false<\/code>)"
               },
               "custom_login_page_on": {
                  "type": "boolean",
                  "description": "<code>true<\/code> if the custom login page is to be used, <code>false<\/code> otherwise."
               },
               "token_endpoint_auth_method": {
                  "type": "string",
                  "description": "Defines the requested authentication method for the token endpoint. Possible values are 'none' (public client without a client secret), 'client_secret_post' (client uses HTTP POST parameters) or 'client_secret_basic' (client uses HTTP Basic)",
                  "nullable": true,
                  "enum": [
                     "none",
                     "client_secret_post",
                     "client_secret_basic",
                     null
                  ]
               },
               "app_type": {
                  "type": "string",
                  "description": "The type of application this client represents",
                  "enum": [
                     "native",
                     "spa",
                     "regular_web",
                     "non_interactive",
                     "rms",
                     "box",
                     "cloudbees",
                     "concur",
                     "dropbox",
                     "mscrm",
                     "echosign",
                     "egnyte",
                     "newrelic",
                     "office365",
                     "salesforce",
                     "sentry",
                     "sharepoint",
                     "slack",
                     "springcm",
                     "zendesk",
                     "zoom",
                     "sso_integration"
                  ]
               },
               "is_first_party": {
                  "type": "boolean",
                  "description": "Whether this client a first party client or not",
                  "default": true
               },
               "oidc_conformant": {
                  "type": "boolean",
                  "description": "Whether this client will conform to strict OIDC specifications",
                  "default": false
               },
               "custom_login_page": {
                  "type": "string",
                  "description": "The content (HTML, CSS, JS) of the custom login page"
               },
               "custom_login_page_preview": {
                  "type": "string"
               },
               "form_template": {
                  "type": "string",
                  "description": "Form template for WS-Federation protocol"
               },
               "addons": {
                  "type": "object",
                  "nullable": true,
                  "description": "Addons enabled for this client and their associated configurations.",
                  "properties": {
                     "aws": {
                        "type": "object",
                        "description": "AWS addon configuration.",
                        "properties": {
                           "principal": {
                              "type": "string",
                              "description": "AWS principal ARN, e.g. `arn:aws:iam::010616021751:saml-provider/idpname`"
                           },
                           "role": {
                              "type": "string",
                              "description": "AWS role ARN, e.g. `arn:aws:iam::010616021751:role/foo`"
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "AWS token lifetime in seconds"
                           }
                        }
                     },
                     "azure_blob": {
                        "type": "object",
                        "description": "Azure Blob Storage addon configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Your Azure storage account name. Usually first segment in your Azure storage URL. e.g. `https://acme-org.blob.core.windows.net` would be the account name `acme-org`."
                           },
                           "storageAccessKey": {
                              "type": "string",
                              "description": "Access key associated with this storage account."
                           },
                           "containerName": {
                              "type": "string",
                              "description": "Container to request a token for. e.g. `my-container`."
                           },
                           "blobName": {
                              "type": "string",
                              "description": "Entity to request a token for. e.g. `my-blob`. If blank the computed SAS will apply to the entire storage container."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Expiration in minutes for the generated token (default of 5 minutes)."
                           },
                           "signedIdentifier": {
                              "type": "string",
                              "description": "Shared access policy identifier defined in your storage account resource."
                           },
                           "blob_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata and block list. Use the blob as the source of a copy operation."
                           },
                           "blob_write": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "blob_delete": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to delete the blob."
                           },
                           "container_read": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to read the content, properties, metadata or block list of any blob in the container. Use any blob in the container as the source of a copy operation"
                           },
                           "container_write": {
                              "type": "boolean",
                              "description": "Indicates that for any blob in the container if the issued token has permission to create or write content, properties, metadata, or block list. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation within the same account."
                           },
                           "container_delete": {
                              "type": "boolean",
                              "description": "Indicates if issued token has permission to delete any blob in the container."
                           },
                           "container_list": {
                              "type": "boolean",
                              "description": "Indicates if the issued token has permission to list blobs in the container."
                           }
                        }
                     },
                     "azure_sb": {
                        "type": "object",
                        "description": "Azure Storage Bus addon configuration.",
                        "properties": {
                           "namespace": {
                              "type": "string",
                              "description": "Your Azure Service Bus namespace. Usually the first segment of your Service Bus URL (e.g. `https://acme-org.servicebus.windows.net` would be `acme-org`)."
                           },
                           "sasKeyName": {
                              "type": "string",
                              "description": "Your shared access policy name defined in your Service Bus entity."
                           },
                           "sasKey": {
                              "type": "string",
                              "description": "Primary Key associated with your shared access policy."
                           },
                           "entityPath": {
                              "type": "string",
                              "description": "Entity you want to request a token for. e.g. `my-queue`.'"
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "rms": {
                        "type": "object",
                        "description": "Active Directory Rights Management Service SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "URL of your Rights Management Server. It can be internal or external, but users will have to be able to reach it."
                           }
                        }
                     },
                     "mscrm": {
                        "type": "object",
                        "description": "Microsoft Dynamics CRM SSO configuration.",
                        "required": [
                           "url"
                        ],
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Microsoft Dynamics CRM application URL."
                           }
                        }
                     },
                     "slack": {
                        "type": "object",
                        "description": "Slack team or workspace name usually first segment in your Slack URL. e.g. `https://acme-org.slack.com` would be `acme-org`.",
                        "required": [
                           "team"
                        ],
                        "properties": {
                           "team": {
                              "type": "string",
                              "description": "Slack team name."
                           }
                        }
                     },
                     "sentry": {
                        "type": "object",
                        "description": "Sentry SSO configuration.",
                        "properties": {
                           "org_slug": {
                              "type": "string",
                              "description": "Generated slug for your Sentry organization. Found in your Sentry URL. e.g. `https://sentry.acme.com/acme-org/` would be `acme-org`."
                           },
                           "base_url": {
                              "type": "string",
                              "description": "URL prefix only if running Sentry Community Edition, otherwise leave should be blank."
                           }
                        }
                     },
                     "box": {
                        "type": "object",
                        "description": "Box SSO indicator (no configuration settings needed for Box SSO).",
                        "additionalProperties": {}
                     },
                     "cloudbees": {
                        "type": "object",
                        "description": "CloudBees SSO indicator (no configuration settings needed for CloudBees SSO).",
                        "additionalProperties": {}
                     },
                     "concur": {
                        "type": "object",
                        "description": "Concur SSO indicator (no configuration settings needed for Concur SSO).",
                        "additionalProperties": {}
                     },
                     "dropbox": {
                        "type": "object",
                        "description": "Dropbox SSO indicator (no configuration settings needed for Dropbox SSO).",
                        "additionalProperties": {}
                     },
                     "echosign": {
                        "type": "object",
                        "description": "Adobe EchoSign SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your EchoSign URL. e.g. `https://acme-org.echosign.com` would be `acme-org`."
                           }
                        }
                     },
                     "egnyte": {
                        "type": "object",
                        "description": "Egnyte SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your custom domain found in your Egnyte URL. e.g. `https://acme-org.egnyte.com` would be `acme-org`."
                           }
                        }
                     },
                     "firebase": {
                        "type": "object",
                        "description": "Google Firebase addon configuration.",
                        "properties": {
                           "secret": {
                              "type": "string",
                              "description": "Google Firebase Secret. (SDK 2 only)."
                           },
                           "private_key_id": {
                              "type": "string",
                              "description": "Optional ID of the private key to obtain kid header in the issued token (SDK v3+ tokens only)."
                           },
                           "private_key": {
                              "type": "string",
                              "description": "Private Key for signing the token (SDK v3+ tokens only)."
                           },
                           "client_email": {
                              "type": "string",
                              "description": "ID of the Service Account you have created (shown as `client_email` in the generated JSON file, SDK v3+ tokens only)."
                           },
                           "lifetime_in_seconds": {
                              "type": "integer",
                              "description": "Optional expiration in seconds for the generated token. Defaults to 3600 seconds (SDK v3+ tokens only)."
                           }
                        }
                     },
                     "newrelic": {
                        "type": "object",
                        "description": "New Relic SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Your New Relic Account ID found in your New Relic URL after the `/accounts/` path. e.g. `https://rpm.newrelic.com/accounts/123456/query` would be `123456`."
                           }
                        }
                     },
                     "office365": {
                        "type": "object",
                        "description": "Microsoft Office 365 SSO configuration.",
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Your Office 365 domain name. e.g. `acme-org.com`."
                           },
                           "connection": {
                              "type": "string",
                              "description": "Optional Auth0 database connection for testing an already-configured Office 365 tenant."
                           }
                        }
                     },
                     "salesforce": {
                        "type": "object",
                        "description": "Salesforce SSO configuration.",
                        "properties": {
                           "entity_id": {
                              "type": "string",
                              "description": "Arbitrary logical URL that identifies the Saleforce resource. e.g. `https://acme-org.com`."
                           }
                        }
                     },
                     "salesforce_api": {
                        "type": "object",
                        "description": "Salesforce API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "salesforce_sandbox_api": {
                        "type": "object",
                        "description": "Salesforce Sandbox addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "Consumer Key assigned by Salesforce to the Connected App."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a Salesforce username. e.g. `email`."
                           },
                           "communityName": {
                              "type": "string",
                              "description": "Community name."
                           },
                           "community_url_section": {
                              "type": "string",
                              "description": "Community url section."
                           }
                        }
                     },
                     "samlp": {
                        "type": "object",
                        "description": "SAML2 addon indicator (no configuration settings needed for SAML2 addon).",
                        "properties": {
                           "mappings": {
                              "type": "object",
                              "additionalProperties": {}
                           },
                           "audience": {
                              "type": "string"
                           },
                           "recipient": {
                              "type": "string"
                           },
                           "createUpnClaim": {
                              "type": "boolean"
                           },
                           "mapUnknownClaimsAsIs": {
                              "type": "boolean"
                           },
                           "passthroughClaimsWithNoMapping": {
                              "type": "boolean"
                           },
                           "mapIdentities": {
                              "type": "boolean"
                           },
                           "signatureAlgorithm": {
                              "type": "string"
                           },
                           "digestAlgorithm": {
                              "type": "string"
                           },
                           "issuer": {
                              "type": "string"
                           },
                           "destination": {
                              "type": "string"
                           },
                           "lifetimeInSeconds": {
                              "type": "integer"
                           },
                           "signResponse": {
                              "type": "boolean"
                           },
                           "nameIdentifierFormat": {
                              "type": "string"
                           },
                           "nameIdentifierProbes": {
                              "type": "array",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           },
                           "authnContextClassRef": {
                              "type": "string"
                           }
                        }
                     },
                     "layer": {
                        "type": "object",
                        "description": "Layer addon configuration.",
                        "required": [
                           "providerId",
                           "keyId",
                           "privateKey"
                        ],
                        "properties": {
                           "providerId": {
                              "type": "string",
                              "description": "Provider ID of your Layer account"
                           },
                           "keyId": {
                              "type": "string",
                              "description": "Authentication Key identifier used to sign the Layer token."
                           },
                           "privateKey": {
                              "type": "string",
                              "description": "Private key for signing the Layer token."
                           },
                           "principal": {
                              "type": "string",
                              "description": "Name of the property used as the unique user id in Layer. If not specified `user_id` is used."
                           },
                           "expiration": {
                              "type": "integer",
                              "description": "Optional expiration in minutes for the generated token. Defaults to 5 minutes."
                           }
                        }
                     },
                     "sap_api": {
                        "type": "object",
                        "description": "SAP API addon configuration.",
                        "properties": {
                           "clientid": {
                              "type": "string",
                              "description": "If activated in the OAuth 2.0 client configuration (transaction SOAUTH2) the SAML attribute client_id must be set and equal the client_id form parameter of the access token request."
                           },
                           "usernameAttribute": {
                              "type": "string",
                              "description": "Name of the property in the user object that maps to a SAP username. e.g. `email`."
                           },
                           "tokenEndpointUrl": {
                              "type": "string",
                              "description": "Your SAP OData server OAuth2 token endpoint URL."
                           },
                           "scope": {
                              "type": "string",
                              "description": "Requested scope for SAP APIs."
                           },
                           "servicePassword": {
                              "type": "string",
                              "description": "Service account password to use to authenticate API calls to the token endpoint."
                           },
                           "nameIdentifierFormat": {
                              "type": "string",
                              "description": "NameID element of the Subject which can be used to express the user's identity. Defaults to `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`."
                           }
                        }
                     },
                     "sharepoint": {
                        "type": "object",
                        "description": "SharePoint SSO configuration.",
                        "properties": {
                           "url": {
                              "type": "string",
                              "description": "Internal SharePoint application URL."
                           },
                           "external_url": {
                              "description": "External SharePoint application URLs if exposed to the Internet.",
                              "oneOf": [
                                 {
                                    "type": "array",
                                    "items": {
                                       "type": "string"
                                    }
                                 },
                                 {
                                    "type": "string"
                                 }
                              ]
                           }
                        }
                     },
                     "springcm": {
                        "type": "object",
                        "description": "SpringCM SSO configuration.",
                        "properties": {
                           "acsurl": {
                              "type": "string",
                              "description": "SpringCM ACS URL, e.g. `https://na11.springcm.com/atlas/sso/SSOEndpoint.ashx`."
                           }
                        }
                     },
                     "wams": {
                        "type": "object",
                        "description": "Windows Azure Mobile Services addon configuration.",
                        "properties": {
                           "masterkey": {
                              "type": "string",
                              "description": "Your master key for Windows Azure Mobile Services."
                           }
                        }
                     },
                     "wsfed": {
                        "type": "object",
                        "description": "WS-Fed (WIF) addon indicator. Actual configuration is stored in `callback` and `client_aliases` properties on the client.",
                        "additionalProperties": {}
                     },
                     "zendesk": {
                        "type": "object",
                        "description": "Zendesk SSO configuration.",
                        "properties": {
                           "accountName": {
                              "type": "string",
                              "description": "Zendesk account name usually first segment in your Zendesk URL. e.g. `https://acme-org.zendesk.com` would be `acme-org`."
                           }
                        }
                     },
                     "zoom": {
                        "type": "object",
                        "description": "Zoom SSO configuration.",
                        "properties": {
                           "account": {
                              "type": "string",
                              "description": "Zoom account name usually first segment of your Zoom URL, e.g. `https://acme-org.zoom.us` would be `acme-org`."
                           }
                        }
                     },
                     "sso_integration": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "SSO integration name"
                           },
                           "version": {
                              "type": "string",
                              "description": "SSO integration version installed"
                           }
                        }
                     }
                  }
               },
               "client_metadata": {
                  "type": "object",
                  "description": "Metadata associated with the client, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.  Field names (max 255 chars) are alphanumeric and may only include the following special characters:  :,-+=_*?\"\/\\()><@[Tab] [Space]",
                  "additionalProperties": {}
               },
               "mobile": {
                  "type": "object",
                  "nullable": true,
                  "description": "Configuration related to native mobile apps",
                  "properties": {
                     "android": {
                        "type": "object",
                        "nullable": true,
                        "description": "Configuration related to Android native apps",
                        "properties": {
                           "app_package_name": {
                              "type": "string",
                              "description": "Application package name found in <code>AndroidManifest.xml<\/code>",
                              "default": "",
                              "minLength": 1
                           },
                           "sha256_cert_fingerprints": {
                              "type": "array",
                              "description": "The SHA256 fingerprints of your app's signing certificate. Multiple fingerprints can be used to support different versions of your app, such as debug and production builds",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     },
                     "ios": {
                        "type": "object",
                        "nullable": true,
                        "description": "Configuration related to iOS native apps",
                        "properties": {
                           "team_id": {
                              "type": "string",
                              "description": "Identifier assigned to the account that signs and upload the app to the store",
                              "default": "",
                              "minLength": 1
                           },
                           "app_bundle_identifier": {
                              "type": "string",
                              "description": "Assigned by the developer to the app as its unique identifier inside the store, usually is a reverse domain plus the app name: <code>com.you.MyApp<\/code>",
                              "default": "",
                              "minLength": 1
                           }
                        }
                     }
                  }
               },
               "initiate_login_uri": {
                  "type": "string",
                  "description": "Initiate login uri, must be https"
               },
               "native_social_login": {
                  "type": "object",
                  "nullable": true,
                  "description": "Configure native social settings",
                  "properties": {
                     "apple": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Apple connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using an Apple authorization code",
                              "default": false
                           }
                        }
                     },
                     "facebook": {
                        "type": "object",
                        "nullable": true,
                        "description": "Native Social Login support for the Facebook connection",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Determine whether or not to allow signing in natively using Facebook",
                              "default": false
                           }
                        }
                     }
                  }
               },
               "refresh_token": {
                  "type": "object",
                  "nullable": true,
                  "description": "Refresh token configuration",
                  "required": [
                     "rotation_type",
                     "expiration_type"
                  ],
                  "properties": {
                     "rotation_type": {
                        "type": "string",
                        "description": "Refresh token rotation types, one of: rotating, non-rotating",
                        "default": "non-rotating",
                        "enum": [
                           "rotating",
                           "non-rotating"
                        ]
                     },
                     "expiration_type": {
                        "type": "string",
                        "description": "Refresh token expiration types, one of: expiring, non-expiring",
                        "default": "non-expiring",
                        "enum": [
                           "expiring",
                           "non-expiring"
                        ]
                     },
                     "leeway": {
                        "type": "integer",
                        "description": "Period in seconds where the previous refresh token can be exchanged without triggering breach detection",
                        "default": 0
                     },
                     "token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid"
                     },
                     "infinite_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from having a set lifetime when `true` (takes precedence over `token_lifetime` values)"
                     },
                     "idle_token_lifetime": {
                        "type": "integer",
                        "description": "Period (in seconds) for which refresh tokens will remain valid without use"
                     },
                     "infinite_idle_token_lifetime": {
                        "type": "boolean",
                        "description": "Prevents tokens from expiring without use when `true` (takes precedence over `idle_token_lifetime` values)",
                        "default": false
                     }
                  }
               },
               "organization_usage": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`.",
                  "default": "deny",
                  "enum": [
                     "deny",
                     "allow",
                     "require"
                  ]
               },
               "organization_require_behavior": {
                  "type": "string",
                  "description": "Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default) or `pre_login_prompt`.",
                  "default": "no_prompt",
                  "enum": [
                     "no_prompt",
                     "pre_login_prompt"
                  ]
               }
            }
         },
         "connection": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "The name of the connection",
                  "default": "My connection"
               },
               "display_name": {
                  "type": "string",
                  "description": "Connection name used in login screen"
               },
               "options": {
                  "type": "object",
                  "additionalProperties": {}
               },
               "id": {
                  "type": "string",
                  "description": "The connection's identifier",
                  "default": "con_0000000000000001"
               },
               "strategy": {
                  "type": "string",
                  "description": "The type of the connection, related to the identity provider",
                  "default": "auth0"
               },
               "realms": {
                  "type": "array",
                  "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",
                  "items": {
                     "type": "string",
                     "description": "The realm where this connection belongs"
                  }
               },
               "is_domain_connection": {
                  "type": "boolean",
                  "description": "True if the connection is domain level"
               },
               "metadata": {
                  "type": "object",
                  "description": "Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                  "additionalProperties": {}
               }
            }
         },
         "connectionCreate": {
            "type": "object",
            "required": [
               "name",
               "strategy"
            ],
            "properties": {
               "name": {
                  "type": "string",
                  "description": "The name of the connection. Must start and end with an alphanumeric character and can only contain alphanumeric characters and '-'. Max length 128",
                  "maxLength": 128
               },
               "display_name": {
                  "type": "string",
                  "description": "Connection name used in the new universal login experience",
                  "maxLength": 128
               },
               "strategy": {
                  "type": "string",
                  "description": "The identity provider identifier for the connection",
                  "enum": [
                     "ad",
                     "adfs",
                     "amazon",
                     "apple",
                     "dropbox",
                     "bitbucket",
                     "aol",
                     "auth0-oidc",
                     "auth0",
                     "baidu",
                     "bitly",
                     "box",
                     "custom",
                     "daccount",
                     "dwolla",
                     "email",
                     "evernote-sandbox",
                     "evernote",
                     "exact",
                     "facebook",
                     "fitbit",
                     "flickr",
                     "github",
                     "google-apps",
                     "google-oauth2",
                     "instagram",
                     "ip",
                     "linkedin",
                     "miicard",
                     "oauth1",
                     "oauth2",
                     "office365",
                     "oidc",
                     "paypal",
                     "paypal-sandbox",
                     "pingfederate",
                     "planningcenter",
                     "renren",
                     "salesforce-community",
                     "salesforce-sandbox",
                     "salesforce",
                     "samlp",
                     "sharepoint",
                     "shopify",
                     "sms",
                     "soundcloud",
                     "thecity-sandbox",
                     "thecity",
                     "thirtysevensignals",
                     "twitter",
                     "untappd",
                     "vkontakte",
                     "waad",
                     "weibo",
                     "windowslive",
                     "wordpress",
                     "yahoo",
                     "yammer",
                     "yandex",
                     "line"
                  ]
               },
               "options": {
                  "type": "object",
                  "description": "The connection's options (depend on the connection strategy)",
                  "additionalProperties": {},
                  "properties": {
                     "validation": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for validation",
                        "properties": {
                           "username": {
                              "type": "object",
                              "nullable": true,
                              "required": [
                                 "max",
                                 "min"
                              ],
                              "properties": {
                                 "min": {
                                    "type": "integer"
                                 },
                                 "max": {
                                    "type": "integer"
                                 }
                              }
                           }
                        }
                     },
                     "non_persistent_attrs": {
                        "type": "array",
                        "description": "An array of user fields that should not be stored in the Auth0 database (https://manage.local.dev.auth0.com/docs/security/data-security/denylist)",
                        "items": {
                           "type": "string"
                        }
                     },
                     "enabledDatabaseCustomization": {
                        "type": "boolean",
                        "description": "Set to true to use a legacy user store"
                     },
                     "import_mode": {
                        "type": "boolean",
                        "description": "Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"
                     },
                     "customScripts": {
                        "type": "object",
                        "description": "A map of scripts used to integrate with a custom database.",
                        "properties": {
                           "login": {
                              "type": "string",
                              "minLength": 1
                           },
                           "get_user": {
                              "type": "string",
                              "minLength": 1
                           },
                           "delete": {
                              "type": "string",
                              "minLength": 1
                           },
                           "change_password": {
                              "type": "string",
                              "minLength": 1
                           },
                           "verify": {
                              "type": "string",
                              "minLength": 1
                           },
                           "create": {
                              "type": "string",
                              "minLength": 1
                           }
                        }
                     },
                     "passwordPolicy": {
                        "type": "string",
                        "description": "Password strength level",
                        "nullable": true,
                        "enum": [
                           "none",
                           "low",
                           "fair",
                           "good",
                           "excellent",
                           null
                        ]
                     },
                     "password_complexity_options": {
                        "type": "object",
                        "nullable": true,
                        "description": "Password complexity options",
                        "properties": {
                           "min_length": {
                              "type": "integer",
                              "description": "Minimum password length"
                           }
                        }
                     },
                     "password_history": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password history policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           },
                           "size": {
                              "type": "integer"
                           }
                        }
                     },
                     "password_no_personal_info": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password expiration policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           }
                        }
                     },
                     "password_dictionary": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password dictionary policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           },
                           "dictionary": {
                              "type": "array",
                              "description": "Custom Password Dictionary. An array of up to 200 entries.",
                              "items": {
                                 "type": "string",
                                 "description": "Custom Password Dictionary entry. 50 characters max.",
                                 "maxLength": 50
                              }
                           }
                        }
                     },
                     "api_enable_users": {
                        "type": "boolean"
                     },
                     "basic_profile": {
                        "type": "boolean"
                     },
                     "ext_admin": {
                        "type": "boolean"
                     },
                     "ext_is_suspended": {
                        "type": "boolean"
                     },
                     "ext_agreed_terms": {
                        "type": "boolean"
                     },
                     "ext_groups": {
                        "type": "boolean"
                     },
                     "ext_assigned_plans": {
                        "type": "boolean"
                     },
                     "ext_profile": {
                        "type": "boolean"
                     },
                     "upstream_params": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for adding parameters in the request to the upstream IdP",
                        "additionalProperties": {}
                     },
                     "set_user_root_attributes": {
                        "type": "string",
                        "description": "Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on_each_login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter)",
                        "default": "on_each_login",
                        "enum": [
                           "on_each_login",
                           "on_first_login"
                        ]
                     },
                     "gateway_authentication": {
                        "type": "object",
                        "nullable": true,
                        "description": "Token-based authentication settings to be applied when connection is using an sms strategy.",
                        "additionalProperties": {},
                        "required": [
                           "method",
                           "audience",
                           "secret"
                        ],
                        "properties": {
                           "method": {
                              "type": "string",
                              "description": "The Authorization header type."
                           },
                           "subject": {
                              "type": "string",
                              "description": "The subject to be added to the JWT payload."
                           },
                           "audience": {
                              "type": "string",
                              "description": "The audience to be added to the JWT payload."
                           },
                           "secret": {
                              "type": "string",
                              "description": "The secret to be used for signing tokens."
                           },
                           "secret_base64_encoded": {
                              "type": "boolean",
                              "description": "Set to true if the provided secret is base64 encoded."
                           }
                        }
                     }
                  }
               },
               "enabled_clients": {
                  "type": "array",
                  "description": "The identifiers of the clients for which the connection is to be enabled. If the array is empty or the property is not specified, no clients are enabled",
                  "items": {
                     "type": "string",
                     "description": "The id of the client to for which the connection is to be enabled. "
                  }
               },
               "is_domain_connection": {
                  "type": "boolean"
               },
               "realms": {
                  "type": "array",
                  "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",
                  "items": {
                     "type": "string",
                     "description": "The realm where this connection belongs"
                  }
               },
               "metadata": {
                  "type": "object",
                  "description": "Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                  "additionalProperties": {}
               }
            }
         },
         "connectionUpdate": {
            "type": "object",
            "properties": {
               "display_name": {
                  "type": "string",
                  "description": "Connection name used in the new universal login experience",
                  "maxLength": 128
               },
               "options": {
                  "type": "object",
                  "nullable": true,
                  "description": "The connection's options (depend on the connection strategy)",
                  "additionalProperties": {},
                  "properties": {
                     "validation": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for validation",
                        "properties": {
                           "username": {
                              "type": "object",
                              "nullable": true,
                              "required": [
                                 "max",
                                 "min"
                              ],
                              "properties": {
                                 "min": {
                                    "type": "integer"
                                 },
                                 "max": {
                                    "type": "integer"
                                 }
                              }
                           }
                        }
                     },
                     "non_persistent_attrs": {
                        "type": "array",
                        "description": "An array of user fields that should not be stored in the Auth0 database (https://manage.local.dev.auth0.com/docs/security/data-security/denylist)",
                        "items": {
                           "type": "string"
                        }
                     },
                     "enabledDatabaseCustomization": {
                        "type": "boolean",
                        "description": "Set to true to use a legacy user store"
                     },
                     "import_mode": {
                        "type": "boolean",
                        "description": "Enable this if you have a legacy user store and you want to gradually migrate those users to the Auth0 user store"
                     },
                     "customScripts": {
                        "type": "object",
                        "description": "A map of scripts used to integrate with a custom database.",
                        "properties": {
                           "login": {
                              "type": "string",
                              "minLength": 1
                           },
                           "get_user": {
                              "type": "string",
                              "minLength": 1
                           },
                           "delete": {
                              "type": "string",
                              "minLength": 1
                           },
                           "change_password": {
                              "type": "string",
                              "minLength": 1
                           },
                           "verify": {
                              "type": "string",
                              "minLength": 1
                           },
                           "create": {
                              "type": "string",
                              "minLength": 1
                           }
                        }
                     },
                     "passwordPolicy": {
                        "type": "string",
                        "description": "Password strength level",
                        "nullable": true,
                        "enum": [
                           "none",
                           "low",
                           "fair",
                           "good",
                           "excellent",
                           null
                        ]
                     },
                     "password_complexity_options": {
                        "type": "object",
                        "nullable": true,
                        "description": "Password complexity options",
                        "properties": {
                           "min_length": {
                              "type": "integer",
                              "description": "Minimum password length"
                           }
                        }
                     },
                     "password_history": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password history policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           },
                           "size": {
                              "type": "integer"
                           }
                        }
                     },
                     "password_no_personal_info": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password expiration policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           }
                        }
                     },
                     "password_dictionary": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for password dictionary policy",
                        "required": [
                           "enable"
                        ],
                        "properties": {
                           "enable": {
                              "type": "boolean"
                           },
                           "dictionary": {
                              "type": "array",
                              "description": "Custom Password Dictionary. An array of up to 200 entries.",
                              "items": {
                                 "type": "string",
                                 "description": "Custom Password Dictionary entry. 50 characters max.",
                                 "maxLength": 50
                              }
                           }
                        }
                     },
                     "api_enable_users": {
                        "type": "boolean"
                     },
                     "basic_profile": {
                        "type": "boolean"
                     },
                     "ext_admin": {
                        "type": "boolean"
                     },
                     "ext_is_suspended": {
                        "type": "boolean"
                     },
                     "ext_agreed_terms": {
                        "type": "boolean"
                     },
                     "ext_groups": {
                        "type": "boolean"
                     },
                     "ext_assigned_plans": {
                        "type": "boolean"
                     },
                     "ext_profile": {
                        "type": "boolean"
                     },
                     "upstream_params": {
                        "type": "object",
                        "nullable": true,
                        "description": "Options for adding parameters in the request to the upstream IdP",
                        "additionalProperties": {}
                     },
                     "set_user_root_attributes": {
                        "type": "string",
                        "description": "Determines whether the 'name', 'given_name', 'family_name', 'nickname', and 'picture' attributes can be independently updated when using an external IdP. Possible values are 'on_each_login' (default value, it configures the connection to automatically update the root attributes from the external IdP with each user login. When this setting is used, root attributes cannot be independently updated), 'on_first_login' (configures the connection to only set the root attributes on first login, allowing them to be independently updated thereafter)",
                        "default": "on_each_login",
                        "enum": [
                           "on_each_login",
                           "on_first_login"
                        ]
                     },
                     "gateway_authentication": {
                        "type": "object",
                        "nullable": true,
                        "description": "Token-based authentication settings to be applied when connection is using an sms strategy.",
                        "additionalProperties": {},
                        "required": [
                           "method",
                           "audience",
                           "secret"
                        ],
                        "properties": {
                           "method": {
                              "type": "string",
                              "description": "The Authorization header type."
                           },
                           "subject": {
                              "type": "string",
                              "description": "The subject to be added to the JWT payload."
                           },
                           "audience": {
                              "type": "string",
                              "description": "The audience to be added to the JWT payload."
                           },
                           "secret": {
                              "type": "string",
                              "description": "The secret to be used for signing tokens."
                           },
                           "secret_base64_encoded": {
                              "type": "boolean",
                              "description": "Set to true if the provided secret is base64 encoded."
                           }
                        }
                     }
                  }
               },
               "enabled_clients": {
                  "type": "array",
                  "description": "The identifiers of the clients for which the connection is to be enabled. If the property is not specified, no clients are enabled. If the array is empty, the connection will be disabled for every client.",
                  "items": {
                     "type": "string",
                     "description": "The client_id of the client to for which the connection is to be enabled"
                  }
               },
               "is_domain_connection": {
                  "type": "boolean"
               },
               "realms": {
                  "type": "array",
                  "description": "Defines the realms for which the connection will be used (ie: email domains). If the array is empty or the property is not specified, the connection name will be added as realm",
                  "items": {
                     "type": "string",
                     "description": "The realm where this connection belongs"
                  }
               },
               "metadata": {
                  "type": "object",
                  "description": "Metadata associated with the connection, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                  "additionalProperties": {}
               }
            }
         },
         "customDomain": {
            "type": "object",
            "required": [
               "custom_domain_id",
               "domain",
               "primary",
               "status",
               "type"
            ],
            "properties": {
               "custom_domain_id": {
                  "type": "string",
                  "description": "ID of the custom domain.",
                  "default": "cd_0000000000000001"
               },
               "domain": {
                  "type": "string",
                  "description": "Domain name.",
                  "default": "login.mycompany.com"
               },
               "primary": {
                  "type": "boolean",
                  "description": "Whether this is a primary domain (true) or not (false).",
                  "default": false
               },
               "status": {
                  "type": "string",
                  "description": "Custom domain configuration status. Can be `disabled`, `pending`, `pending_verification`, or `ready`.",
                  "default": "ready",
                  "enum": [
                     "disabled",
                     "pending",
                     "pending_verification",
                     "ready"
                  ]
               },
               "type": {
                  "type": "string",
                  "description": "Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.",
                  "default": "self_managed_certs",
                  "enum": [
                     "auth0_managed_certs",
                     "self_managed_certs"
                  ]
               },
               "origin_domain_name": {
                  "type": "string",
                  "description": "Intermediate address.",
                  "default": "mycompany_cd_0000000000000001.edge.tenants.auth0.com"
               },
               "verification": {
                  "type": "object",
                  "description": "Domain verification settings.",
                  "properties": {
                     "methods": {
                        "type": "array",
                        "description": "Domain verification methods.",
                        "items": {
                           "type": "object",
                           "required": [
                              "name",
                              "record"
                           ],
                           "properties": {
                              "name": {
                                 "type": "string",
                                 "description": "Domain verification method.",
                                 "default": "txt",
                                 "enum": [
                                    "cname",
                                    "txt"
                                 ]
                              },
                              "record": {
                                 "type": "string",
                                 "description": "Value used to verify the domain.",
                                 "default": "auth0-domain-verification=..."
                              },
                              "domain": {
                                 "type": "string",
                                 "description": "The name of the txt record for verification",
                                 "default": "_cf-custom-hostname.login.mycompany.com"
                              }
                           }
                        }
                     }
                  }
               },
               "custom_client_ip_header": {
                  "type": "string",
                  "description": "The HTTP header to fetch the client's IP address",
                  "nullable": true
               },
               "tls_policy": {
                  "type": "string",
                  "description": "The TLS version policy",
                  "default": "recommended"
               }
            }
         },
         "deviceCredential": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID of this device.",
                  "default": "dcr_0000000000000001"
               },
               "device_name": {
                  "type": "string",
                  "description": "User agent for this device",
                  "default": "iPhone Mobile Safari UI/WKWebView"
               },
               "device_id": {
                  "type": "string",
                  "description": "Unique identifier for the device. NOTE: This field is generally not populated for refresh_tokens and rotating_refresh_tokens",
                  "default": "550e8400-e29b-41d4-a716-446655440000"
               },
               "type": {
                  "type": "string",
                  "description": "Type of credential. Can be `public_key`, `refresh_token`, or `rotating_refresh_token`.",
                  "default": "public_key",
                  "enum": [
                     "public_key",
                     "refresh_token",
                     "rotating_refresh_token"
                  ]
               },
               "user_id": {
                  "type": "string",
                  "description": "user_id this credential is associated with.",
                  "default": "usr_5457edea1b8f33391a000004"
               },
               "client_id": {
                  "type": "string",
                  "description": "client_id of the client (application) this credential is for.",
                  "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
               }
            }
         },
         "deviceCredentialCreate": {
            "type": "object",
            "required": [
               "device_name",
               "type",
               "value",
               "device_id"
            ],
            "properties": {
               "device_name": {
                  "type": "string",
                  "description": "Name for this device easily recognized by owner.",
                  "minLength": 1
               },
               "type": {
                  "type": "string",
                  "description": "Type of credential. Must be `public_key`.",
                  "enum": [
                     "public_key"
                  ]
               },
               "value": {
                  "type": "string",
                  "description": "Base64 encoded string containing the credential.",
                  "minLength": 1
               },
               "device_id": {
                  "type": "string",
                  "description": "Unique identifier for the device. Recommend using <a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\">Android_ID</a> on Android and <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor\">identifierForVendor</a>.",
                  "maxLength": 36
               },
               "client_id": {
                  "type": "string",
                  "description": "client_id of the client (application) this credential is for."
               }
            }
         },
         "emailTemplateUpdate": {
            "type": "object",
            "required": [
               "template",
               "body",
               "from",
               "subject",
               "syntax",
               "enabled"
            ],
            "properties": {
               "template": {
                  "type": "string",
                  "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                  "default": "verify_email",
                  "enum": [
                     "verify_email",
                     "verify_email_by_code",
                     "reset_email",
                     "welcome_email",
                     "blocked_account",
                     "stolen_credentials",
                     "enrollment_email",
                     "mfa_oob_code",
                     "user_invitation",
                     "change_password",
                     "password_reset"
                  ]
               },
               "body": {
                  "type": "string",
                  "description": "Body of the email template.",
                  "nullable": true
               },
               "from": {
                  "type": "string",
                  "description": "Senders `from` email address.",
                  "default": "sender@auth0.com",
                  "nullable": true
               },
               "resultUrl": {
                  "type": "string",
                  "description": "URL to redirect the user to after a successful action.",
                  "nullable": true
               },
               "subject": {
                  "type": "string",
                  "description": "Subject line of the email.",
                  "nullable": true
               },
               "syntax": {
                  "type": "string",
                  "description": "Syntax of the template body.",
                  "default": "liquid",
                  "nullable": true
               },
               "urlLifetimeInSeconds": {
                  "type": "number",
                  "description": "Lifetime in seconds that the link within the email will be valid for.",
                  "nullable": true
               },
               "includeEmailInRedirect": {
                  "type": "boolean",
                  "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether the template is enabled (true) or disabled (false).",
                  "nullable": true
               }
            }
         },
         "emailProvider": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, or `smtp`.",
                  "default": "sendgrid"
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether the provider is enabled (true) or disabled (false).",
                  "default": true
               },
               "default_from_address": {
                  "type": "string",
                  "description": "Email address to use as \"from\" when no other address specified."
               },
               "credentials": {
                  "type": "object",
                  "description": "Credentials required to use the provider.",
                  "properties": {
                     "api_user": {
                        "type": "string",
                        "description": "API User."
                     },
                     "region": {
                        "type": "string",
                        "description": "AWS or SparkPost region."
                     },
                     "smtp_host": {
                        "type": "string",
                        "description": "SMTP host."
                     },
                     "smtp_port": {
                        "type": "integer",
                        "description": "SMTP port."
                     },
                     "smtp_user": {
                        "type": "string",
                        "description": "SMTP username."
                     }
                  }
               },
               "settings": {
                  "type": "object",
                  "description": "Specific provider setting",
                  "additionalProperties": {}
               }
            }
         },
         "userGrant": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID of the grant."
               },
               "clientID": {
                  "type": "string",
                  "description": "ID of the client."
               },
               "user_id": {
                  "type": "string",
                  "description": "ID of the user."
               },
               "audience": {
                  "type": "string",
                  "description": "Audience of the grant."
               },
               "scope": {
                  "type": "array",
                  "description": "Scopes included in this grant.",
                  "items": {
                     "type": "string",
                     "minLength": 1
                  }
               }
            }
         },
         "enrollmentCreate": {
            "type": "object",
            "required": [
               "user_id"
            ],
            "properties": {
               "user_id": {
                  "type": "string",
                  "description": "user_id for the enrollment ticket"
               },
               "email": {
                  "type": "string",
                  "description": "alternate email to which the enrollment email will be sent. Optional - by default, the email will be sent to the user's default address"
               },
               "send_mail": {
                  "type": "boolean",
                  "description": "Send an email to the user to start the enrollment"
               }
            }
         },
         "enrollment": {
            "type": "object",
            "required": [
               "id"
            ],
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID for this enrollment.",
                  "default": "dev_0000000000000001"
               },
               "status": {
                  "type": "string",
                  "description": "Status of this enrollment. Can be `pending` or `confirmed`.",
                  "default": "pending",
                  "enum": [
                     "pending",
                     "confirmed"
                  ]
               },
               "name": {
                  "type": "string",
                  "description": "Device name (only for push notification).",
                  "default": "iPhone 7",
                  "minLength": 1,
                  "maxLength": 20
               },
               "identifier": {
                  "type": "string",
                  "description": "Device identifier. This is usually the phone identifier.",
                  "default": "76dc-a90c-a88c-a90c-a88c-a88c-a90c"
               },
               "phone_number": {
                  "type": "string",
                  "description": "Phone number.",
                  "default": "+1 999999999999"
               },
               "enrolled_at": {
                  "oneOf": [
                     {
                        "type": "string",
                        "description": "Enrollment date and time.",
                        "default": "2016-07-12T17:56:26.804Z"
                     }
                  ]
               },
               "last_auth": {
                  "oneOf": [
                     {
                        "type": "string",
                        "description": "Last authentication date and time.",
                        "default": "2016-07-12T17:56:26.804Z"
                     }
                  ]
               }
            }
         },
         "factor": {
            "type": "object",
            "required": [
               "enabled"
            ],
            "properties": {
               "enabled": {
                  "type": "boolean",
                  "description": "Whether this factor is enabled (true) or disabled (false).",
                  "default": true
               },
               "trial_expired": {
                  "type": "boolean",
                  "description": "Whether trial limits have been exceeded.",
                  "default": true
               },
               "name": {
                  "type": "string",
                  "description": "Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.",
                  "default": "sms",
                  "minLength": 1,
                  "enum": [
                     "push-notification",
                     "sms",
                     "email",
                     "duo",
                     "otp",
                     "webauthn-roaming",
                     "webauthn-platform",
                     "recovery-code"
                  ]
               }
            }
         },
         "twilioFactorProvider": {
            "type": "object",
            "properties": {
               "from": {
                  "type": "string",
                  "description": "From number",
                  "default": "+1223323",
                  "minLength": 0,
                  "maxLength": 64,
                  "nullable": true
               },
               "messaging_service_sid": {
                  "type": "string",
                  "description": "Copilot SID",
                  "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "auth_token": {
                  "type": "string",
                  "description": "Twilio Authentication token",
                  "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "sid": {
                  "type": "string",
                  "description": "Twilio SID",
                  "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               }
            }
         },
         "templateMessages": {
            "type": "object",
            "required": [
               "enrollment_message",
               "verification_message"
            ],
            "properties": {
               "enrollment_message": {
                  "type": "string",
                  "description": "Message sent to the user when they are invited to enroll with a phone number.",
                  "default": "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment."
               },
               "verification_message": {
                  "type": "string",
                  "description": "Message sent to the user when they are prompted to verify their account.",
                  "default": "{{code}} is your verification code for {{tenant.friendly_name}}"
               }
            }
         },
         "snsFactorProvider": {
            "type": "object",
            "properties": {
               "aws_access_key_id": {
                  "type": "string",
                  "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "aws_secret_access_key": {
                  "type": "string",
                  "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "aws_region": {
                  "type": "string",
                  "default": "us-west-1",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "sns_apns_platform_application_arn": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               },
               "sns_gcm_platform_application_arn": {
                  "type": "string",
                  "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                  "minLength": 1,
                  "maxLength": 1000,
                  "nullable": true
               }
            }
         },
         "hook": {
            "type": "object",
            "properties": {
               "triggerId": {
                  "type": "string",
                  "description": "Trigger ID"
               },
               "id": {
                  "type": "string",
                  "description": "ID of this hook.",
                  "default": "00001"
               },
               "name": {
                  "type": "string",
                  "description": "Name of this hook.",
                  "default": "hook"
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether this hook will be executed (true) or ignored (false).",
                  "default": true
               },
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this hook runs.",
                  "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };"
               },
               "dependencies": {
                  "type": "object",
                  "description": "Dependencies of this hook used by webtask server.",
                  "additionalProperties": {}
               }
            }
         },
         "hookCreate": {
            "type": "object",
            "required": [
               "name",
               "script",
               "triggerId"
            ],
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this hook.",
                  "default": "my-hook"
               },
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this hook runs.",
                  "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                  "minLength": 1
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether this hook will be executed (true) or ignored (false).",
                  "default": false
               },
               "dependencies": {
                  "type": "object",
                  "description": "Dependencies of this hook used by webtask server.",
                  "additionalProperties": {}
               },
               "triggerId": {
                  "type": "string",
                  "description": "Execution stage of this rule. Can be `credentials-exchange`, `pre-user-registration`, `post-user-registration`, `post-change-password`, or `send-phone-message`.",
                  "default": "credentials-exchange",
                  "enum": [
                     "credentials-exchange",
                     "pre-user-registration",
                     "post-user-registration",
                     "post-change-password",
                     "send-phone-message"
                  ]
               }
            }
         },
         "hookUpdate": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this hook.",
                  "default": "my-hook"
               },
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this hook runs.",
                  "default": "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                  "minLength": 1
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether this hook will be executed (true) or ignored (false).",
                  "default": false
               },
               "dependencies": {
                  "type": "object",
                  "description": "Dependencies of this hook used by webtask server.",
                  "additionalProperties": {}
               }
            }
         },
         "job": {
            "type": "object",
            "required": [
               "id",
               "type",
               "status",
               "connection"
            ],
            "properties": {
               "status": {
                  "type": "string",
                  "description": "Status of this job.",
                  "default": "pending"
               },
               "type": {
                  "type": "string",
                  "description": "Type of job this is.",
                  "default": "users_export"
               },
               "created_at": {
                  "type": "string",
                  "description": "When this job was created."
               },
               "id": {
                  "type": "string",
                  "description": "ID of this job.",
                  "default": "job_0000000000000001"
               },
               "connection_id": {
                  "type": "string",
                  "description": "connection_id of the connection from which users will be exported.",
                  "default": "con_0000000000000001"
               },
               "format": {
                  "type": "string",
                  "description": "Format of the file. Must be `json` or `csv`.",
                  "default": "csv",
                  "enum": [
                     "json",
                     "csv"
                  ]
               },
               "limit": {
                  "type": "integer",
                  "description": "Limit the number of records.",
                  "default": 5
               },
               "fields": {
                  "type": "array",
                  "description": "List of fields to be included in the CSV. Defaults to a predefined set of fields.",
                  "items": {
                     "type": "object",
                     "required": [
                        "name"
                     ],
                     "properties": {
                        "name": {
                           "type": "string",
                           "description": "Name of the field in the profile.",
                           "maxLength": 100
                        },
                        "export_as": {
                           "type": "string",
                           "description": "Title of the column in the exported CSV.",
                           "maxLength": 100
                        }
                     }
                  }
               }
            }
         },
         "log": {
            "type": "object",
            "additionalProperties": {},
            "properties": {
               "date": {
                  "oneOf": [
                     {
                        "type": "string",
                        "description": "Date when the event occurred in ISO 8601 format.",
                        "default": "2016-02-23T19:57:29.532Z"
                     },
                     {
                        "type": "object",
                        "description": "Date when the event occurred in ISO 8601 format.",
                        "additionalProperties": {}
                     }
                  ]
               },
               "type": {
                  "type": "string",
                  "description": "Type of event.",
                  "default": "sapi"
               },
               "description": {
                  "type": "string",
                  "description": "Description of this event.",
                  "nullable": true
               },
               "connection": {
                  "type": "string",
                  "description": "Name of the connection the event relates to."
               },
               "connection_id": {
                  "type": "string",
                  "description": "ID of the connection the event relates to."
               },
               "client_id": {
                  "type": "string",
                  "description": "ID of the client (application).",
                  "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
               },
               "client_name": {
                  "type": "string",
                  "description": "Name of the client (application).",
                  "default": "My application Name"
               },
               "ip": {
                  "type": "string",
                  "description": "IP address of the log event source.",
                  "default": "190.257.209.19"
               },
               "hostname": {
                  "type": "string",
                  "description": "Hostname the event applies to.",
                  "default": "190.257.209.19"
               },
               "user_id": {
                  "type": "string",
                  "description": "ID of the user involved in the event.",
                  "default": "auth0|56c75c4e42b6359e98374bc2"
               },
               "user_name": {
                  "type": "string",
                  "description": "Name of the user involved in the event."
               },
               "audience": {
                  "type": "string",
                  "description": "API audience the event applies to."
               },
               "scope": {
                  "type": "string",
                  "description": "Scope permissions applied to the event.",
                  "default": ""
               },
               "strategy": {
                  "type": "string",
                  "description": "Name of the strategy involved in the event."
               },
               "strategy_type": {
                  "type": "string",
                  "description": "Type of strategy involved in the event."
               },
               "log_id": {
                  "type": "string",
                  "description": "Unique ID of the event."
               },
               "isMobile": {
                  "type": "boolean",
                  "description": "Whether the client was a mobile device (true) or desktop/laptop/server (false)."
               },
               "details": {
                  "type": "object",
                  "description": "Additional useful details about this event (structure is dependent upon event type).",
                  "additionalProperties": {}
               },
               "user_agent": {
                  "type": "string",
                  "description": "User agent string from the client device that caused the event."
               },
               "location_info": {
                  "type": "object",
                  "description": "Information about the location that triggered this event based on the `ip`.",
                  "properties": {
                     "country_code": {
                        "type": "string",
                        "description": "Two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html\">Alpha-2 ISO 3166-1</a> country code.",
                        "minLength": 2,
                        "maxLength": 2
                     },
                     "country_code3": {
                        "type": "string",
                        "description": "Three-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html\">Alpha-3 ISO 3166-1</a> country code.",
                        "minLength": 3,
                        "maxLength": 3
                     },
                     "country_name": {
                        "type": "string",
                        "description": "Full country name in English."
                     },
                     "city_name": {
                        "type": "string",
                        "description": "Full city name in English."
                     },
                     "latitude": {
                        "type": "string",
                        "description": "Global latitude (horizontal) position."
                     },
                     "longitude": {
                        "type": "string",
                        "description": "Global longitude (vertical) position."
                     },
                     "time_zone": {
                        "type": "string",
                        "description": "Time zone name as found in the <a href=\"https://www.iana.org/time-zones\">tz database</a>."
                     },
                     "continent_code": {
                        "type": "string",
                        "description": "Continent the country is located within. Can be `AF` (Africa), `AN` (Antarctica), `AS` (Asia), `EU` (Europe), `NA` (North America), `OC` (Oceania) or `SA` (South America)."
                     }
                  }
               }
            }
         },
         "promptsSettings": {
            "type": "object",
            "properties": {
               "universal_login_experience": {
                  "type": "string",
                  "description": "Which login experience to use. Can be `new` or `classic`.",
                  "enum": [
                     "new",
                     "classic"
                  ]
               },
               "identifier_first": {
                  "type": "boolean",
                  "description": "Whether identifier first is enabled or not"
               },
               "webauthn_platform_first_factor": {
                  "type": "boolean",
                  "description": "Use WebAuthn with Device Biometrics as the first authentication factor"
               }
            }
         },
         "promptsSettingsUpdate": {
            "type": "object",
            "description": "Prompts settings",
            "properties": {
               "universal_login_experience": {
                  "type": "string",
                  "description": "Which login experience to use. Can be `new` or `classic`.",
                  "enum": [
                     "new",
                     "classic"
                  ]
               },
               "identifier_first": {
                  "type": "boolean",
                  "description": "Whether identifier first is enabled or not",
                  "nullable": true
               },
               "webauthn_platform_first_factor": {
                  "type": "boolean",
                  "description": "Use WebAuthn with Device Biometrics as the first authentication factor",
                  "nullable": true
               }
            }
         },
         "scope": {
            "type": "object",
            "required": [
               "value"
            ],
            "properties": {
               "value": {
                  "type": "string",
                  "description": "Value of this scope.",
                  "minLength": 1,
                  "maxLength": 280
               },
               "description": {
                  "type": "string",
                  "description": "User-friendly description of this scope.",
                  "maxLength": 500
               }
            }
         },
         "resourceServer": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID of the API (resource server)."
               },
               "name": {
                  "type": "string",
                  "description": "Friendly name for this resource server. Can not contain `<` or `>` characters."
               },
               "is_system": {
                  "type": "boolean",
                  "description": "Whether this is an Auth0 system API (true) or a custom API (false)."
               },
               "identifier": {
                  "type": "string",
                  "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set."
               },
               "scopes": {
                  "type": "array",
                  "description": "List of permissions (scopes) that this API uses.",
                  "items": {
                     "$ref": "#/components/schemas/scope"
                  }
               },
               "signing_alg": {
                  "type": "string",
                  "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                  "enum": [
                     "HS256",
                     "RS256"
                  ]
               },
               "signing_secret": {
                  "type": "string",
                  "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
                  "minLength": 16
               },
               "allow_offline_access": {
                  "type": "boolean",
                  "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
               },
               "skip_consent_for_verifiable_first_party_clients": {
                  "type": "boolean",
                  "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
               },
               "token_lifetime": {
                  "type": "integer",
                  "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
               },
               "token_lifetime_for_web": {
                  "type": "integer",
                  "description": "Expiration value (in seconds) for access tokens issued for this API via Implicit or Hybrid Flows. Cannot be greater than the `token_lifetime` value."
               },
               "enforce_policies": {
                  "type": "boolean",
                  "description": "Whether authorization polices are enforced (true) or unenforced (false)."
               },
               "token_dialect": {
                  "type": "string",
                  "description": "Dialect of access tokens that should be issued. Can be `access_token` or `access_token_authz` (includes permissions).",
                  "enum": [
                     "access_token",
                     "access_token_authz"
                  ]
               },
               "client": {
                  "type": "object",
                  "properties": {}
               }
            }
         },
         "resourceServerUpdate": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Friendly name for this resource server. Can not contain `<` or `>` characters.",
                  "maxLength": 200
               },
               "scopes": {
                  "type": "array",
                  "description": "List of permissions (scopes) that this API uses.",
                  "items": {
                     "$ref": "#/components/schemas/scope"
                  }
               },
               "signing_alg": {
                  "type": "string",
                  "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                  "enum": [
                     "HS256",
                     "RS256"
                  ]
               },
               "signing_secret": {
                  "type": "string",
                  "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
                  "minLength": 16
               },
               "skip_consent_for_verifiable_first_party_clients": {
                  "type": "boolean",
                  "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
               },
               "allow_offline_access": {
                  "type": "boolean",
                  "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
               },
               "token_lifetime": {
                  "type": "integer",
                  "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
               },
               "token_dialect": {
                  "type": "string",
                  "description": "Dialect of issued access token. Can be `access_token` or `access_token_authz` (includes permissions).",
                  "enum": [
                     "access_token",
                     "access_token_authz"
                  ]
               },
               "enforce_policies": {
                  "type": "boolean",
                  "description": "Whether authorization policies are enforced (true) or not enforced (false)."
               },
               "client": {
                  "type": "object",
                  "properties": {}
               }
            }
         },
         "roleCreate": {
            "type": "object",
            "required": [
               "name"
            ],
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of the role."
               },
               "description": {
                  "type": "string",
                  "description": "Description of the role."
               }
            }
         },
         "roleUpdate": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this role."
               },
               "description": {
                  "type": "string",
                  "description": "Description of this role."
               }
            }
         },
         "permission": {
            "type": "object",
            "properties": {
               "resource_server_identifier": {
                  "type": "string",
                  "description": "Resource server (API) identifier that this permission is for."
               },
               "permission_name": {
                  "type": "string",
                  "description": "Name of this permission."
               },
               "resource_server_name": {
                  "type": "string",
                  "description": "Resource server (API) name this permission is for."
               },
               "description": {
                  "type": "string",
                  "description": "Description of this permission."
               }
            }
         },
         "rule": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this rule.",
                  "default": "rule_1"
               },
               "id": {
                  "type": "string",
                  "description": "ID of this rule.",
                  "default": "con_0000000000000001"
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether the rule is enabled (true), or disabled (false).",
                  "default": true
               },
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this rule runs.",
                  "default": "function (user, context, callback) {\\n  callback(null, user, context);\\n}"
               },
               "order": {
                  "type": "number",
                  "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
                  "default": 1
               },
               "stage": {
                  "type": "string",
                  "description": "Execution stage of this rule. Can be `login_success`, `login_failure`, or `pre_authorize`.",
                  "default": "login_success"
               }
            }
         },
         "ruleCreate": {
            "type": "object",
            "required": [
               "name",
               "script"
            ],
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name of this rule.",
                  "default": "my-rule"
               },
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this rule runs.",
                  "default": "function (user, context, callback) {\\n  callback(null, user, context);\\n}",
                  "minLength": 1
               },
               "order": {
                  "type": "number",
                  "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
                  "default": 2
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether the rule is enabled (true), or disabled (false).",
                  "default": true
               }
            }
         },
         "ruleUpdate": {
            "type": "object",
            "properties": {
               "script": {
                  "type": "string",
                  "description": "Code to be executed when this rule runs.",
                  "default": "function (user, context, callback) {\\n  callback(null, user, context);\\n}",
                  "minLength": 1
               },
               "name": {
                  "type": "string",
                  "description": "Name of this rule.",
                  "default": "my-rule"
               },
               "order": {
                  "type": "number",
                  "description": "Order that this rule should execute in relative to other rules. Lower-valued rules execute first.",
                  "default": 2
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Whether the rule is enabled (true), or disabled (false).",
                  "default": true
               }
            }
         },
         "statsEntry": {
            "type": "object",
            "properties": {
               "date": {
                  "type": "string",
                  "description": "Date these events occurred in ISO 8601 format.",
                  "default": "2014-01-01T00:00:00.000Z"
               },
               "logins": {
                  "type": "integer",
                  "description": "Number of logins on this date.",
                  "default": 100
               },
               "signups": {
                  "type": "integer",
                  "description": "Number of signups on this date.",
                  "default": 100
               },
               "leaked_passwords": {
                  "type": "integer",
                  "description": "Number of breached-password detections on this date (subscription required).",
                  "default": 100
               },
               "updated_at": {
                  "type": "string",
                  "description": "Date and time this stats entry was last updated in ISO 8601 format.",
                  "default": "2014-01-01T02:00:00.000Z"
               },
               "created_at": {
                  "type": "string",
                  "description": "Approximate date and time the first event occurred in ISO 8601 format.",
                  "default": "2014-01-01T20:00:00.000Z"
               }
            }
         },
         "tenantSettingsUpdate": {
            "type": "object",
            "properties": {
               "change_password": {
                  "type": "object",
                  "nullable": true,
                  "description": "Change Password page customization.",
                  "properties": {
                     "enabled": {
                        "type": "boolean",
                        "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                        "default": false
                     },
                     "html": {
                        "type": "string",
                        "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                        "default": ""
                     }
                  }
               },
               "device_flow": {
                  "type": "object",
                  "nullable": true,
                  "description": "Device Flow configuration.",
                  "properties": {
                     "charset": {
                        "type": "string",
                        "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                        "default": "base20",
                        "enum": [
                           "base20",
                           "digits"
                        ]
                     },
                     "mask": {
                        "type": "string",
                        "description": "Mask used to format a generated User Code into a friendly, readable format.",
                        "default": "****-****"
                     }
                  }
               },
               "guardian_mfa_page": {
                  "type": "object",
                  "nullable": true,
                  "description": "Guardian page customization.",
                  "properties": {
                     "enabled": {
                        "type": "boolean",
                        "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                        "default": false
                     },
                     "html": {
                        "type": "string",
                        "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                        "default": ""
                     }
                  }
               },
               "default_audience": {
                  "type": "string",
                  "description": "Default audience for API Authorization.",
                  "default": ""
               },
               "default_directory": {
                  "type": "string",
                  "description": "Name of connection used for password grants at the `/token` endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
                  "default": ""
               },
               "error_page": {
                  "type": "object",
                  "nullable": true,
                  "description": "Error page customization.",
                  "properties": {
                     "html": {
                        "type": "string",
                        "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                        "default": ""
                     },
                     "show_log_link": {
                        "type": "boolean",
                        "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                        "default": false
                     },
                     "url": {
                        "type": "string",
                        "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                        "default": "https://mycompany.org/error"
                     }
                  }
               },
               "flags": {
                  "type": "object",
                  "description": "Flags used to change the behavior of this tenant.",
                  "properties": {
                     "change_pwd_flow_v1": {
                        "type": "boolean",
                        "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                        "enum": [
                           false
                        ]
                     },
                     "enable_client_connections": {
                        "type": "boolean",
                        "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false)."
                     },
                     "enable_apis_section": {
                        "type": "boolean",
                        "description": "Whether the APIs section is enabled (true) or disabled (false)."
                     },
                     "enable_pipeline2": {
                        "type": "boolean",
                        "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false)."
                     },
                     "enable_dynamic_client_registration": {
                        "type": "boolean",
                        "description": " Whether third-party developers can <a href='https://auth0.com/docs/api-auth/dynamic-client-registration'>dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration."
                     },
                     "enable_custom_domain_in_emails": {
                        "type": "boolean",
                        "description": "Whether emails sent by Auth0 for change password, verification etc. should use your verified custom domain (true) or your auth0.com sub-domain (false).  Affects all emails, links, and URLs. Email will fail if the custom domain is not verified."
                     },
                     "allow_legacy_tokeninfo_endpoint": {
                        "type": "boolean",
                        "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
                     },
                     "enable_legacy_profile": {
                        "type": "boolean",
                        "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
                     },
                     "enable_idtoken_api2": {
                        "type": "boolean",
                        "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
                     },
                     "enable_public_signup_user_exists_error": {
                        "type": "boolean",
                        "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
                     },
                     "allow_legacy_delegation_grant_types": {
                        "type": "boolean",
                        "description": " Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false)."
                     },
                     "allow_legacy_ro_grant_types": {
                        "type": "boolean",
                        "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false)."
                     },
                     "enable_sso": {
                        "type": "boolean",
                        "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
                     },
                     "disable_clickjack_protection_headers": {
                        "type": "boolean",
                        "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
                     },
                     "no_disclose_enterprise_connections": {
                        "type": "boolean",
                        "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
                     },
                     "disable_management_api_sms_obfuscation": {
                        "type": "boolean",
                        "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls."
                     },
                     "enforce_client_authentication_on_passwordless_start": {
                        "type": "boolean",
                        "description": "Enforce client authentication for passwordless start"
                     },
                     "trust_azure_adfs_email_verified_connection_property": {
                        "type": "boolean",
                        "description": "Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise."
                     },
                     "enable_adfs_waad_email_verification": {
                        "type": "boolean",
                        "description": "Enables the email verification flow during login for Azure AD and ADFS connections"
                     },
                     "revoke_refresh_token_grant": {
                        "type": "boolean",
                        "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
                     },
                     "dashboard_log_streams_next": {
                        "type": "boolean",
                        "description": "Enables beta access to log streaming changes"
                     },
                     "dashboard_insights_view": {
                        "type": "boolean",
                        "description": "Enables new insights activity page view"
                     },
                     "disable_fields_map_fix": {
                        "type": "boolean",
                        "description": "Disables SAML fields map fix for bad mappings with repeated attributes"
                     }
                  }
               },
               "friendly_name": {
                  "type": "string",
                  "description": "Friendly name for this tenant.",
                  "default": "My Company"
               },
               "picture_url": {
                  "type": "string",
                  "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
                  "default": "https://mycompany.org/logo.png"
               },
               "support_email": {
                  "type": "string",
                  "description": "End-user support email.",
                  "default": "support@mycompany.org"
               },
               "support_url": {
                  "type": "string",
                  "description": "End-user support url.",
                  "default": "https://mycompany.org/support"
               },
               "allowed_logout_urls": {
                  "type": "array",
                  "description": "URLs that are valid to redirect to after logout from Auth0.",
                  "items": {
                     "type": "string"
                  }
               },
               "session_lifetime": {
                  "type": "integer",
                  "description": "Number of hours a session will stay valid.",
                  "default": 168
               },
               "idle_session_lifetime": {
                  "type": "integer",
                  "description": "Number of hours for which a session can be inactive before the user must log in again.",
                  "default": 72
               },
               "sandbox_version": {
                  "type": "string",
                  "description": "Selected sandbox version for the extensibility environment",
                  "default": "12",
                  "maxLength": 8
               },
               "default_redirection_uri": {
                  "type": "string",
                  "description": "The default absolute redirection uri, must be https"
               },
               "enabled_locales": {
                  "type": "array",
                  "description": "Supported locales for the user interface",
                  "items": {
                     "type": "string",
                     "enum": [
                        "ar",
                        "bg",
                        "bs",
                        "cs",
                        "da",
                        "de",
                        "el",
                        "en",
                        "es",
                        "et",
                        "fi",
                        "fr",
                        "fr-CA",
                        "fr-FR",
                        "he",
                        "hi",
                        "hr",
                        "hu",
                        "id",
                        "is",
                        "it",
                        "ja",
                        "ko",
                        "lt",
                        "lv",
                        "nb",
                        "nl",
                        "pl",
                        "pt",
                        "pt-BR",
                        "pt-PT",
                        "ro",
                        "ru",
                        "sk",
                        "sl",
                        "sr",
                        "sv",
                        "th",
                        "tr",
                        "uk",
                        "vi",
                        "zh-CN",
                        "zh-TW"
                     ]
                  }
               },
               "session_cookie": {
                  "type": "object",
                  "nullable": true,
                  "description": "Session cookie configuration",
                  "required": [
                     "mode"
                  ],
                  "properties": {
                     "mode": {
                        "type": "string",
                        "description": "Behavior of the session cookie",
                        "default": "persistent",
                        "enum": [
                           "persistent",
                           "non-persistent"
                        ]
                     }
                  }
               }
            }
         },
         "userBlock": {
            "type": "object",
            "properties": {
               "blocked_for": {
                  "type": "array",
                  "description": "Array of identifier + IP address pairs.  IP address is optional, and may be omitted in certain circumstances (such as Account Lockout mode).",
                  "items": {
                     "type": "object",
                     "properties": {
                        "identifier": {
                           "type": "string",
                           "description": "Identifier (should be any of an `email`, `username`, or `phone_number`)",
                           "default": "john.doe@gmail.com"
                        },
                        "ip": {
                           "type": "string",
                           "description": "IP Address",
                           "default": "10.0.0.1"
                        },
                        "connection": {
                           "type": "string",
                           "description": "Connection identifier"
                        }
                     }
                  }
               }
            }
         },
         "userProfile": {
            "type": "object",
            "additionalProperties": {},
            "properties": {
               "email": {
                  "type": "string",
                  "description": "Email address of this user."
               },
               "email_verified": {
                  "type": "boolean",
                  "description": "Whether this email address is verified (true) or unverified (false)."
               },
               "name": {
                  "type": "string",
                  "description": "Name of this user."
               },
               "username": {
                  "type": "string",
                  "description": "Username of this user.",
                  "default": "johndoe"
               },
               "given_name": {
                  "type": "string",
                  "description": "Given name/first name/forename of this user."
               },
               "phone_number": {
                  "type": "string",
                  "description": "Phone number for this user."
               },
               "phone_verified": {
                  "type": "boolean",
                  "description": "Whether this phone number is verified (true) or unverified (false)."
               },
               "family_name": {
                  "type": "string",
                  "description": "Family name/last name/surname of this user."
               }
            }
         },
         "userCreate": {
            "type": "object",
            "required": [
               "connection"
            ],
            "properties": {
               "email": {
                  "type": "string",
                  "description": "The user's email.",
                  "default": "john.doe@gmail.com"
               },
               "phone_number": {
                  "type": "string",
                  "description": "The user's phone number (following the E.164 recommendation), only valid for users from SMS connections.",
                  "default": "+199999999999999"
               },
               "user_metadata": {
                  "type": "object",
                  "description": "Data related to the user that does not affect the application's core functionality.",
                  "additionalProperties": {}
               },
               "blocked": {
                  "type": "boolean",
                  "description": "Whether this user was blocked by an administrator (true) or not (false).",
                  "default": false
               },
               "email_verified": {
                  "type": "boolean",
                  "description": "Whether this email address is verified (true) or unverified (false). User will receive a verification email after creation if `email_verified` is false or not specified",
                  "default": false
               },
               "phone_verified": {
                  "type": "boolean",
                  "description": "Whether this phone number has been verified (true) or not (false).",
                  "default": false
               },
               "app_metadata": {
                  "type": "object",
                  "description": "Data related to the user that does affect the application's core functionality.",
                  "properties": {
                     "clientID": {},
                     "globalClientID": {},
                     "global_client_id": {},
                     "email_verified": {},
                     "user_id": {},
                     "identities": {},
                     "lastIP": {},
                     "lastLogin": {},
                     "metadata": {},
                     "created_at": {},
                     "loginsCount": {},
                     "_id": {},
                     "email": {},
                     "blocked": {},
                     "__tenant": {},
                     "updated_at": {}
                  }
               },
               "given_name": {
                  "type": "string",
                  "description": "The user's given name(s).",
                  "default": "John",
                  "minLength": 1,
                  "maxLength": 150
               },
               "family_name": {
                  "type": "string",
                  "description": "The user's family name(s).",
                  "default": "Doe",
                  "minLength": 1,
                  "maxLength": 150
               },
               "name": {
                  "type": "string",
                  "description": "The user's full name.",
                  "default": "John Doe",
                  "minLength": 1,
                  "maxLength": 300
               },
               "nickname": {
                  "type": "string",
                  "description": "The user's nickname.",
                  "default": "Johnny",
                  "minLength": 1,
                  "maxLength": 300
               },
               "picture": {
                  "type": "string",
                  "description": "A URI pointing to the user's picture.",
                  "default": "https://secure.gravatar.com/avatar/15626c5e0c749cb912f9d1ad48dba440?s=480&r=pg&d=https%3A%2F%2Fssl.gstatic.com%2Fs2%2Fprofiles%2Fimages%2Fsilhouette80.png"
               },
               "user_id": {
                  "type": "string",
                  "description": "The external user's id provided by the identity provider.",
                  "default": "abc",
                  "minLength": 0,
                  "maxLength": 255
               },
               "connection": {
                  "type": "string",
                  "description": "Name of the connection this user should be created in.",
                  "default": "Initial-Connection",
                  "minLength": 1
               },
               "password": {
                  "type": "string",
                  "description": "Initial password for this user (mandatory only for auth0 connection strategy).",
                  "default": "secret",
                  "minLength": 1
               },
               "verify_email": {
                  "type": "boolean",
                  "description": "Whether the user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.",
                  "default": false
               },
               "username": {
                  "type": "string",
                  "description": "The user's username. Only valid if the connection requires a username.",
                  "default": "johndoe",
                  "minLength": 1,
                  "maxLength": 128
               }
            }
         },
         "userUpdate": {
            "type": "object",
            "additionalProperties": {},
            "properties": {
               "blocked": {
                  "type": "boolean",
                  "description": "Whether this user was blocked by an administrator (true) or not (false).",
                  "default": false
               },
               "email_verified": {
                  "type": "boolean",
                  "description": "Whether this email address is verified (true) or unverified (false). If set to false the user will not receive a verification email unless `verify_email` is set to true.",
                  "default": false
               },
               "email": {
                  "type": "string",
                  "description": "Email address of this user.",
                  "default": "john.doe@gmail.com"
               },
               "phone_number": {
                  "type": "string",
                  "description": "The user's phone number (following the E.164 recommendation), only valid for users from SMS connections.",
                  "default": "+199999999999999"
               },
               "phone_verified": {
                  "type": "boolean",
                  "description": "Whether this phone number has been verified (true) or not (false).",
                  "default": false
               },
               "user_metadata": {
                  "type": "object",
                  "nullable": true,
                  "description": "User metadata to which this user has read/write access.",
                  "additionalProperties": {}
               },
               "app_metadata": {
                  "type": "object",
                  "nullable": true,
                  "description": "User metadata to which this user has read-only access.",
                  "properties": {
                     "clientID": {},
                     "globalClientID": {},
                     "global_client_id": {},
                     "email_verified": {},
                     "user_id": {},
                     "identities": {},
                     "lastIP": {},
                     "lastLogin": {},
                     "metadata": {},
                     "created_at": {},
                     "loginsCount": {},
                     "_id": {},
                     "email": {},
                     "blocked": {},
                     "__tenant": {},
                     "updated_at": {}
                  }
               },
               "given_name": {
                  "type": "string",
                  "description": "Given name/first name/forename of this user.",
                  "default": "John",
                  "minLength": 1,
                  "maxLength": 150,
                  "nullable": true
               },
               "family_name": {
                  "type": "string",
                  "description": "Family name/last name/surname of this user.",
                  "default": "Doe",
                  "minLength": 1,
                  "maxLength": 150,
                  "nullable": true
               },
               "name": {
                  "type": "string",
                  "description": "Name of this user.",
                  "default": "John Doe",
                  "minLength": 1,
                  "maxLength": 300,
                  "nullable": true
               },
               "nickname": {
                  "type": "string",
                  "description": "Preferred nickname or alias of this user.",
                  "default": "Johnny",
                  "minLength": 1,
                  "maxLength": 300,
                  "nullable": true
               },
               "picture": {
                  "type": "string",
                  "description": "URL to picture, photo, or avatar of this user.",
                  "default": "https://secure.gravatar.com/avatar/15626c5e0c749cb912f9d1ad48dba440?s=480&r=pg&d=https%3A%2F%2Fssl.gstatic.com%2Fs2%2Fprofiles%2Fimages%2Fsilhouette80.png",
                  "nullable": true
               },
               "verify_email": {
                  "type": "boolean",
                  "description": "Whether this user will receive a verification email after creation (true) or no email (false). Overrides behavior of `email_verified` parameter.",
                  "default": false
               },
               "verify_phone_number": {
                  "type": "boolean",
                  "description": "Whether this user will receive a text after changing the phone number (true) or no text (false). Only valid when changing phone number.",
                  "default": false
               },
               "password": {
                  "type": "string",
                  "description": "New password for this user (mandatory for non-SMS connections).",
                  "default": "secret",
                  "minLength": 1
               },
               "connection": {
                  "type": "string",
                  "description": "ID of the connection this user should be created in.",
                  "default": "Initial-Connection",
                  "minLength": 1
               },
               "client_id": {
                  "type": "string",
                  "description": "Auth0 client ID. Only valid when updating email address.",
                  "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX",
                  "minLength": 1
               },
               "username": {
                  "type": "string",
                  "description": "The user's username. Only valid if the connection requires a username.",
                  "default": "johndoe",
                  "minLength": 1,
                  "maxLength": 128
               }
            }
         },
         "userEnrollment": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "ID of this enrollment."
               },
               "status": {
                  "type": "string",
                  "description": "Status of this enrollment. Can be `pending` or `confirmed`.",
                  "enum": [
                     "pending",
                     "confirmed"
                  ]
               },
               "type": {
                  "type": "string",
                  "description": "Type of enrollment."
               },
               "name": {
                  "type": "string",
                  "description": "Name of enrollment (usually phone number).",
                  "maxLength": 20
               },
               "identifier": {
                  "type": "string",
                  "description": "Device identifier (usually phone identifier) of this enrollment."
               },
               "phone_number": {
                  "type": "string",
                  "description": "Phone number for this enrollment."
               },
               "auth_method": {
                  "type": "string",
                  "description": "Authentication method for this enrollment. Can be `authenticator`, `guardian`, `sms`, `webauthn-roaming`, or `webauthn-platform`.",
                  "enum": [
                     "authenticator",
                     "guardian",
                     "sms",
                     "webauthn-platform",
                     "webauthn-roaming"
                  ]
               },
               "enrolled_at": {
                  "type": "string",
                  "description": "Start date and time of this enrollment."
               },
               "last_auth": {
                  "type": "string",
                  "description": "Last authentication date and time of this enrollment."
               }
            }
         },
         "userIdentity": {
            "type": "object",
            "required": [
               "provider",
               "user_id",
               "connection"
            ],
            "properties": {
               "connection": {
                  "type": "string",
                  "description": "Connection name of this identity.",
                  "default": "twitter"
               },
               "user_id": {
                  "description": "user_id of this identity.",
                  "oneOf": [
                     {
                        "type": "string",
                        "default": "abc",
                        "minLength": 1
                     },
                     {
                        "type": "integer",
                        "default": 191919191
                     }
                  ]
               },
               "provider": {
                  "type": "string",
                  "description": "Type of identity provider.",
                  "default": "twitter"
               },
               "profileData": {
                  "$ref": "#/components/schemas/userProfile"
               },
               "isSocial": {
                  "type": "boolean",
                  "description": "Whether the identity provider is a social provider (true) or not (false)."
               },
               "access_token": {
                  "type": "string",
                  "description": "IDP access token returned if scope `read:user_idp_tokens` is defined."
               },
               "access_token_secret": {
                  "type": "string",
                  "description": "IDP access token secret returned only if `scope read:user_idp_tokens` is defined."
               },
               "refresh_token": {
                  "type": "string",
                  "description": "IDP refresh token returned only if scope `read:user_idp_tokens` is defined."
               }
            }
         }
      }
   },
   "paths": {
      "/actions/actions": {
         "get": {
            "summary": "Get actions",
            "description": "Retrieve all actions.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "triggerId",
                  "in": "query",
                  "description": "An actions extensibility point.",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "post-login",
                        "credentials-exchange",
                        "pre-user-registration",
                        "post-user-registration",
                        "post-change-password",
                        "send-phone-message",
                        "iga-approval",
                        "iga-certification",
                        "iga-fulfillment-assignment",
                        "iga-fulfillment-execution"
                     ]
                  }
               },
               {
                  "name": "actionName",
                  "in": "query",
                  "description": "The name of the action to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "deployed",
                  "in": "query",
                  "description": "Optional filter to only retrieve actions that are deployed.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Use this field to request a specific page of the list results.",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "The maximum number of results to be returned by the server in single response. 20 by default",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "installed",
                  "in": "query",
                  "description": "Optional. When true, return only installed actions. When false, return only custom actions. Returns all actions by default.",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The actions were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "total": {
                                 "type": "number",
                                 "description": "The total result count.",
                                 "default": 1
                              },
                              "page": {
                                 "type": "number",
                                 "description": "Page index of the results being returned. First page is 0.",
                                 "default": 0
                              },
                              "per_page": {
                                 "type": "number",
                                 "description": "Number of results per page.",
                                 "default": 20
                              },
                              "actions": {
                                 "type": "array",
                                 "description": "The list of actions.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The unique ID of the action.",
                                          "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "The name of an action.",
                                          "default": "my-action"
                                       },
                                       "supported_triggers": {
                                          "type": "array",
                                          "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                },
                                                "status": {
                                                   "type": "string",
                                                   "description": "status points to the trigger status."
                                                },
                                                "runtimes": {
                                                   "type": "array",
                                                   "description": "runtimes supported by this trigger.",
                                                   "items": {
                                                      "type": "string"
                                                   }
                                                },
                                                "default_runtime": {
                                                   "type": "string",
                                                   "description": "Runtime that will be used when none is specified when creating an action."
                                                },
                                                "compatible_triggers": {
                                                   "type": "array",
                                                   "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                   "items": {
                                                      "type": "object",
                                                      "required": [
                                                         "id",
                                                         "version"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       },
                                       "code": {
                                          "type": "string",
                                          "description": "The source code of the action.",
                                          "default": "module.exports = () => {}"
                                       },
                                       "dependencies": {
                                          "type": "array",
                                          "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                          "items": {
                                             "type": "object",
                                             "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                             "properties": {
                                                "name": {
                                                   "type": "string",
                                                   "description": "name is the name of the npm module, e.g. lodash"
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "description is the version of the npm module, e.g. 4.17.1"
                                                },
                                                "registry_url": {
                                                   "type": "string",
                                                   "description": "registry_url is an optional value used primarily for private npm registries."
                                                }
                                             }
                                          }
                                       },
                                       "runtime": {
                                          "type": "string",
                                          "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                          "default": "node12"
                                       },
                                       "secrets": {
                                          "type": "array",
                                          "description": "The list of secrets that are included in an action or a version of an action.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "name": {
                                                   "type": "string",
                                                   "description": "The name of the particular secret, e.g. API_KEY.",
                                                   "default": "mySecret"
                                                },
                                                "updated_at": {
                                                   "type": "string",
                                                   "description": "The time when the secret was last updated.",
                                                   "default": "2021-01-01T00:00:00.000Z"
                                                }
                                             }
                                          }
                                       },
                                       "deployed_version": {
                                          "type": "object",
                                          "description": "The version of the action that is currently deployed.",
                                          "additionalProperties": {}
                                       },
                                       "installed_integration_id": {
                                          "type": "string",
                                          "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                          "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                       },
                                       "integration": {
                                          "type": "object",
                                          "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                                "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                             },
                                             "catalog_id": {
                                                "type": "string",
                                                "description": "catalog_id refers to the ID in the marketplace catalog",
                                                "default": "awesome-auth0-integration"
                                             },
                                             "url_slug": {
                                                "type": "string",
                                                "description": "url_slug refers to the url_slug in the marketplace catalog",
                                                "default": "awesome-auth0-integration-slug"
                                             },
                                             "partner_id": {
                                                "type": "string",
                                                "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                                "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                                "default": "Example Auth0 integration"
                                             },
                                             "description": {
                                                "type": "string",
                                                "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                                "default": "An awesome Auth0 integration"
                                             },
                                             "short_description": {
                                                "type": "string",
                                                "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                                "default": "Awesome Auth0 integration"
                                             },
                                             "logo": {
                                                "type": "string"
                                             },
                                             "feature_type": {
                                                "type": "string",
                                                "description": "feature_type is the type of the integration.",
                                                "default": "action",
                                                "enum": [
                                                   "unspecified",
                                                   "action",
                                                   "social_connection",
                                                   "log_stream",
                                                   "sso_integration",
                                                   "sms_provider"
                                                ]
                                             },
                                             "terms_of_use_url": {
                                                "type": "string"
                                             },
                                             "privacy_policy_url": {
                                                "type": "string"
                                             },
                                             "public_support_link": {
                                                "type": "string"
                                             },
                                             "current_release": {
                                                "type": "object",
                                                "properties": {
                                                   "id": {
                                                      "type": "string",
                                                      "description": "The id of the associated IntegrationRelease"
                                                   },
                                                   "trigger": {
                                                      "type": "object",
                                                      "required": [
                                                         "id"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         },
                                                         "status": {
                                                            "type": "string",
                                                            "description": "status points to the trigger status."
                                                         },
                                                         "runtimes": {
                                                            "type": "array",
                                                            "description": "runtimes supported by this trigger.",
                                                            "items": {
                                                               "type": "string"
                                                            }
                                                         },
                                                         "default_runtime": {
                                                            "type": "string",
                                                            "description": "Runtime that will be used when none is specified when creating an action."
                                                         },
                                                         "compatible_triggers": {
                                                            "type": "array",
                                                            "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                            "items": {
                                                               "type": "object",
                                                               "required": [
                                                                  "id",
                                                                  "version"
                                                               ],
                                                               "properties": {
                                                                  "id": {
                                                                     "type": "string",
                                                                     "description": "An actions extensibility point.",
                                                                     "default": "post-login",
                                                                     "enum": [
                                                                        "post-login",
                                                                        "credentials-exchange",
                                                                        "pre-user-registration",
                                                                        "post-user-registration",
                                                                        "post-change-password",
                                                                        "send-phone-message",
                                                                        "iga-approval",
                                                                        "iga-certification",
                                                                        "iga-fulfillment-assignment",
                                                                        "iga-fulfillment-execution"
                                                                     ]
                                                                  },
                                                                  "version": {
                                                                     "type": "string",
                                                                     "description": "The version of a trigger. v1, v2, etc."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   },
                                                   "semver": {
                                                      "type": "object",
                                                      "description": "Semver denotes the major.minor version of an integration release",
                                                      "properties": {
                                                         "major": {
                                                            "type": "integer",
                                                            "description": "Major is the major number of a semver",
                                                            "default": 1
                                                         },
                                                         "minor": {
                                                            "type": "integer",
                                                            "description": "Minior is the minior number of a semver",
                                                            "default": 1
                                                         }
                                                      }
                                                   },
                                                   "required_secrets": {
                                                      "type": "array",
                                                      "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                      "items": {
                                                         "type": "object",
                                                         "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                         "properties": {
                                                            "type": {
                                                               "type": "string",
                                                               "enum": [
                                                                  "UNSPECIFIED",
                                                                  "STRING"
                                                               ]
                                                            },
                                                            "name": {
                                                               "type": "string",
                                                               "description": "The name of the parameter."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The short label for this parameter."
                                                            },
                                                            "description": {
                                                               "type": "string",
                                                               "description": "The lengthier description for this parameter."
                                                            },
                                                            "default_value": {
                                                               "type": "string",
                                                               "description": "The default value for this parameter."
                                                            },
                                                            "placeholder": {
                                                               "type": "string",
                                                               "description": "Placeholder text for this parameter."
                                                            },
                                                            "options": {
                                                               "type": "array",
                                                               "description": "The allowable options for this param.",
                                                               "items": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                     "value": {
                                                                        "type": "string",
                                                                        "description": "The value of an option that will be used within the application."
                                                                     },
                                                                     "label": {
                                                                        "type": "string",
                                                                        "description": "The display value of an option suitable for displaying in a UI."
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   },
                                                   "required_configuration": {
                                                      "type": "array",
                                                      "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                      "items": {
                                                         "type": "object",
                                                         "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                         "properties": {
                                                            "type": {
                                                               "type": "string",
                                                               "enum": [
                                                                  "UNSPECIFIED",
                                                                  "STRING"
                                                               ]
                                                            },
                                                            "name": {
                                                               "type": "string",
                                                               "description": "The name of the parameter."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The short label for this parameter."
                                                            },
                                                            "description": {
                                                               "type": "string",
                                                               "description": "The lengthier description for this parameter."
                                                            },
                                                            "default_value": {
                                                               "type": "string",
                                                               "description": "The default value for this parameter."
                                                            },
                                                            "placeholder": {
                                                               "type": "string",
                                                               "description": "Placeholder text for this parameter."
                                                            },
                                                            "options": {
                                                               "type": "array",
                                                               "description": "The allowable options for this param.",
                                                               "items": {
                                                                  "type": "object",
                                                                  "properties": {
                                                                     "value": {
                                                                        "type": "string",
                                                                        "description": "The value of an option that will be used within the application."
                                                                     },
                                                                     "label": {
                                                                        "type": "string",
                                                                        "description": "The display value of an option suitable for displaying in a UI."
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "created_at": {
                                                "type": "string",
                                                "default": "2021-06-21T15:47:29.072Z"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "default": "2021-06-21T15:47:29.072Z"
                                             }
                                          }
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The build status of this action.",
                                          "default": "built",
                                          "enum": [
                                             "pending",
                                             "building",
                                             "packaged",
                                             "built",
                                             "retrying",
                                             "failed"
                                          ]
                                       },
                                       "all_changes_deployed": {
                                          "type": "boolean",
                                          "description": "True if all of an Action's contents have been deployed.",
                                          "default": false
                                       },
                                       "built_at": {
                                          "type": "string",
                                          "description": "The time when this action was built successfully.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "description": "The time when this action was created.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when this action was updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_actions",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create an action",
            "description": "Create an action. Once an action is created, it must be deployed, and then\\nbound to a trigger before it will be executed as part of a flow.\\n",
            "tags": [
               "actions"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name",
                           "supported_triggers"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of an action.",
                              "default": "my-action"
                           },
                           "supported_triggers": {
                              "type": "array",
                              "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "id"
                                 ],
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "An actions extensibility point.",
                                       "default": "post-login",
                                       "enum": [
                                          "post-login",
                                          "credentials-exchange",
                                          "pre-user-registration",
                                          "post-user-registration",
                                          "post-change-password",
                                          "send-phone-message",
                                          "iga-approval",
                                          "iga-certification",
                                          "iga-fulfillment-assignment",
                                          "iga-fulfillment-execution"
                                       ]
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "The version of a trigger. v1, v2, etc."
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "status points to the trigger status."
                                    },
                                    "runtimes": {
                                       "type": "array",
                                       "description": "runtimes supported by this trigger.",
                                       "items": {
                                          "type": "string"
                                       }
                                    },
                                    "default_runtime": {
                                       "type": "string",
                                       "description": "Runtime that will be used when none is specified when creating an action."
                                    },
                                    "compatible_triggers": {
                                       "type": "array",
                                       "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id",
                                             "version"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           },
                           "code": {
                              "type": "string",
                              "description": "The source code of the action.",
                              "default": "module.exports = () => {}"
                           },
                           "dependencies": {
                              "type": "array",
                              "description": "The list of third party npm modules, and their versions, that this action depends on.",
                              "items": {
                                 "type": "object",
                                 "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "name is the name of the npm module, e.g. lodash"
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "description is the version of the npm module, e.g. 4.17.1"
                                    },
                                    "registry_url": {
                                       "type": "string",
                                       "description": "registry_url is an optional value used primarily for private npm registries."
                                    }
                                 }
                              }
                           },
                           "runtime": {
                              "type": "string",
                              "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                              "default": "node12"
                           },
                           "secrets": {
                              "type": "array",
                              "description": "The list of secrets that are included in an action or a version of an action.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the particular secret, e.g. API_KEY.",
                                       "default": "mySecret"
                                    },
                                    "value": {
                                       "type": "string",
                                       "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                       "default": "mySecretValue"
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name",
                           "supported_triggers"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of an action.",
                              "default": "my-action"
                           },
                           "supported_triggers": {
                              "type": "array",
                              "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "id"
                                 ],
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "An actions extensibility point.",
                                       "default": "post-login",
                                       "enum": [
                                          "post-login",
                                          "credentials-exchange",
                                          "pre-user-registration",
                                          "post-user-registration",
                                          "post-change-password",
                                          "send-phone-message",
                                          "iga-approval",
                                          "iga-certification",
                                          "iga-fulfillment-assignment",
                                          "iga-fulfillment-execution"
                                       ]
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "The version of a trigger. v1, v2, etc."
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "status points to the trigger status."
                                    },
                                    "runtimes": {
                                       "type": "array",
                                       "description": "runtimes supported by this trigger.",
                                       "items": {
                                          "type": "string"
                                       }
                                    },
                                    "default_runtime": {
                                       "type": "string",
                                       "description": "Runtime that will be used when none is specified when creating an action."
                                    },
                                    "compatible_triggers": {
                                       "type": "array",
                                       "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id",
                                             "version"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           },
                           "code": {
                              "type": "string",
                              "description": "The source code of the action.",
                              "default": "module.exports = () => {}"
                           },
                           "dependencies": {
                              "type": "array",
                              "description": "The list of third party npm modules, and their versions, that this action depends on.",
                              "items": {
                                 "type": "object",
                                 "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "name is the name of the npm module, e.g. lodash"
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "description is the version of the npm module, e.g. 4.17.1"
                                    },
                                    "registry_url": {
                                       "type": "string",
                                       "description": "registry_url is an optional value used primarily for private npm registries."
                                    }
                                 }
                              }
                           },
                           "runtime": {
                              "type": "string",
                              "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                              "default": "node12"
                           },
                           "secrets": {
                              "type": "array",
                              "description": "The list of secrets that are included in an action or a version of an action.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the particular secret, e.g. API_KEY.",
                                       "default": "mySecret"
                                    },
                                    "value": {
                                       "type": "string",
                                       "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                       "default": "mySecretValue"
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Action successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique ID of the action.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of an action.",
                                 "default": "my-action"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "deployed_version": {
                                 "type": "object",
                                 "description": "The version of the action that is currently deployed.",
                                 "additionalProperties": {}
                              },
                              "installed_integration_id": {
                                 "type": "string",
                                 "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                 "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                              },
                              "integration": {
                                 "type": "object",
                                 "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                       "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                    },
                                    "catalog_id": {
                                       "type": "string",
                                       "description": "catalog_id refers to the ID in the marketplace catalog",
                                       "default": "awesome-auth0-integration"
                                    },
                                    "url_slug": {
                                       "type": "string",
                                       "description": "url_slug refers to the url_slug in the marketplace catalog",
                                       "default": "awesome-auth0-integration-slug"
                                    },
                                    "partner_id": {
                                       "type": "string",
                                       "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                       "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                       "default": "Example Auth0 integration"
                                    },
                                    "description": {
                                       "type": "string",
                                       "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                       "default": "An awesome Auth0 integration"
                                    },
                                    "short_description": {
                                       "type": "string",
                                       "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                       "default": "Awesome Auth0 integration"
                                    },
                                    "logo": {
                                       "type": "string"
                                    },
                                    "feature_type": {
                                       "type": "string",
                                       "description": "feature_type is the type of the integration.",
                                       "default": "action",
                                       "enum": [
                                          "unspecified",
                                          "action",
                                          "social_connection",
                                          "log_stream",
                                          "sso_integration",
                                          "sms_provider"
                                       ]
                                    },
                                    "terms_of_use_url": {
                                       "type": "string"
                                    },
                                    "privacy_policy_url": {
                                       "type": "string"
                                    },
                                    "public_support_link": {
                                       "type": "string"
                                    },
                                    "current_release": {
                                       "type": "object",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "The id of the associated IntegrationRelease"
                                          },
                                          "trigger": {
                                             "type": "object",
                                             "required": [
                                                "id"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                },
                                                "status": {
                                                   "type": "string",
                                                   "description": "status points to the trigger status."
                                                },
                                                "runtimes": {
                                                   "type": "array",
                                                   "description": "runtimes supported by this trigger.",
                                                   "items": {
                                                      "type": "string"
                                                   }
                                                },
                                                "default_runtime": {
                                                   "type": "string",
                                                   "description": "Runtime that will be used when none is specified when creating an action."
                                                },
                                                "compatible_triggers": {
                                                   "type": "array",
                                                   "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                   "items": {
                                                      "type": "object",
                                                      "required": [
                                                         "id",
                                                         "version"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "semver": {
                                             "type": "object",
                                             "description": "Semver denotes the major.minor version of an integration release",
                                             "properties": {
                                                "major": {
                                                   "type": "integer",
                                                   "description": "Major is the major number of a semver",
                                                   "default": 1
                                                },
                                                "minor": {
                                                   "type": "integer",
                                                   "description": "Minior is the minior number of a semver",
                                                   "default": 1
                                                }
                                             }
                                          },
                                          "required_secrets": {
                                             "type": "array",
                                             "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "required_configuration": {
                                             "type": "array",
                                             "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this action.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "all_changes_deployed": {
                                 "type": "boolean",
                                 "description": "True if all of an Action's contents have been deployed.",
                                 "default": false
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this action was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this action was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when this action was updated.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Request Body."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: create:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{actionId}/versions": {
         "get": {
            "summary": "Get an action's versions",
            "description": "Retrieve all of an action's versions. An action version is created whenever\\nan action is deployed. An action version is immutable, once created.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "actionId",
                  "in": "path",
                  "description": "The ID of the action.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Use this field to request a specific page of the list results.",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "This field specify the maximum number of results to be returned by the server. 20 by default",
                  "schema": {
                     "type": "number"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The action versions were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "total": {
                                 "type": "number",
                                 "description": "The total result count.",
                                 "default": 1
                              },
                              "page": {
                                 "type": "number",
                                 "description": "Page index of the results being returned. First page is 0.",
                                 "default": 0
                              },
                              "per_page": {
                                 "type": "number",
                                 "description": "Number of results per page. Paging is disabled if parameter not sent.",
                                 "default": 20
                              },
                              "versions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The unique id of an action version.",
                                          "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
                                       },
                                       "action_id": {
                                          "type": "string",
                                          "description": "The id of the action to which this version belongs.",
                                          "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                       },
                                       "code": {
                                          "type": "string",
                                          "description": "The source code of this specific version of the action.",
                                          "default": "module.exports = () => {}"
                                       },
                                       "dependencies": {
                                          "type": "array",
                                          "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
                                          "items": {
                                             "type": "object",
                                             "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                             "properties": {
                                                "name": {
                                                   "type": "string",
                                                   "description": "name is the name of the npm module, e.g. lodash"
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "description is the version of the npm module, e.g. 4.17.1"
                                                },
                                                "registry_url": {
                                                   "type": "string",
                                                   "description": "registry_url is an optional value used primarily for private npm registries."
                                                }
                                             }
                                          }
                                       },
                                       "deployed": {
                                          "type": "boolean",
                                          "description": "Indicates if this speciic version is the currently one deployed.",
                                          "default": true
                                       },
                                       "runtime": {
                                          "type": "string",
                                          "description": "The Node runtime. For example: `node12`",
                                          "default": "node12"
                                       },
                                       "secrets": {
                                          "type": "array",
                                          "description": "The list of secrets that are included in an action or a version of an action.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "name": {
                                                   "type": "string",
                                                   "description": "The name of the particular secret, e.g. API_KEY.",
                                                   "default": "mySecret"
                                                },
                                                "updated_at": {
                                                   "type": "string",
                                                   "description": "The time when the secret was last updated.",
                                                   "default": "2021-01-01T00:00:00.000Z"
                                                }
                                             }
                                          }
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The build status of this specific version.",
                                          "default": "built",
                                          "enum": [
                                             "pending",
                                             "building",
                                             "packaged",
                                             "built",
                                             "retrying",
                                             "failed"
                                          ]
                                       },
                                       "number": {
                                          "type": "number",
                                          "description": "The index of this version in list of versions for the action.",
                                          "default": 1
                                       },
                                       "errors": {
                                          "type": "array",
                                          "description": "Any errors that occurred while the version was being built.",
                                          "items": {
                                             "type": "object",
                                             "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
                                             "properties": {
                                                "id": {
                                                   "type": "string"
                                                },
                                                "msg": {
                                                   "type": "string"
                                                },
                                                "url": {
                                                   "type": "string"
                                                }
                                             }
                                          }
                                       },
                                       "action": {
                                          "type": "object",
                                          "description": "The action to which this verison belongs.",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "The unique ID of the action.",
                                                "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of an action.",
                                                "default": "my-action"
                                             },
                                             "supported_triggers": {
                                                "type": "array",
                                                "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "code": {
                                                "type": "string",
                                                "description": "The source code of the action.",
                                                "default": "module.exports = () => {}"
                                             },
                                             "dependencies": {
                                                "type": "array",
                                                "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                                "items": {
                                                   "type": "object",
                                                   "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "name is the name of the npm module, e.g. lodash"
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "description is the version of the npm module, e.g. 4.17.1"
                                                      },
                                                      "registry_url": {
                                                         "type": "string",
                                                         "description": "registry_url is an optional value used primarily for private npm registries."
                                                      }
                                                   }
                                                }
                                             },
                                             "runtime": {
                                                "type": "string",
                                                "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                                "default": "node12"
                                             },
                                             "secrets": {
                                                "type": "array",
                                                "description": "The list of secrets that are included in an action or a version of an action.",
                                                "items": {
                                                   "type": "object",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "The name of the particular secret, e.g. API_KEY.",
                                                         "default": "mySecret"
                                                      },
                                                      "updated_at": {
                                                         "type": "string",
                                                         "description": "The time when the secret was last updated.",
                                                         "default": "2021-01-01T00:00:00.000Z"
                                                      }
                                                   }
                                                }
                                             },
                                             "deployed_version": {
                                                "type": "object",
                                                "description": "The version of the action that is currently deployed.",
                                                "additionalProperties": {}
                                             },
                                             "installed_integration_id": {
                                                "type": "string",
                                                "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                                "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                             },
                                             "integration": {
                                                "type": "object",
                                                "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                                "properties": {
                                                   "id": {
                                                      "type": "string",
                                                      "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                                      "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                                   },
                                                   "catalog_id": {
                                                      "type": "string",
                                                      "description": "catalog_id refers to the ID in the marketplace catalog",
                                                      "default": "awesome-auth0-integration"
                                                   },
                                                   "url_slug": {
                                                      "type": "string",
                                                      "description": "url_slug refers to the url_slug in the marketplace catalog",
                                                      "default": "awesome-auth0-integration-slug"
                                                   },
                                                   "partner_id": {
                                                      "type": "string",
                                                      "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                                      "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                                      "default": "Example Auth0 integration"
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                                      "default": "An awesome Auth0 integration"
                                                   },
                                                   "short_description": {
                                                      "type": "string",
                                                      "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                                      "default": "Awesome Auth0 integration"
                                                   },
                                                   "logo": {
                                                      "type": "string"
                                                   },
                                                   "feature_type": {
                                                      "type": "string",
                                                      "description": "feature_type is the type of the integration.",
                                                      "default": "action",
                                                      "enum": [
                                                         "unspecified",
                                                         "action",
                                                         "social_connection",
                                                         "log_stream",
                                                         "sso_integration",
                                                         "sms_provider"
                                                      ]
                                                   },
                                                   "terms_of_use_url": {
                                                      "type": "string"
                                                   },
                                                   "privacy_policy_url": {
                                                      "type": "string"
                                                   },
                                                   "public_support_link": {
                                                      "type": "string"
                                                   },
                                                   "current_release": {
                                                      "type": "object",
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "The id of the associated IntegrationRelease"
                                                         },
                                                         "trigger": {
                                                            "type": "object",
                                                            "required": [
                                                               "id"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               },
                                                               "status": {
                                                                  "type": "string",
                                                                  "description": "status points to the trigger status."
                                                               },
                                                               "runtimes": {
                                                                  "type": "array",
                                                                  "description": "runtimes supported by this trigger.",
                                                                  "items": {
                                                                     "type": "string"
                                                                  }
                                                               },
                                                               "default_runtime": {
                                                                  "type": "string",
                                                                  "description": "Runtime that will be used when none is specified when creating an action."
                                                               },
                                                               "compatible_triggers": {
                                                                  "type": "array",
                                                                  "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                                  "items": {
                                                                     "type": "object",
                                                                     "required": [
                                                                        "id",
                                                                        "version"
                                                                     ],
                                                                     "properties": {
                                                                        "id": {
                                                                           "type": "string",
                                                                           "description": "An actions extensibility point.",
                                                                           "default": "post-login",
                                                                           "enum": [
                                                                              "post-login",
                                                                              "credentials-exchange",
                                                                              "pre-user-registration",
                                                                              "post-user-registration",
                                                                              "post-change-password",
                                                                              "send-phone-message",
                                                                              "iga-approval",
                                                                              "iga-certification",
                                                                              "iga-fulfillment-assignment",
                                                                              "iga-fulfillment-execution"
                                                                           ]
                                                                        },
                                                                        "version": {
                                                                           "type": "string",
                                                                           "description": "The version of a trigger. v1, v2, etc."
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "semver": {
                                                            "type": "object",
                                                            "description": "Semver denotes the major.minor version of an integration release",
                                                            "properties": {
                                                               "major": {
                                                                  "type": "integer",
                                                                  "description": "Major is the major number of a semver",
                                                                  "default": 1
                                                               },
                                                               "minor": {
                                                                  "type": "integer",
                                                                  "description": "Minior is the minior number of a semver",
                                                                  "default": 1
                                                               }
                                                            }
                                                         },
                                                         "required_secrets": {
                                                            "type": "array",
                                                            "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "required_configuration": {
                                                            "type": "array",
                                                            "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   },
                                                   "created_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   },
                                                   "updated_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   }
                                                }
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "The build status of this action.",
                                                "default": "built",
                                                "enum": [
                                                   "pending",
                                                   "building",
                                                   "packaged",
                                                   "built",
                                                   "retrying",
                                                   "failed"
                                                ]
                                             },
                                             "all_changes_deployed": {
                                                "type": "boolean",
                                                "description": "True if all of an Action's contents have been deployed.",
                                                "default": false
                                             },
                                             "built_at": {
                                                "type": "string",
                                                "description": "The time when this action was built successfully.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "created_at": {
                                                "type": "string",
                                                "description": "The time when this action was created.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when this action was updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       },
                                       "built_at": {
                                          "type": "string",
                                          "description": "The time when this version was built successfully.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "description": "The time when this version was created.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is beiing built.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "supported_triggers": {
                                          "type": "array",
                                          "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                },
                                                "status": {
                                                   "type": "string",
                                                   "description": "status points to the trigger status."
                                                },
                                                "runtimes": {
                                                   "type": "array",
                                                   "description": "runtimes supported by this trigger.",
                                                   "items": {
                                                      "type": "string"
                                                   }
                                                },
                                                "default_runtime": {
                                                   "type": "string",
                                                   "description": "Runtime that will be used when none is specified when creating an action."
                                                },
                                                "compatible_triggers": {
                                                   "type": "array",
                                                   "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                   "items": {
                                                      "type": "object",
                                                      "required": [
                                                         "id",
                                                         "version"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_action_versions",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{actionId}/versions/{id}": {
         "get": {
            "summary": "Get a specific version of an action",
            "description": "Retrieve a specific version of an action. An action version is created whenever\\nan action is deployed. An action version is immutable, once created.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "actionId",
                  "in": "path",
                  "description": "The ID of the action.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of the action version.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The action version was retrieved. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique id of an action version.",
                                 "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
                              },
                              "action_id": {
                                 "type": "string",
                                 "description": "The id of the action to which this version belongs.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of this specific version of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "deployed": {
                                 "type": "boolean",
                                 "description": "Indicates if this speciic version is the currently one deployed.",
                                 "default": true
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this specific version.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "number": {
                                 "type": "number",
                                 "description": "The index of this version in list of versions for the action.",
                                 "default": 1
                              },
                              "errors": {
                                 "type": "array",
                                 "description": "Any errors that occurred while the version was being built.",
                                 "items": {
                                    "type": "object",
                                    "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
                                    "properties": {
                                       "id": {
                                          "type": "string"
                                       },
                                       "msg": {
                                          "type": "string"
                                       },
                                       "url": {
                                          "type": "string"
                                       }
                                    }
                                 }
                              },
                              "action": {
                                 "type": "object",
                                 "description": "The action to which this verison belongs.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The unique ID of the action.",
                                       "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "The name of an action.",
                                       "default": "my-action"
                                    },
                                    "supported_triggers": {
                                       "type": "array",
                                       "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "status points to the trigger status."
                                             },
                                             "runtimes": {
                                                "type": "array",
                                                "description": "runtimes supported by this trigger.",
                                                "items": {
                                                   "type": "string"
                                                }
                                             },
                                             "default_runtime": {
                                                "type": "string",
                                                "description": "Runtime that will be used when none is specified when creating an action."
                                             },
                                             "compatible_triggers": {
                                                "type": "array",
                                                "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id",
                                                      "version"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "code": {
                                       "type": "string",
                                       "description": "The source code of the action.",
                                       "default": "module.exports = () => {}"
                                    },
                                    "dependencies": {
                                       "type": "array",
                                       "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                       "items": {
                                          "type": "object",
                                          "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "name is the name of the npm module, e.g. lodash"
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "description is the version of the npm module, e.g. 4.17.1"
                                             },
                                             "registry_url": {
                                                "type": "string",
                                                "description": "registry_url is an optional value used primarily for private npm registries."
                                             }
                                          }
                                       }
                                    },
                                    "runtime": {
                                       "type": "string",
                                       "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                       "default": "node12"
                                    },
                                    "secrets": {
                                       "type": "array",
                                       "description": "The list of secrets that are included in an action or a version of an action.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "The name of the particular secret, e.g. API_KEY.",
                                                "default": "mySecret"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when the secret was last updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       }
                                    },
                                    "deployed_version": {
                                       "type": "object",
                                       "description": "The version of the action that is currently deployed.",
                                       "additionalProperties": {}
                                    },
                                    "installed_integration_id": {
                                       "type": "string",
                                       "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                       "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                    },
                                    "integration": {
                                       "type": "object",
                                       "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                             "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                          },
                                          "catalog_id": {
                                             "type": "string",
                                             "description": "catalog_id refers to the ID in the marketplace catalog",
                                             "default": "awesome-auth0-integration"
                                          },
                                          "url_slug": {
                                             "type": "string",
                                             "description": "url_slug refers to the url_slug in the marketplace catalog",
                                             "default": "awesome-auth0-integration-slug"
                                          },
                                          "partner_id": {
                                             "type": "string",
                                             "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                             "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                             "default": "Example Auth0 integration"
                                          },
                                          "description": {
                                             "type": "string",
                                             "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                             "default": "An awesome Auth0 integration"
                                          },
                                          "short_description": {
                                             "type": "string",
                                             "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                             "default": "Awesome Auth0 integration"
                                          },
                                          "logo": {
                                             "type": "string"
                                          },
                                          "feature_type": {
                                             "type": "string",
                                             "description": "feature_type is the type of the integration.",
                                             "default": "action",
                                             "enum": [
                                                "unspecified",
                                                "action",
                                                "social_connection",
                                                "log_stream",
                                                "sso_integration",
                                                "sms_provider"
                                             ]
                                          },
                                          "terms_of_use_url": {
                                             "type": "string"
                                          },
                                          "privacy_policy_url": {
                                             "type": "string"
                                          },
                                          "public_support_link": {
                                             "type": "string"
                                          },
                                          "current_release": {
                                             "type": "object",
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "The id of the associated IntegrationRelease"
                                                },
                                                "trigger": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "semver": {
                                                   "type": "object",
                                                   "description": "Semver denotes the major.minor version of an integration release",
                                                   "properties": {
                                                      "major": {
                                                         "type": "integer",
                                                         "description": "Major is the major number of a semver",
                                                         "default": 1
                                                      },
                                                      "minor": {
                                                         "type": "integer",
                                                         "description": "Minior is the minior number of a semver",
                                                         "default": 1
                                                      }
                                                   }
                                                },
                                                "required_secrets": {
                                                   "type": "array",
                                                   "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "required_configuration": {
                                                   "type": "array",
                                                   "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "created_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          },
                                          "updated_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          }
                                       }
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The build status of this action.",
                                       "default": "built",
                                       "enum": [
                                          "pending",
                                          "building",
                                          "packaged",
                                          "built",
                                          "retrying",
                                          "failed"
                                       ]
                                    },
                                    "all_changes_deployed": {
                                       "type": "boolean",
                                       "description": "True if all of an Action's contents have been deployed.",
                                       "default": false
                                    },
                                    "built_at": {
                                       "type": "string",
                                       "description": "The time when this action was built successfully.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "description": "The time when this action was created.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "description": "The time when this action was updated.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    }
                                 }
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this version was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this version was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is beiing built.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "404": {
                  "description": "The action version does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_action_version",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{actionId}/versions/{id}/deploy": {
         "post": {
            "summary": "Roll back to a previous action version",
            "description": "Performs the equivalent of a roll-back of an action to an earlier, specified version. Creates a new, deployed\\naction version that is identical to the specified version. If this action is currently bound to a trigger, the\\nsystem will begin executing the newly-created version immediately.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of an action version.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "actionId",
                  "in": "path",
                  "description": "The ID of an action.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "nullable": true,
                        "oneOf": [
                           {
                              "$ref": "#/components/schemas/draftUpdate"
                           }
                        ]
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "nullable": true,
                        "oneOf": [
                           {
                              "$ref": "#/components/schemas/draftUpdate"
                           }
                        ]
                     }
                  }
               }
            },
            "responses": {
               "202": {
                  "description": "Request to create action version was accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique id of an action version.",
                                 "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
                              },
                              "action_id": {
                                 "type": "string",
                                 "description": "The id of the action to which this version belongs.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of this specific version of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "deployed": {
                                 "type": "boolean",
                                 "description": "Indicates if this speciic version is the currently one deployed.",
                                 "default": true
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this specific version.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "number": {
                                 "type": "number",
                                 "description": "The index of this version in list of versions for the action.",
                                 "default": 1
                              },
                              "errors": {
                                 "type": "array",
                                 "description": "Any errors that occurred while the version was being built.",
                                 "items": {
                                    "type": "object",
                                    "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
                                    "properties": {
                                       "id": {
                                          "type": "string"
                                       },
                                       "msg": {
                                          "type": "string"
                                       },
                                       "url": {
                                          "type": "string"
                                       }
                                    }
                                 }
                              },
                              "action": {
                                 "type": "object",
                                 "description": "The action to which this verison belongs.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The unique ID of the action.",
                                       "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "The name of an action.",
                                       "default": "my-action"
                                    },
                                    "supported_triggers": {
                                       "type": "array",
                                       "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "status points to the trigger status."
                                             },
                                             "runtimes": {
                                                "type": "array",
                                                "description": "runtimes supported by this trigger.",
                                                "items": {
                                                   "type": "string"
                                                }
                                             },
                                             "default_runtime": {
                                                "type": "string",
                                                "description": "Runtime that will be used when none is specified when creating an action."
                                             },
                                             "compatible_triggers": {
                                                "type": "array",
                                                "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id",
                                                      "version"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "code": {
                                       "type": "string",
                                       "description": "The source code of the action.",
                                       "default": "module.exports = () => {}"
                                    },
                                    "dependencies": {
                                       "type": "array",
                                       "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                       "items": {
                                          "type": "object",
                                          "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "name is the name of the npm module, e.g. lodash"
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "description is the version of the npm module, e.g. 4.17.1"
                                             },
                                             "registry_url": {
                                                "type": "string",
                                                "description": "registry_url is an optional value used primarily for private npm registries."
                                             }
                                          }
                                       }
                                    },
                                    "runtime": {
                                       "type": "string",
                                       "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                       "default": "node12"
                                    },
                                    "secrets": {
                                       "type": "array",
                                       "description": "The list of secrets that are included in an action or a version of an action.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "The name of the particular secret, e.g. API_KEY.",
                                                "default": "mySecret"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when the secret was last updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       }
                                    },
                                    "deployed_version": {
                                       "type": "object",
                                       "description": "The version of the action that is currently deployed.",
                                       "additionalProperties": {}
                                    },
                                    "installed_integration_id": {
                                       "type": "string",
                                       "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                       "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                    },
                                    "integration": {
                                       "type": "object",
                                       "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                             "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                          },
                                          "catalog_id": {
                                             "type": "string",
                                             "description": "catalog_id refers to the ID in the marketplace catalog",
                                             "default": "awesome-auth0-integration"
                                          },
                                          "url_slug": {
                                             "type": "string",
                                             "description": "url_slug refers to the url_slug in the marketplace catalog",
                                             "default": "awesome-auth0-integration-slug"
                                          },
                                          "partner_id": {
                                             "type": "string",
                                             "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                             "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                             "default": "Example Auth0 integration"
                                          },
                                          "description": {
                                             "type": "string",
                                             "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                             "default": "An awesome Auth0 integration"
                                          },
                                          "short_description": {
                                             "type": "string",
                                             "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                             "default": "Awesome Auth0 integration"
                                          },
                                          "logo": {
                                             "type": "string"
                                          },
                                          "feature_type": {
                                             "type": "string",
                                             "description": "feature_type is the type of the integration.",
                                             "default": "action",
                                             "enum": [
                                                "unspecified",
                                                "action",
                                                "social_connection",
                                                "log_stream",
                                                "sso_integration",
                                                "sms_provider"
                                             ]
                                          },
                                          "terms_of_use_url": {
                                             "type": "string"
                                          },
                                          "privacy_policy_url": {
                                             "type": "string"
                                          },
                                          "public_support_link": {
                                             "type": "string"
                                          },
                                          "current_release": {
                                             "type": "object",
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "The id of the associated IntegrationRelease"
                                                },
                                                "trigger": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "semver": {
                                                   "type": "object",
                                                   "description": "Semver denotes the major.minor version of an integration release",
                                                   "properties": {
                                                      "major": {
                                                         "type": "integer",
                                                         "description": "Major is the major number of a semver",
                                                         "default": 1
                                                      },
                                                      "minor": {
                                                         "type": "integer",
                                                         "description": "Minior is the minior number of a semver",
                                                         "default": 1
                                                      }
                                                   }
                                                },
                                                "required_secrets": {
                                                   "type": "array",
                                                   "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "required_configuration": {
                                                   "type": "array",
                                                   "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "created_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          },
                                          "updated_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          }
                                       }
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The build status of this action.",
                                       "default": "built",
                                       "enum": [
                                          "pending",
                                          "building",
                                          "packaged",
                                          "built",
                                          "retrying",
                                          "failed"
                                       ]
                                    },
                                    "all_changes_deployed": {
                                       "type": "boolean",
                                       "description": "True if all of an Action's contents have been deployed.",
                                       "default": false
                                    },
                                    "built_at": {
                                       "type": "string",
                                       "description": "The time when this action was built successfully.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "description": "The time when this action was created.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "description": "The time when this action was updated.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    }
                                 }
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this version was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this version was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is beiing built.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Request Body."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: create:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_deploy_draft_version",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{id}": {
         "get": {
            "summary": "Get an action",
            "description": "Retrieve an action by its ID.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of the action to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The action was retrieved. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique ID of the action.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of an action.",
                                 "default": "my-action"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "deployed_version": {
                                 "type": "object",
                                 "description": "The version of the action that is currently deployed.",
                                 "additionalProperties": {}
                              },
                              "installed_integration_id": {
                                 "type": "string",
                                 "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                 "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                              },
                              "integration": {
                                 "type": "object",
                                 "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                       "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                    },
                                    "catalog_id": {
                                       "type": "string",
                                       "description": "catalog_id refers to the ID in the marketplace catalog",
                                       "default": "awesome-auth0-integration"
                                    },
                                    "url_slug": {
                                       "type": "string",
                                       "description": "url_slug refers to the url_slug in the marketplace catalog",
                                       "default": "awesome-auth0-integration-slug"
                                    },
                                    "partner_id": {
                                       "type": "string",
                                       "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                       "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                       "default": "Example Auth0 integration"
                                    },
                                    "description": {
                                       "type": "string",
                                       "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                       "default": "An awesome Auth0 integration"
                                    },
                                    "short_description": {
                                       "type": "string",
                                       "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                       "default": "Awesome Auth0 integration"
                                    },
                                    "logo": {
                                       "type": "string"
                                    },
                                    "feature_type": {
                                       "type": "string",
                                       "description": "feature_type is the type of the integration.",
                                       "default": "action",
                                       "enum": [
                                          "unspecified",
                                          "action",
                                          "social_connection",
                                          "log_stream",
                                          "sso_integration",
                                          "sms_provider"
                                       ]
                                    },
                                    "terms_of_use_url": {
                                       "type": "string"
                                    },
                                    "privacy_policy_url": {
                                       "type": "string"
                                    },
                                    "public_support_link": {
                                       "type": "string"
                                    },
                                    "current_release": {
                                       "type": "object",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "The id of the associated IntegrationRelease"
                                          },
                                          "trigger": {
                                             "type": "object",
                                             "required": [
                                                "id"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                },
                                                "status": {
                                                   "type": "string",
                                                   "description": "status points to the trigger status."
                                                },
                                                "runtimes": {
                                                   "type": "array",
                                                   "description": "runtimes supported by this trigger.",
                                                   "items": {
                                                      "type": "string"
                                                   }
                                                },
                                                "default_runtime": {
                                                   "type": "string",
                                                   "description": "Runtime that will be used when none is specified when creating an action."
                                                },
                                                "compatible_triggers": {
                                                   "type": "array",
                                                   "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                   "items": {
                                                      "type": "object",
                                                      "required": [
                                                         "id",
                                                         "version"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "semver": {
                                             "type": "object",
                                             "description": "Semver denotes the major.minor version of an integration release",
                                             "properties": {
                                                "major": {
                                                   "type": "integer",
                                                   "description": "Major is the major number of a semver",
                                                   "default": 1
                                                },
                                                "minor": {
                                                   "type": "integer",
                                                   "description": "Minior is the minior number of a semver",
                                                   "default": 1
                                                }
                                             }
                                          },
                                          "required_secrets": {
                                             "type": "array",
                                             "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "required_configuration": {
                                             "type": "array",
                                             "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this action.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "all_changes_deployed": {
                                 "type": "boolean",
                                 "description": "True if all of an Action's contents have been deployed.",
                                 "default": false
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this action was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this action was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when this action was updated.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "404": {
                  "description": "The action does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete an action",
            "description": "Deletes an action and all of its associated versions. An action must be unbound from all triggers\\nbefore it can be deleted.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of the action to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "force",
                  "in": "query",
                  "description": "Force action deletion detaching bindings",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Action successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: delete:actions."
               },
               "404": {
                  "description": "The action version does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:actions"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update an action",
            "description": "Update an existing action. If this action is currently bound to a trigger, updating it will <strong>not</strong> affect\\nany user flows until the action is deployed.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the action to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of an action.",
                              "default": "my-action"
                           },
                           "supported_triggers": {
                              "type": "array",
                              "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "id"
                                 ],
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "An actions extensibility point.",
                                       "default": "post-login",
                                       "enum": [
                                          "post-login",
                                          "credentials-exchange",
                                          "pre-user-registration",
                                          "post-user-registration",
                                          "post-change-password",
                                          "send-phone-message",
                                          "iga-approval",
                                          "iga-certification",
                                          "iga-fulfillment-assignment",
                                          "iga-fulfillment-execution"
                                       ]
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "The version of a trigger. v1, v2, etc."
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "status points to the trigger status."
                                    },
                                    "runtimes": {
                                       "type": "array",
                                       "description": "runtimes supported by this trigger.",
                                       "items": {
                                          "type": "string"
                                       }
                                    },
                                    "default_runtime": {
                                       "type": "string",
                                       "description": "Runtime that will be used when none is specified when creating an action."
                                    },
                                    "compatible_triggers": {
                                       "type": "array",
                                       "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id",
                                             "version"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           },
                           "code": {
                              "type": "string",
                              "description": "The source code of the action.",
                              "default": "module.exports = () => {}"
                           },
                           "dependencies": {
                              "type": "array",
                              "description": "The list of third party npm modules, and their versions, that this action depends on.",
                              "items": {
                                 "type": "object",
                                 "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "name is the name of the npm module, e.g. lodash"
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "description is the version of the npm module, e.g. 4.17.1"
                                    },
                                    "registry_url": {
                                       "type": "string",
                                       "description": "registry_url is an optional value used primarily for private npm registries."
                                    }
                                 }
                              }
                           },
                           "runtime": {
                              "type": "string",
                              "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                              "default": "node12"
                           },
                           "secrets": {
                              "type": "array",
                              "description": "The list of secrets that are included in an action or a version of an action.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the particular secret, e.g. API_KEY.",
                                       "default": "mySecret"
                                    },
                                    "value": {
                                       "type": "string",
                                       "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                       "default": "mySecretValue"
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of an action.",
                              "default": "my-action"
                           },
                           "supported_triggers": {
                              "type": "array",
                              "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "id"
                                 ],
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "An actions extensibility point.",
                                       "default": "post-login",
                                       "enum": [
                                          "post-login",
                                          "credentials-exchange",
                                          "pre-user-registration",
                                          "post-user-registration",
                                          "post-change-password",
                                          "send-phone-message",
                                          "iga-approval",
                                          "iga-certification",
                                          "iga-fulfillment-assignment",
                                          "iga-fulfillment-execution"
                                       ]
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "The version of a trigger. v1, v2, etc."
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "status points to the trigger status."
                                    },
                                    "runtimes": {
                                       "type": "array",
                                       "description": "runtimes supported by this trigger.",
                                       "items": {
                                          "type": "string"
                                       }
                                    },
                                    "default_runtime": {
                                       "type": "string",
                                       "description": "Runtime that will be used when none is specified when creating an action."
                                    },
                                    "compatible_triggers": {
                                       "type": "array",
                                       "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id",
                                             "version"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           },
                           "code": {
                              "type": "string",
                              "description": "The source code of the action.",
                              "default": "module.exports = () => {}"
                           },
                           "dependencies": {
                              "type": "array",
                              "description": "The list of third party npm modules, and their versions, that this action depends on.",
                              "items": {
                                 "type": "object",
                                 "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "name is the name of the npm module, e.g. lodash"
                                    },
                                    "version": {
                                       "type": "string",
                                       "description": "description is the version of the npm module, e.g. 4.17.1"
                                    },
                                    "registry_url": {
                                       "type": "string",
                                       "description": "registry_url is an optional value used primarily for private npm registries."
                                    }
                                 }
                              }
                           },
                           "runtime": {
                              "type": "string",
                              "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                              "default": "node12"
                           },
                           "secrets": {
                              "type": "array",
                              "description": "The list of secrets that are included in an action or a version of an action.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the particular secret, e.g. API_KEY.",
                                       "default": "mySecret"
                                    },
                                    "value": {
                                       "type": "string",
                                       "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                       "default": "mySecretValue"
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Action successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique ID of the action.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of an action.",
                                 "default": "my-action"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "deployed_version": {
                                 "type": "object",
                                 "description": "The version of the action that is currently deployed.",
                                 "additionalProperties": {}
                              },
                              "installed_integration_id": {
                                 "type": "string",
                                 "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                 "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                              },
                              "integration": {
                                 "type": "object",
                                 "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                       "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                    },
                                    "catalog_id": {
                                       "type": "string",
                                       "description": "catalog_id refers to the ID in the marketplace catalog",
                                       "default": "awesome-auth0-integration"
                                    },
                                    "url_slug": {
                                       "type": "string",
                                       "description": "url_slug refers to the url_slug in the marketplace catalog",
                                       "default": "awesome-auth0-integration-slug"
                                    },
                                    "partner_id": {
                                       "type": "string",
                                       "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                       "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                       "default": "Example Auth0 integration"
                                    },
                                    "description": {
                                       "type": "string",
                                       "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                       "default": "An awesome Auth0 integration"
                                    },
                                    "short_description": {
                                       "type": "string",
                                       "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                       "default": "Awesome Auth0 integration"
                                    },
                                    "logo": {
                                       "type": "string"
                                    },
                                    "feature_type": {
                                       "type": "string",
                                       "description": "feature_type is the type of the integration.",
                                       "default": "action",
                                       "enum": [
                                          "unspecified",
                                          "action",
                                          "social_connection",
                                          "log_stream",
                                          "sso_integration",
                                          "sms_provider"
                                       ]
                                    },
                                    "terms_of_use_url": {
                                       "type": "string"
                                    },
                                    "privacy_policy_url": {
                                       "type": "string"
                                    },
                                    "public_support_link": {
                                       "type": "string"
                                    },
                                    "current_release": {
                                       "type": "object",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "The id of the associated IntegrationRelease"
                                          },
                                          "trigger": {
                                             "type": "object",
                                             "required": [
                                                "id"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                },
                                                "status": {
                                                   "type": "string",
                                                   "description": "status points to the trigger status."
                                                },
                                                "runtimes": {
                                                   "type": "array",
                                                   "description": "runtimes supported by this trigger.",
                                                   "items": {
                                                      "type": "string"
                                                   }
                                                },
                                                "default_runtime": {
                                                   "type": "string",
                                                   "description": "Runtime that will be used when none is specified when creating an action."
                                                },
                                                "compatible_triggers": {
                                                   "type": "array",
                                                   "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                   "items": {
                                                      "type": "object",
                                                      "required": [
                                                         "id",
                                                         "version"
                                                      ],
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "An actions extensibility point.",
                                                            "default": "post-login",
                                                            "enum": [
                                                               "post-login",
                                                               "credentials-exchange",
                                                               "pre-user-registration",
                                                               "post-user-registration",
                                                               "post-change-password",
                                                               "send-phone-message",
                                                               "iga-approval",
                                                               "iga-certification",
                                                               "iga-fulfillment-assignment",
                                                               "iga-fulfillment-execution"
                                                            ]
                                                         },
                                                         "version": {
                                                            "type": "string",
                                                            "description": "The version of a trigger. v1, v2, etc."
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "semver": {
                                             "type": "object",
                                             "description": "Semver denotes the major.minor version of an integration release",
                                             "properties": {
                                                "major": {
                                                   "type": "integer",
                                                   "description": "Major is the major number of a semver",
                                                   "default": 1
                                                },
                                                "minor": {
                                                   "type": "integer",
                                                   "description": "Minior is the minior number of a semver",
                                                   "default": 1
                                                }
                                             }
                                          },
                                          "required_secrets": {
                                             "type": "array",
                                             "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "required_configuration": {
                                             "type": "array",
                                             "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                             "items": {
                                                "type": "object",
                                                "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                "properties": {
                                                   "type": {
                                                      "type": "string",
                                                      "enum": [
                                                         "UNSPECIFIED",
                                                         "STRING"
                                                      ]
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the parameter."
                                                   },
                                                   "label": {
                                                      "type": "string",
                                                      "description": "The short label for this parameter."
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "The lengthier description for this parameter."
                                                   },
                                                   "default_value": {
                                                      "type": "string",
                                                      "description": "The default value for this parameter."
                                                   },
                                                   "placeholder": {
                                                      "type": "string",
                                                      "description": "Placeholder text for this parameter."
                                                   },
                                                   "options": {
                                                      "type": "array",
                                                      "description": "The allowable options for this param.",
                                                      "items": {
                                                         "type": "object",
                                                         "properties": {
                                                            "value": {
                                                               "type": "string",
                                                               "description": "The value of an option that will be used within the application."
                                                            },
                                                            "label": {
                                                               "type": "string",
                                                               "description": "The display value of an option suitable for displaying in a UI."
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "default": "2021-06-21T15:47:29.072Z"
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this action.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "all_changes_deployed": {
                                 "type": "boolean",
                                 "description": "True if all of an Action's contents have been deployed.",
                                 "default": false
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this action was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this action was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when this action was updated.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Request Body."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: update:actions."
               },
               "404": {
                  "description": "Action not found and cannot be updated."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{id}/deploy": {
         "post": {
            "summary": "Deploy an action",
            "description": "Deploy an action. Deploying an action will create a new immutable version of the action. If the action is\\ncurrently bound to a trigger, then the system will begin executing the newly deployed version of the action immediately. Otherwise, the action will only be executed as a part of a flow once it is bound to that flow.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of an action.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "202": {
                  "description": "Request to create action version was accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The unique id of an action version.",
                                 "default": "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d"
                              },
                              "action_id": {
                                 "type": "string",
                                 "description": "The id of the action to which this version belongs.",
                                 "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                              },
                              "code": {
                                 "type": "string",
                                 "description": "The source code of this specific version of the action.",
                                 "default": "module.exports = () => {}"
                              },
                              "dependencies": {
                                 "type": "array",
                                 "description": "The list of third party npm modules, and their versions, that this specific version depends on. ",
                                 "items": {
                                    "type": "object",
                                    "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "name is the name of the npm module, e.g. lodash"
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "description is the version of the npm module, e.g. 4.17.1"
                                       },
                                       "registry_url": {
                                          "type": "string",
                                          "description": "registry_url is an optional value used primarily for private npm registries."
                                       }
                                    }
                                 }
                              },
                              "deployed": {
                                 "type": "boolean",
                                 "description": "Indicates if this speciic version is the currently one deployed.",
                                 "default": true
                              },
                              "runtime": {
                                 "type": "string",
                                 "description": "The Node runtime. For example: `node12`",
                                 "default": "node12"
                              },
                              "secrets": {
                                 "type": "array",
                                 "description": "The list of secrets that are included in an action or a version of an action.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "name": {
                                          "type": "string",
                                          "description": "The name of the particular secret, e.g. API_KEY.",
                                          "default": "mySecret"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the secret was last updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The build status of this specific version.",
                                 "default": "built",
                                 "enum": [
                                    "pending",
                                    "building",
                                    "packaged",
                                    "built",
                                    "retrying",
                                    "failed"
                                 ]
                              },
                              "number": {
                                 "type": "number",
                                 "description": "The index of this version in list of versions for the action.",
                                 "default": 1
                              },
                              "errors": {
                                 "type": "array",
                                 "description": "Any errors that occurred while the version was being built.",
                                 "items": {
                                    "type": "object",
                                    "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
                                    "properties": {
                                       "id": {
                                          "type": "string"
                                       },
                                       "msg": {
                                          "type": "string"
                                       },
                                       "url": {
                                          "type": "string"
                                       }
                                    }
                                 }
                              },
                              "action": {
                                 "type": "object",
                                 "description": "The action to which this verison belongs.",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The unique ID of the action.",
                                       "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "The name of an action.",
                                       "default": "my-action"
                                    },
                                    "supported_triggers": {
                                       "type": "array",
                                       "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "id"
                                          ],
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "An actions extensibility point.",
                                                "default": "post-login",
                                                "enum": [
                                                   "post-login",
                                                   "credentials-exchange",
                                                   "pre-user-registration",
                                                   "post-user-registration",
                                                   "post-change-password",
                                                   "send-phone-message",
                                                   "iga-approval",
                                                   "iga-certification",
                                                   "iga-fulfillment-assignment",
                                                   "iga-fulfillment-execution"
                                                ]
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "The version of a trigger. v1, v2, etc."
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "status points to the trigger status."
                                             },
                                             "runtimes": {
                                                "type": "array",
                                                "description": "runtimes supported by this trigger.",
                                                "items": {
                                                   "type": "string"
                                                }
                                             },
                                             "default_runtime": {
                                                "type": "string",
                                                "description": "Runtime that will be used when none is specified when creating an action."
                                             },
                                             "compatible_triggers": {
                                                "type": "array",
                                                "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id",
                                                      "version"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    },
                                    "code": {
                                       "type": "string",
                                       "description": "The source code of the action.",
                                       "default": "module.exports = () => {}"
                                    },
                                    "dependencies": {
                                       "type": "array",
                                       "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                       "items": {
                                          "type": "object",
                                          "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "name is the name of the npm module, e.g. lodash"
                                             },
                                             "version": {
                                                "type": "string",
                                                "description": "description is the version of the npm module, e.g. 4.17.1"
                                             },
                                             "registry_url": {
                                                "type": "string",
                                                "description": "registry_url is an optional value used primarily for private npm registries."
                                             }
                                          }
                                       }
                                    },
                                    "runtime": {
                                       "type": "string",
                                       "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                       "default": "node12"
                                    },
                                    "secrets": {
                                       "type": "array",
                                       "description": "The list of secrets that are included in an action or a version of an action.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "The name of the particular secret, e.g. API_KEY.",
                                                "default": "mySecret"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when the secret was last updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       }
                                    },
                                    "deployed_version": {
                                       "type": "object",
                                       "description": "The version of the action that is currently deployed.",
                                       "additionalProperties": {}
                                    },
                                    "installed_integration_id": {
                                       "type": "string",
                                       "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                       "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                    },
                                    "integration": {
                                       "type": "object",
                                       "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                       "properties": {
                                          "id": {
                                             "type": "string",
                                             "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                             "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                          },
                                          "catalog_id": {
                                             "type": "string",
                                             "description": "catalog_id refers to the ID in the marketplace catalog",
                                             "default": "awesome-auth0-integration"
                                          },
                                          "url_slug": {
                                             "type": "string",
                                             "description": "url_slug refers to the url_slug in the marketplace catalog",
                                             "default": "awesome-auth0-integration-slug"
                                          },
                                          "partner_id": {
                                             "type": "string",
                                             "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                             "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                             "default": "Example Auth0 integration"
                                          },
                                          "description": {
                                             "type": "string",
                                             "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                             "default": "An awesome Auth0 integration"
                                          },
                                          "short_description": {
                                             "type": "string",
                                             "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                             "default": "Awesome Auth0 integration"
                                          },
                                          "logo": {
                                             "type": "string"
                                          },
                                          "feature_type": {
                                             "type": "string",
                                             "description": "feature_type is the type of the integration.",
                                             "default": "action",
                                             "enum": [
                                                "unspecified",
                                                "action",
                                                "social_connection",
                                                "log_stream",
                                                "sso_integration",
                                                "sms_provider"
                                             ]
                                          },
                                          "terms_of_use_url": {
                                             "type": "string"
                                          },
                                          "privacy_policy_url": {
                                             "type": "string"
                                          },
                                          "public_support_link": {
                                             "type": "string"
                                          },
                                          "current_release": {
                                             "type": "object",
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "The id of the associated IntegrationRelease"
                                                },
                                                "trigger": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "semver": {
                                                   "type": "object",
                                                   "description": "Semver denotes the major.minor version of an integration release",
                                                   "properties": {
                                                      "major": {
                                                         "type": "integer",
                                                         "description": "Major is the major number of a semver",
                                                         "default": 1
                                                      },
                                                      "minor": {
                                                         "type": "integer",
                                                         "description": "Minior is the minior number of a semver",
                                                         "default": 1
                                                      }
                                                   }
                                                },
                                                "required_secrets": {
                                                   "type": "array",
                                                   "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                },
                                                "required_configuration": {
                                                   "type": "array",
                                                   "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                   "items": {
                                                      "type": "object",
                                                      "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                      "properties": {
                                                         "type": {
                                                            "type": "string",
                                                            "enum": [
                                                               "UNSPECIFIED",
                                                               "STRING"
                                                            ]
                                                         },
                                                         "name": {
                                                            "type": "string",
                                                            "description": "The name of the parameter."
                                                         },
                                                         "label": {
                                                            "type": "string",
                                                            "description": "The short label for this parameter."
                                                         },
                                                         "description": {
                                                            "type": "string",
                                                            "description": "The lengthier description for this parameter."
                                                         },
                                                         "default_value": {
                                                            "type": "string",
                                                            "description": "The default value for this parameter."
                                                         },
                                                         "placeholder": {
                                                            "type": "string",
                                                            "description": "Placeholder text for this parameter."
                                                         },
                                                         "options": {
                                                            "type": "array",
                                                            "description": "The allowable options for this param.",
                                                            "items": {
                                                               "type": "object",
                                                               "properties": {
                                                                  "value": {
                                                                     "type": "string",
                                                                     "description": "The value of an option that will be used within the application."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The display value of an option suitable for displaying in a UI."
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          },
                                          "created_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          },
                                          "updated_at": {
                                             "type": "string",
                                             "default": "2021-06-21T15:47:29.072Z"
                                          }
                                       }
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The build status of this action.",
                                       "default": "built",
                                       "enum": [
                                          "pending",
                                          "building",
                                          "packaged",
                                          "built",
                                          "retrying",
                                          "failed"
                                       ]
                                    },
                                    "all_changes_deployed": {
                                       "type": "boolean",
                                       "description": "True if all of an Action's contents have been deployed.",
                                       "default": false
                                    },
                                    "built_at": {
                                       "type": "string",
                                       "description": "The time when this action was built successfully.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "created_at": {
                                       "type": "string",
                                       "description": "The time when this action was created.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    },
                                    "updated_at": {
                                       "type": "string",
                                       "description": "The time when this action was updated.",
                                       "default": "2021-01-01T00:00:00.000Z"
                                    }
                                 }
                              },
                              "built_at": {
                                 "type": "string",
                                 "description": "The time when this version was built successfully.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time when this version was created.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time when a version was updated. Versions are never updated externally. Only Auth0 will update an action version as it is beiing built.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "supported_triggers": {
                                 "type": "array",
                                 "description": "The list of triggers that this version supports. At this time, a version can only target a single trigger at a time.",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Request Body."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: create:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_deploy_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:actions"
                  ]
               }
            ]
         }
      },
      "/actions/actions/{id}/test": {
         "post": {
            "summary": "Test an Action",
            "description": "Test an action. After updating an action, it can be tested prior to being deployed to ensure it behaves as expected.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the action to test.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "payload"
                        ],
                        "properties": {
                           "payload": {
                              "type": "object",
                              "description": "The payload for the action.",
                              "additionalProperties": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "payload"
                        ],
                        "properties": {
                           "payload": {
                              "type": "object",
                              "description": "The payload for the action.",
                              "additionalProperties": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Test action version successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "payload": {
                                 "type": "object",
                                 "description": "The resulting payload after an action was executed.",
                                 "additionalProperties": {}
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Request Body."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: create:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_test_action",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:actions"
                  ]
               }
            ]
         }
      },
      "/actions/executions/{id}": {
         "get": {
            "summary": "Get an execution",
            "description": "Retrieve information about a specific execution of a trigger. Relevant execution IDs will be included in tenant logs\\ngenerated as part of that authentication flow. Executions will only be stored for 10 days after their creation.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The ID of the execution to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The execution was retrieved. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "description": "The result of a specific execution of a trigger.",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "ID identifies this specific execution simulation. These IDs would resemble real executions in production.",
                                 "default": "c5b35bb1-c67d-40bb-9b0d-700b6fe33dd9"
                              },
                              "trigger_id": {
                                 "type": "string",
                                 "description": "An actions extensibility point.",
                                 "default": "post-login",
                                 "enum": [
                                    "post-login",
                                    "credentials-exchange",
                                    "pre-user-registration",
                                    "post-user-registration",
                                    "post-change-password",
                                    "send-phone-message",
                                    "iga-approval",
                                    "iga-certification",
                                    "iga-fulfillment-assignment",
                                    "iga-fulfillment-execution"
                                 ]
                              },
                              "status": {
                                 "type": "string",
                                 "description": "The overall status of an execution.",
                                 "default": "final",
                                 "enum": [
                                    "unspecified",
                                    "pending",
                                    "final",
                                    "partial",
                                    "canceled",
                                    "suspended"
                                 ]
                              },
                              "results": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "description": "Captures the results of a single action being executed.",
                                    "properties": {
                                       "action_name": {
                                          "type": "string",
                                          "description": "The name of the action that was executed.",
                                          "default": "my-action"
                                       },
                                       "error": {
                                          "type": "object",
                                          "description": "Error is a generic error with a human readable id which should be easily referenced in support tickets.",
                                          "properties": {
                                             "id": {
                                                "type": "string"
                                             },
                                             "msg": {
                                                "type": "string"
                                             },
                                             "url": {
                                                "type": "string"
                                             }
                                          }
                                       },
                                       "started_at": {
                                          "type": "string",
                                          "description": "The time when the action was started.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "ended_at": {
                                          "type": "string",
                                          "description": "The time when the action finished executing.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The time that the execution was started.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "description": "The time that the exeution finished executing.",
                                 "default": "2021-01-01T00:00:00.000Z"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "404": {
                  "description": "The execution does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_execution",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         }
      },
      "/actions/triggers": {
         "get": {
            "summary": "Get triggers",
            "description": "Retrieve the set of triggers currently available within actions. A trigger is an extensibility point to which actions \\ncan be bound.\\n",
            "tags": [
               "actions"
            ],
            "responses": {
               "200": {
                  "description": "The triggers were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "triggers": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "required": [
                                       "id"
                                    ],
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "version": {
                                          "type": "string",
                                          "description": "The version of a trigger. v1, v2, etc."
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status points to the trigger status."
                                       },
                                       "runtimes": {
                                          "type": "array",
                                          "description": "runtimes supported by this trigger.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "default_runtime": {
                                          "type": "string",
                                          "description": "Runtime that will be used when none is specified when creating an action."
                                       },
                                       "compatible_triggers": {
                                          "type": "array",
                                          "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                          "items": {
                                             "type": "object",
                                             "required": [
                                                "id",
                                                "version"
                                             ],
                                             "properties": {
                                                "id": {
                                                   "type": "string",
                                                   "description": "An actions extensibility point.",
                                                   "default": "post-login",
                                                   "enum": [
                                                      "post-login",
                                                      "credentials-exchange",
                                                      "pre-user-registration",
                                                      "post-user-registration",
                                                      "post-change-password",
                                                      "send-phone-message",
                                                      "iga-approval",
                                                      "iga-certification",
                                                      "iga-fulfillment-assignment",
                                                      "iga-fulfillment-execution"
                                                   ]
                                                },
                                                "version": {
                                                   "type": "string",
                                                   "description": "The version of a trigger. v1, v2, etc."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_triggers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         }
      },
      "/actions/triggers/{triggerId}/bindings": {
         "get": {
            "summary": "Get trigger bindings",
            "description": "Retrieve the actions that are bound to a trigger. Once an action is created and deployed, it must be\\nattached (i.e. bound) to a trigger so that it will be executed as part of a flow. The list of actions returned\\nreflects the order in which they will be executed during the appropriate flow.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "triggerId",
                  "in": "path",
                  "description": "An actions extensibility point.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "post-login",
                        "credentials-exchange",
                        "pre-user-registration",
                        "post-user-registration",
                        "post-change-password",
                        "send-phone-message",
                        "iga-approval",
                        "iga-certification",
                        "iga-fulfillment-assignment",
                        "iga-fulfillment-execution"
                     ]
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Use this field to request a specific page of the list results.",
                  "schema": {
                     "type": "number"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "The maximum number of results to be returned in a single request. 20 by default",
                  "schema": {
                     "type": "number"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The bindings were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "total": {
                                 "type": "number",
                                 "description": "The total result count.",
                                 "default": 1
                              },
                              "page": {
                                 "type": "number",
                                 "description": "Page index of the results being returned. First page is 0.",
                                 "default": 0
                              },
                              "per_page": {
                                 "type": "number",
                                 "description": "Number of results per page.",
                                 "default": 20
                              },
                              "bindings": {
                                 "type": "array",
                                 "description": "The list of actions that are bound to this trigger in the order in which they will be executed.",
                                 "items": {
                                    "type": "object",
                                    "description": "Binding is the associative entity joining a trigger, and an action together.",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The unique ID of this binding.",
                                          "default": "4a881e22-0562-4178-bc91-b0f2b321dc13"
                                       },
                                       "trigger_id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "display_name": {
                                          "type": "string",
                                          "description": "The name of the binding.",
                                          "default": "my-action-1"
                                       },
                                       "action": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "The unique ID of the action.",
                                                "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of an action.",
                                                "default": "my-action"
                                             },
                                             "supported_triggers": {
                                                "type": "array",
                                                "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "code": {
                                                "type": "string",
                                                "description": "The source code of the action.",
                                                "default": "module.exports = () => {}"
                                             },
                                             "dependencies": {
                                                "type": "array",
                                                "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                                "items": {
                                                   "type": "object",
                                                   "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "name is the name of the npm module, e.g. lodash"
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "description is the version of the npm module, e.g. 4.17.1"
                                                      },
                                                      "registry_url": {
                                                         "type": "string",
                                                         "description": "registry_url is an optional value used primarily for private npm registries."
                                                      }
                                                   }
                                                }
                                             },
                                             "runtime": {
                                                "type": "string",
                                                "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                                "default": "node12"
                                             },
                                             "secrets": {
                                                "type": "array",
                                                "description": "The list of secrets that are included in an action or a version of an action.",
                                                "items": {
                                                   "type": "object",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "The name of the particular secret, e.g. API_KEY.",
                                                         "default": "mySecret"
                                                      },
                                                      "updated_at": {
                                                         "type": "string",
                                                         "description": "The time when the secret was last updated.",
                                                         "default": "2021-01-01T00:00:00.000Z"
                                                      }
                                                   }
                                                }
                                             },
                                             "deployed_version": {
                                                "type": "object",
                                                "description": "The version of the action that is currently deployed.",
                                                "additionalProperties": {}
                                             },
                                             "installed_integration_id": {
                                                "type": "string",
                                                "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                                "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                             },
                                             "integration": {
                                                "type": "object",
                                                "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                                "properties": {
                                                   "id": {
                                                      "type": "string",
                                                      "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                                      "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                                   },
                                                   "catalog_id": {
                                                      "type": "string",
                                                      "description": "catalog_id refers to the ID in the marketplace catalog",
                                                      "default": "awesome-auth0-integration"
                                                   },
                                                   "url_slug": {
                                                      "type": "string",
                                                      "description": "url_slug refers to the url_slug in the marketplace catalog",
                                                      "default": "awesome-auth0-integration-slug"
                                                   },
                                                   "partner_id": {
                                                      "type": "string",
                                                      "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                                      "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                                      "default": "Example Auth0 integration"
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                                      "default": "An awesome Auth0 integration"
                                                   },
                                                   "short_description": {
                                                      "type": "string",
                                                      "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                                      "default": "Awesome Auth0 integration"
                                                   },
                                                   "logo": {
                                                      "type": "string"
                                                   },
                                                   "feature_type": {
                                                      "type": "string",
                                                      "description": "feature_type is the type of the integration.",
                                                      "default": "action",
                                                      "enum": [
                                                         "unspecified",
                                                         "action",
                                                         "social_connection",
                                                         "log_stream",
                                                         "sso_integration",
                                                         "sms_provider"
                                                      ]
                                                   },
                                                   "terms_of_use_url": {
                                                      "type": "string"
                                                   },
                                                   "privacy_policy_url": {
                                                      "type": "string"
                                                   },
                                                   "public_support_link": {
                                                      "type": "string"
                                                   },
                                                   "current_release": {
                                                      "type": "object",
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "The id of the associated IntegrationRelease"
                                                         },
                                                         "trigger": {
                                                            "type": "object",
                                                            "required": [
                                                               "id"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               },
                                                               "status": {
                                                                  "type": "string",
                                                                  "description": "status points to the trigger status."
                                                               },
                                                               "runtimes": {
                                                                  "type": "array",
                                                                  "description": "runtimes supported by this trigger.",
                                                                  "items": {
                                                                     "type": "string"
                                                                  }
                                                               },
                                                               "default_runtime": {
                                                                  "type": "string",
                                                                  "description": "Runtime that will be used when none is specified when creating an action."
                                                               },
                                                               "compatible_triggers": {
                                                                  "type": "array",
                                                                  "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                                  "items": {
                                                                     "type": "object",
                                                                     "required": [
                                                                        "id",
                                                                        "version"
                                                                     ],
                                                                     "properties": {
                                                                        "id": {
                                                                           "type": "string",
                                                                           "description": "An actions extensibility point.",
                                                                           "default": "post-login",
                                                                           "enum": [
                                                                              "post-login",
                                                                              "credentials-exchange",
                                                                              "pre-user-registration",
                                                                              "post-user-registration",
                                                                              "post-change-password",
                                                                              "send-phone-message",
                                                                              "iga-approval",
                                                                              "iga-certification",
                                                                              "iga-fulfillment-assignment",
                                                                              "iga-fulfillment-execution"
                                                                           ]
                                                                        },
                                                                        "version": {
                                                                           "type": "string",
                                                                           "description": "The version of a trigger. v1, v2, etc."
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "semver": {
                                                            "type": "object",
                                                            "description": "Semver denotes the major.minor version of an integration release",
                                                            "properties": {
                                                               "major": {
                                                                  "type": "integer",
                                                                  "description": "Major is the major number of a semver",
                                                                  "default": 1
                                                               },
                                                               "minor": {
                                                                  "type": "integer",
                                                                  "description": "Minior is the minior number of a semver",
                                                                  "default": 1
                                                               }
                                                            }
                                                         },
                                                         "required_secrets": {
                                                            "type": "array",
                                                            "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "required_configuration": {
                                                            "type": "array",
                                                            "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   },
                                                   "created_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   },
                                                   "updated_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   }
                                                }
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "The build status of this action.",
                                                "default": "built",
                                                "enum": [
                                                   "pending",
                                                   "building",
                                                   "packaged",
                                                   "built",
                                                   "retrying",
                                                   "failed"
                                                ]
                                             },
                                             "all_changes_deployed": {
                                                "type": "boolean",
                                                "description": "True if all of an Action's contents have been deployed.",
                                                "default": false
                                             },
                                             "built_at": {
                                                "type": "string",
                                                "description": "The time when this action was built successfully.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "created_at": {
                                                "type": "string",
                                                "description": "The time when this action was created.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when this action was updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "description": "The time when the binding was created.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the binding was updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: read:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_bindings",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:actions"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update trigger bindings",
            "description": "Update the actions that are bound (i.e. attached) to a trigger. Once an action is created and deployed, it must be\\nattached (i.e. bound) to a trigger so that it will be executed as part of a flow. The order in which the actions are\\nprovided will determine the order in which they are executed.\\n",
            "tags": [
               "actions"
            ],
            "parameters": [
               {
                  "name": "triggerId",
                  "in": "path",
                  "description": "An actions extensibility point.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "post-login",
                        "credentials-exchange",
                        "pre-user-registration",
                        "post-user-registration",
                        "post-change-password",
                        "send-phone-message",
                        "iga-approval",
                        "iga-certification",
                        "iga-fulfillment-assignment",
                        "iga-fulfillment-execution"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "bindings": {
                              "type": "array",
                              "description": "The actions that will be bound to this trigger. The order in which they are included will be the order in which they are executed.",
                              "items": {
                                 "oneOf": [
                                    {
                                       "type": "object",
                                       "required": [
                                          "ref"
                                       ],
                                       "properties": {
                                          "ref": {
                                             "type": "object",
                                             "description": "A reference to an action. An action can be referred to by ID or by Name.",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "How the action is being referred to: `action_id` or `action_name`.",
                                                   "default": "action_name",
                                                   "enum": [
                                                      "binding_id",
                                                      "action_id",
                                                      "action_name"
                                                   ]
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "The id or name of an action that is being bound to a trigger.",
                                                   "default": "my-action"
                                                }
                                             }
                                          },
                                          "display_name": {
                                             "type": "string",
                                             "description": "The name of the binding.",
                                             "default": "my-action-1"
                                          },
                                          "secrets": {
                                             "type": "array",
                                             "description": "The list of secrets that are included in an action or a version of an action.",
                                             "items": {
                                                "type": "object",
                                                "properties": {
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the particular secret, e.g. API_KEY.",
                                                      "default": "mySecret"
                                                   },
                                                   "value": {
                                                      "type": "string",
                                                      "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                                      "default": "mySecretValue"
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 ]
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "bindings": {
                              "type": "array",
                              "description": "The actions that will be bound to this trigger. The order in which they are included will be the order in which they are executed.",
                              "items": {
                                 "oneOf": [
                                    {
                                       "type": "object",
                                       "required": [
                                          "ref"
                                       ],
                                       "properties": {
                                          "ref": {
                                             "type": "object",
                                             "description": "A reference to an action. An action can be referred to by ID or by Name.",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "How the action is being referred to: `action_id` or `action_name`.",
                                                   "default": "action_name",
                                                   "enum": [
                                                      "binding_id",
                                                      "action_id",
                                                      "action_name"
                                                   ]
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "The id or name of an action that is being bound to a trigger.",
                                                   "default": "my-action"
                                                }
                                             }
                                          },
                                          "display_name": {
                                             "type": "string",
                                             "description": "The name of the binding.",
                                             "default": "my-action-1"
                                          },
                                          "secrets": {
                                             "type": "array",
                                             "description": "The list of secrets that are included in an action or a version of an action.",
                                             "items": {
                                                "type": "object",
                                                "properties": {
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the particular secret, e.g. API_KEY.",
                                                      "default": "mySecret"
                                                   },
                                                   "value": {
                                                      "type": "string",
                                                      "description": "The value of the particular secret, e.g. secret123. A secret's value can only be set upon creation. A secret's value will never be returned by the API.",
                                                      "default": "mySecretValue"
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 ]
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "The bindings were updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "bindings": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "description": "Binding is the associative entity joining a trigger, and an action together.",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The unique ID of this binding.",
                                          "default": "4a881e22-0562-4178-bc91-b0f2b321dc13"
                                       },
                                       "trigger_id": {
                                          "type": "string",
                                          "description": "An actions extensibility point.",
                                          "default": "post-login",
                                          "enum": [
                                             "post-login",
                                             "credentials-exchange",
                                             "pre-user-registration",
                                             "post-user-registration",
                                             "post-change-password",
                                             "send-phone-message",
                                             "iga-approval",
                                             "iga-certification",
                                             "iga-fulfillment-assignment",
                                             "iga-fulfillment-execution"
                                          ]
                                       },
                                       "display_name": {
                                          "type": "string",
                                          "description": "The name of the binding.",
                                          "default": "my-action-1"
                                       },
                                       "action": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "The unique ID of the action.",
                                                "default": "910b1053-577f-4d81-a8c8-020e7319a38a"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of an action.",
                                                "default": "my-action"
                                             },
                                             "supported_triggers": {
                                                "type": "array",
                                                "description": "The list of triggers that this action supports. At this time, an action can only target a single trigger at a time.",
                                                "items": {
                                                   "type": "object",
                                                   "required": [
                                                      "id"
                                                   ],
                                                   "properties": {
                                                      "id": {
                                                         "type": "string",
                                                         "description": "An actions extensibility point.",
                                                         "default": "post-login",
                                                         "enum": [
                                                            "post-login",
                                                            "credentials-exchange",
                                                            "pre-user-registration",
                                                            "post-user-registration",
                                                            "post-change-password",
                                                            "send-phone-message",
                                                            "iga-approval",
                                                            "iga-certification",
                                                            "iga-fulfillment-assignment",
                                                            "iga-fulfillment-execution"
                                                         ]
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "The version of a trigger. v1, v2, etc."
                                                      },
                                                      "status": {
                                                         "type": "string",
                                                         "description": "status points to the trigger status."
                                                      },
                                                      "runtimes": {
                                                         "type": "array",
                                                         "description": "runtimes supported by this trigger.",
                                                         "items": {
                                                            "type": "string"
                                                         }
                                                      },
                                                      "default_runtime": {
                                                         "type": "string",
                                                         "description": "Runtime that will be used when none is specified when creating an action."
                                                      },
                                                      "compatible_triggers": {
                                                         "type": "array",
                                                         "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                         "items": {
                                                            "type": "object",
                                                            "required": [
                                                               "id",
                                                               "version"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "code": {
                                                "type": "string",
                                                "description": "The source code of the action.",
                                                "default": "module.exports = () => {}"
                                             },
                                             "dependencies": {
                                                "type": "array",
                                                "description": "The list of third party npm modules, and their versions, that this action depends on.",
                                                "items": {
                                                   "type": "object",
                                                   "description": "Dependency is an npm module. These values are used to produce an immutable artifact, which manifests as a layer_id.",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "name is the name of the npm module, e.g. lodash"
                                                      },
                                                      "version": {
                                                         "type": "string",
                                                         "description": "description is the version of the npm module, e.g. 4.17.1"
                                                      },
                                                      "registry_url": {
                                                         "type": "string",
                                                         "description": "registry_url is an optional value used primarily for private npm registries."
                                                      }
                                                   }
                                                }
                                             },
                                             "runtime": {
                                                "type": "string",
                                                "description": "The Node runtime. For example: `node12`, defaults to `node12`",
                                                "default": "node12"
                                             },
                                             "secrets": {
                                                "type": "array",
                                                "description": "The list of secrets that are included in an action or a version of an action.",
                                                "items": {
                                                   "type": "object",
                                                   "properties": {
                                                      "name": {
                                                         "type": "string",
                                                         "description": "The name of the particular secret, e.g. API_KEY.",
                                                         "default": "mySecret"
                                                      },
                                                      "updated_at": {
                                                         "type": "string",
                                                         "description": "The time when the secret was last updated.",
                                                         "default": "2021-01-01T00:00:00.000Z"
                                                      }
                                                   }
                                                }
                                             },
                                             "deployed_version": {
                                                "type": "object",
                                                "description": "The version of the action that is currently deployed.",
                                                "additionalProperties": {}
                                             },
                                             "installed_integration_id": {
                                                "type": "string",
                                                "description": "installed_integration_id is the fk reference to the InstalledIntegration entity.",
                                                "default": "7d2bc0c9-c0c2-433a-9f4e-86ef80270aad"
                                             },
                                             "integration": {
                                                "type": "object",
                                                "description": "Integration defines a self contained functioning unit which partners\\npublish. A partner may create one or many of these integrations.",
                                                "properties": {
                                                   "id": {
                                                      "type": "string",
                                                      "description": "id is a system generated GUID. This same ID is designed to be federated in\\nall the applicable localities.",
                                                      "default": "8e9fe2d0-a2fc-4c8c-9e35-dae5afadb70b"
                                                   },
                                                   "catalog_id": {
                                                      "type": "string",
                                                      "description": "catalog_id refers to the ID in the marketplace catalog",
                                                      "default": "awesome-auth0-integration"
                                                   },
                                                   "url_slug": {
                                                      "type": "string",
                                                      "description": "url_slug refers to the url_slug in the marketplace catalog",
                                                      "default": "awesome-auth0-integration-slug"
                                                   },
                                                   "partner_id": {
                                                      "type": "string",
                                                      "description": "partner_id is the foreign key reference to the partner account this\\nintegration belongs to.",
                                                      "default": "b8575c12-8d9d-4b5c-b28e-671fe9d39029"
                                                   },
                                                   "name": {
                                                      "type": "string",
                                                      "description": "name is the integration name, which will be used for display purposes in\\nthe marketplace.\\n\\nTo start we're going to make sure the display name is at least 3\\ncharacters. Can adjust this easily later.",
                                                      "default": "Example Auth0 integration"
                                                   },
                                                   "description": {
                                                      "type": "string",
                                                      "description": "description adds more text for the integration name -- also relevant for\\nthe marketplace listing.",
                                                      "default": "An awesome Auth0 integration"
                                                   },
                                                   "short_description": {
                                                      "type": "string",
                                                      "description": "short_description is the brief description of the integration, which is used for display purposes in cards",
                                                      "default": "Awesome Auth0 integration"
                                                   },
                                                   "logo": {
                                                      "type": "string"
                                                   },
                                                   "feature_type": {
                                                      "type": "string",
                                                      "description": "feature_type is the type of the integration.",
                                                      "default": "action",
                                                      "enum": [
                                                         "unspecified",
                                                         "action",
                                                         "social_connection",
                                                         "log_stream",
                                                         "sso_integration",
                                                         "sms_provider"
                                                      ]
                                                   },
                                                   "terms_of_use_url": {
                                                      "type": "string"
                                                   },
                                                   "privacy_policy_url": {
                                                      "type": "string"
                                                   },
                                                   "public_support_link": {
                                                      "type": "string"
                                                   },
                                                   "current_release": {
                                                      "type": "object",
                                                      "properties": {
                                                         "id": {
                                                            "type": "string",
                                                            "description": "The id of the associated IntegrationRelease"
                                                         },
                                                         "trigger": {
                                                            "type": "object",
                                                            "required": [
                                                               "id"
                                                            ],
                                                            "properties": {
                                                               "id": {
                                                                  "type": "string",
                                                                  "description": "An actions extensibility point.",
                                                                  "default": "post-login",
                                                                  "enum": [
                                                                     "post-login",
                                                                     "credentials-exchange",
                                                                     "pre-user-registration",
                                                                     "post-user-registration",
                                                                     "post-change-password",
                                                                     "send-phone-message",
                                                                     "iga-approval",
                                                                     "iga-certification",
                                                                     "iga-fulfillment-assignment",
                                                                     "iga-fulfillment-execution"
                                                                  ]
                                                               },
                                                               "version": {
                                                                  "type": "string",
                                                                  "description": "The version of a trigger. v1, v2, etc."
                                                               },
                                                               "status": {
                                                                  "type": "string",
                                                                  "description": "status points to the trigger status."
                                                               },
                                                               "runtimes": {
                                                                  "type": "array",
                                                                  "description": "runtimes supported by this trigger.",
                                                                  "items": {
                                                                     "type": "string"
                                                                  }
                                                               },
                                                               "default_runtime": {
                                                                  "type": "string",
                                                                  "description": "Runtime that will be used when none is specified when creating an action."
                                                               },
                                                               "compatible_triggers": {
                                                                  "type": "array",
                                                                  "description": "compatible_triggers informs which other trigger supports the same event and api.",
                                                                  "items": {
                                                                     "type": "object",
                                                                     "required": [
                                                                        "id",
                                                                        "version"
                                                                     ],
                                                                     "properties": {
                                                                        "id": {
                                                                           "type": "string",
                                                                           "description": "An actions extensibility point.",
                                                                           "default": "post-login",
                                                                           "enum": [
                                                                              "post-login",
                                                                              "credentials-exchange",
                                                                              "pre-user-registration",
                                                                              "post-user-registration",
                                                                              "post-change-password",
                                                                              "send-phone-message",
                                                                              "iga-approval",
                                                                              "iga-certification",
                                                                              "iga-fulfillment-assignment",
                                                                              "iga-fulfillment-execution"
                                                                           ]
                                                                        },
                                                                        "version": {
                                                                           "type": "string",
                                                                           "description": "The version of a trigger. v1, v2, etc."
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "semver": {
                                                            "type": "object",
                                                            "description": "Semver denotes the major.minor version of an integration release",
                                                            "properties": {
                                                               "major": {
                                                                  "type": "integer",
                                                                  "description": "Major is the major number of a semver",
                                                                  "default": 1
                                                               },
                                                               "minor": {
                                                                  "type": "integer",
                                                                  "description": "Minior is the minior number of a semver",
                                                                  "default": 1
                                                               }
                                                            }
                                                         },
                                                         "required_secrets": {
                                                            "type": "array",
                                                            "description": "required_secrets declares all the necessary secrets for an integration to\\nwork.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         },
                                                         "required_configuration": {
                                                            "type": "array",
                                                            "description": "required_configuration declares all the necessary configuration fields for an integration to work.",
                                                            "items": {
                                                               "type": "object",
                                                               "description": "Param are form input values, primarily utilized when specifying secrets and\\nconfiguration values for actions.\\n\\nThese are especially important for partner integrations -- but can be\\nexposed to tenant admins as well if they want to parameterize their custom\\nactions.",
                                                               "properties": {
                                                                  "type": {
                                                                     "type": "string",
                                                                     "enum": [
                                                                        "UNSPECIFIED",
                                                                        "STRING"
                                                                     ]
                                                                  },
                                                                  "name": {
                                                                     "type": "string",
                                                                     "description": "The name of the parameter."
                                                                  },
                                                                  "label": {
                                                                     "type": "string",
                                                                     "description": "The short label for this parameter."
                                                                  },
                                                                  "description": {
                                                                     "type": "string",
                                                                     "description": "The lengthier description for this parameter."
                                                                  },
                                                                  "default_value": {
                                                                     "type": "string",
                                                                     "description": "The default value for this parameter."
                                                                  },
                                                                  "placeholder": {
                                                                     "type": "string",
                                                                     "description": "Placeholder text for this parameter."
                                                                  },
                                                                  "options": {
                                                                     "type": "array",
                                                                     "description": "The allowable options for this param.",
                                                                     "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                           "value": {
                                                                              "type": "string",
                                                                              "description": "The value of an option that will be used within the application."
                                                                           },
                                                                           "label": {
                                                                              "type": "string",
                                                                              "description": "The display value of an option suitable for displaying in a UI."
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   },
                                                   "created_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   },
                                                   "updated_at": {
                                                      "type": "string",
                                                      "default": "2021-06-21T15:47:29.072Z"
                                                   }
                                                }
                                             },
                                             "status": {
                                                "type": "string",
                                                "description": "The build status of this action.",
                                                "default": "built",
                                                "enum": [
                                                   "pending",
                                                   "building",
                                                   "packaged",
                                                   "built",
                                                   "retrying",
                                                   "failed"
                                                ]
                                             },
                                             "all_changes_deployed": {
                                                "type": "boolean",
                                                "description": "True if all of an Action's contents have been deployed.",
                                                "default": false
                                             },
                                             "built_at": {
                                                "type": "string",
                                                "description": "The time when this action was built successfully.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "created_at": {
                                                "type": "string",
                                                "description": "The time when this action was created.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             },
                                             "updated_at": {
                                                "type": "string",
                                                "description": "The time when this action was updated.",
                                                "default": "2021-01-01T00:00:00.000Z"
                                             }
                                          }
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "description": "The time when the binding was created.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "description": "The time when the binding was updated.",
                                          "default": "2021-01-01T00:00:00.000Z"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: update:actions."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_bindings",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:actions"
                  ]
               }
            ]
         }
      },
      "/admin/tenants/{id}/settings": {
         "patch": {
            "summary": "Update tenant settings",
            "description": "Update settings for a tenant.",
            "tags": [
               "admin"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the tenant to patch.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "change_password": {
                              "type": "object",
                              "nullable": true,
                              "description": "Change Password page customization.",
                              "properties": {
                                 "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                                    "default": false
                                 },
                                 "html": {
                                    "type": "string",
                                    "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                                    "default": ""
                                 }
                              }
                           },
                           "device_flow": {
                              "type": "object",
                              "nullable": true,
                              "description": "Device Flow configuration.",
                              "properties": {
                                 "charset": {
                                    "type": "string",
                                    "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                                    "default": "base20",
                                    "enum": [
                                       "base20",
                                       "digits"
                                    ]
                                 },
                                 "mask": {
                                    "type": "string",
                                    "description": "Mask used to format a generated User Code into a friendly, readable format.",
                                    "default": "****-****"
                                 }
                              }
                           },
                           "guardian_mfa_page": {
                              "type": "object",
                              "nullable": true,
                              "description": "Guardian page customization.",
                              "properties": {
                                 "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                                    "default": false
                                 },
                                 "html": {
                                    "type": "string",
                                    "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                                    "default": ""
                                 }
                              }
                           },
                           "default_audience": {
                              "type": "string",
                              "description": "Default audience for API Authorization.",
                              "default": ""
                           },
                           "default_directory": {
                              "type": "string",
                              "description": "Name of connection used for password grants at the `/token` endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
                              "default": ""
                           },
                           "error_page": {
                              "type": "object",
                              "nullable": true,
                              "description": "Error page customization.",
                              "properties": {
                                 "html": {
                                    "type": "string",
                                    "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                                    "default": ""
                                 },
                                 "show_log_link": {
                                    "type": "boolean",
                                    "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                                    "default": false
                                 },
                                 "url": {
                                    "type": "string",
                                    "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                                    "default": "https://mycompany.org/error"
                                 }
                              }
                           },
                           "flags": {
                              "type": "object",
                              "description": "Flags used to change the behavior of this tenant.",
                              "properties": {
                                 "change_pwd_flow_v1": {
                                    "type": "boolean",
                                    "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                                    "enum": [
                                       false
                                    ]
                                 },
                                 "enable_client_connections": {
                                    "type": "boolean",
                                    "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false)."
                                 },
                                 "enable_apis_section": {
                                    "type": "boolean",
                                    "description": "Whether the APIs section is enabled (true) or disabled (false)."
                                 },
                                 "enable_pipeline2": {
                                    "type": "boolean",
                                    "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false)."
                                 },
                                 "enable_dynamic_client_registration": {
                                    "type": "boolean",
                                    "description": " Whether third-party developers can <a href='https://auth0.com/docs/api-auth/dynamic-client-registration'>dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration."
                                 },
                                 "enable_custom_domain_in_emails": {
                                    "type": "boolean",
                                    "description": "Whether emails sent by Auth0 for change password, verification etc. should use your verified custom domain (true) or your auth0.com sub-domain (false).  Affects all emails, links, and URLs. Email will fail if the custom domain is not verified."
                                 },
                                 "allow_legacy_tokeninfo_endpoint": {
                                    "type": "boolean",
                                    "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
                                 },
                                 "enable_legacy_profile": {
                                    "type": "boolean",
                                    "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
                                 },
                                 "enable_idtoken_api2": {
                                    "type": "boolean",
                                    "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
                                 },
                                 "enable_public_signup_user_exists_error": {
                                    "type": "boolean",
                                    "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
                                 },
                                 "allow_legacy_delegation_grant_types": {
                                    "type": "boolean",
                                    "description": " Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false)."
                                 },
                                 "allow_legacy_ro_grant_types": {
                                    "type": "boolean",
                                    "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false)."
                                 },
                                 "enable_sso": {
                                    "type": "boolean",
                                    "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
                                 },
                                 "disable_clickjack_protection_headers": {
                                    "type": "boolean",
                                    "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
                                 },
                                 "no_disclose_enterprise_connections": {
                                    "type": "boolean",
                                    "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
                                 },
                                 "disable_management_api_sms_obfuscation": {
                                    "type": "boolean",
                                    "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls."
                                 },
                                 "enforce_client_authentication_on_passwordless_start": {
                                    "type": "boolean",
                                    "description": "Enforce client authentication for passwordless start"
                                 },
                                 "trust_azure_adfs_email_verified_connection_property": {
                                    "type": "boolean",
                                    "description": "Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise."
                                 },
                                 "enable_adfs_waad_email_verification": {
                                    "type": "boolean",
                                    "description": "Enables the email verification flow during login for Azure AD and ADFS connections"
                                 },
                                 "revoke_refresh_token_grant": {
                                    "type": "boolean",
                                    "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
                                 },
                                 "dashboard_log_streams_next": {
                                    "type": "boolean",
                                    "description": "Enables beta access to log streaming changes"
                                 },
                                 "dashboard_insights_view": {
                                    "type": "boolean",
                                    "description": "Enables new insights activity page view"
                                 },
                                 "disable_fields_map_fix": {
                                    "type": "boolean",
                                    "description": "Disables SAML fields map fix for bad mappings with repeated attributes"
                                 }
                              }
                           },
                           "friendly_name": {
                              "type": "string",
                              "description": "Friendly name for this tenant.",
                              "default": "My Company"
                           },
                           "picture_url": {
                              "type": "string",
                              "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
                              "default": "https://mycompany.org/logo.png"
                           },
                           "support_email": {
                              "type": "string",
                              "description": "End-user support email.",
                              "default": "support@mycompany.org"
                           },
                           "support_url": {
                              "type": "string",
                              "description": "End-user support url.",
                              "default": "https://mycompany.org/support"
                           },
                           "allowed_logout_urls": {
                              "type": "array",
                              "description": "URLs that are valid to redirect to after logout from Auth0.",
                              "items": {
                                 "type": "string"
                              }
                           },
                           "session_lifetime": {
                              "type": "integer",
                              "description": "Number of hours a session will stay valid.",
                              "default": 168
                           },
                           "idle_session_lifetime": {
                              "type": "integer",
                              "description": "Number of hours for which a session can be inactive before the user must log in again.",
                              "default": 72
                           },
                           "sandbox_version": {
                              "type": "string",
                              "description": "Selected sandbox version for the extensibility environment",
                              "default": "12",
                              "maxLength": 8
                           },
                           "default_redirection_uri": {
                              "type": "string",
                              "description": "The default absolute redirection uri, must be https"
                           },
                           "enabled_locales": {
                              "type": "array",
                              "description": "Supported locales for the user interface",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "ar",
                                    "bg",
                                    "bs",
                                    "cs",
                                    "da",
                                    "de",
                                    "el",
                                    "en",
                                    "es",
                                    "et",
                                    "fi",
                                    "fr",
                                    "fr-CA",
                                    "fr-FR",
                                    "he",
                                    "hi",
                                    "hr",
                                    "hu",
                                    "id",
                                    "is",
                                    "it",
                                    "ja",
                                    "ko",
                                    "lt",
                                    "lv",
                                    "nb",
                                    "nl",
                                    "pl",
                                    "pt",
                                    "pt-BR",
                                    "pt-PT",
                                    "ro",
                                    "ru",
                                    "sk",
                                    "sl",
                                    "sr",
                                    "sv",
                                    "th",
                                    "tr",
                                    "uk",
                                    "vi",
                                    "zh-CN",
                                    "zh-TW"
                                 ]
                              }
                           },
                           "session_cookie": {
                              "type": "object",
                              "nullable": true,
                              "description": "Session cookie configuration",
                              "required": [
                                 "mode"
                              ],
                              "properties": {
                                 "mode": {
                                    "type": "string",
                                    "description": "Behavior of the session cookie",
                                    "default": "persistent",
                                    "enum": [
                                       "persistent",
                                       "non-persistent"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "change_password": {
                              "type": "object",
                              "nullable": true,
                              "description": "Change Password page customization.",
                              "properties": {
                                 "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to use the custom change password HTML (true) or the default Auth0 page (false). Default is to use the Auth0 page.",
                                    "default": false
                                 },
                                 "html": {
                                    "type": "string",
                                    "description": "Custom change password HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> supported).",
                                    "default": ""
                                 }
                              }
                           },
                           "device_flow": {
                              "type": "object",
                              "nullable": true,
                              "description": "Device Flow configuration.",
                              "properties": {
                                 "charset": {
                                    "type": "string",
                                    "description": "Character set used to generate a User Code. Can be `base20` or `digits`.",
                                    "default": "base20",
                                    "enum": [
                                       "base20",
                                       "digits"
                                    ]
                                 },
                                 "mask": {
                                    "type": "string",
                                    "description": "Mask used to format a generated User Code into a friendly, readable format.",
                                    "default": "****-****"
                                 }
                              }
                           },
                           "guardian_mfa_page": {
                              "type": "object",
                              "nullable": true,
                              "description": "Guardian page customization.",
                              "properties": {
                                 "enabled": {
                                    "type": "boolean",
                                    "description": "Whether to use the custom Guardian HTML (true) or the default Auth0 page (false, default)",
                                    "default": false
                                 },
                                 "html": {
                                    "type": "string",
                                    "description": " Custom Guardian HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                                    "default": ""
                                 }
                              }
                           },
                           "default_audience": {
                              "type": "string",
                              "description": "Default audience for API Authorization.",
                              "default": ""
                           },
                           "default_directory": {
                              "type": "string",
                              "description": "Name of connection used for password grants at the `/token` endpoint. The following connection types are supported: LDAP, AD, Database Connections, Passwordless, Windows Azure Active Directory, ADFS.",
                              "default": ""
                           },
                           "error_page": {
                              "type": "object",
                              "nullable": true,
                              "description": "Error page customization.",
                              "properties": {
                                 "html": {
                                    "type": "string",
                                    "description": "Custom Error HTML (<a href='https://github.com/Shopify/liquid/wiki/Liquid-for-Designers'>Liquid syntax</a> is supported).",
                                    "default": ""
                                 },
                                 "show_log_link": {
                                    "type": "boolean",
                                    "description": "Whether to show the link to log as part of the default error page (true, default) or not to show the link (false).",
                                    "default": false
                                 },
                                 "url": {
                                    "type": "string",
                                    "description": "URL to redirect to when an error occurs instead of showing the default error page.",
                                    "default": "https://mycompany.org/error"
                                 }
                              }
                           },
                           "flags": {
                              "type": "object",
                              "description": "Flags used to change the behavior of this tenant.",
                              "properties": {
                                 "change_pwd_flow_v1": {
                                    "type": "boolean",
                                    "description": "Whether to use the older v1 change password flow (true, not recommended except for backward compatibility) or the newer safer flow (false, recommended).",
                                    "enum": [
                                       false
                                    ]
                                 },
                                 "enable_client_connections": {
                                    "type": "boolean",
                                    "description": "Whether all current connections should be enabled when a new client (application) is created (true, default) or not (false)."
                                 },
                                 "enable_apis_section": {
                                    "type": "boolean",
                                    "description": "Whether the APIs section is enabled (true) or disabled (false)."
                                 },
                                 "enable_pipeline2": {
                                    "type": "boolean",
                                    "description": "Whether advanced API Authorization scenarios are enabled (true) or disabled (false)."
                                 },
                                 "enable_dynamic_client_registration": {
                                    "type": "boolean",
                                    "description": " Whether third-party developers can <a href='https://auth0.com/docs/api-auth/dynamic-client-registration'>dynamically register</a> applications for your APIs (true) or not (false). This flag enables dynamic client registration."
                                 },
                                 "enable_custom_domain_in_emails": {
                                    "type": "boolean",
                                    "description": "Whether emails sent by Auth0 for change password, verification etc. should use your verified custom domain (true) or your auth0.com sub-domain (false).  Affects all emails, links, and URLs. Email will fail if the custom domain is not verified."
                                 },
                                 "allow_legacy_tokeninfo_endpoint": {
                                    "type": "boolean",
                                    "description": "Whether the legacy `/tokeninfo` endpoint is enabled for your account (true) or unavailable (false)."
                                 },
                                 "enable_legacy_profile": {
                                    "type": "boolean",
                                    "description": "Whether ID tokens and the userinfo endpoint includes a complete user profile (true) or only OpenID Connect claims (false)."
                                 },
                                 "enable_idtoken_api2": {
                                    "type": "boolean",
                                    "description": "Whether ID tokens can be used to authorize some types of requests to API v2 (true) not not (false)."
                                 },
                                 "enable_public_signup_user_exists_error": {
                                    "type": "boolean",
                                    "description": "Whether the public sign up process shows a user_exists error (true) or a generic error (false) if the user already exists."
                                 },
                                 "allow_legacy_delegation_grant_types": {
                                    "type": "boolean",
                                    "description": " Whether the legacy delegation endpoint will be enabled for your account (true) or not available (false)."
                                 },
                                 "allow_legacy_ro_grant_types": {
                                    "type": "boolean",
                                    "description": "Whether the legacy `auth/ro` endpoint (used with resource owner password and passwordless features) will be enabled for your account (true) or not available (false)."
                                 },
                                 "enable_sso": {
                                    "type": "boolean",
                                    "description": "Whether users are prompted to confirm log in before SSO redirection (false) or are not prompted (true)."
                                 },
                                 "disable_clickjack_protection_headers": {
                                    "type": "boolean",
                                    "description": "Whether classic Universal Login prompts include additional security headers to prevent clickjacking (true) or no safeguard (false)."
                                 },
                                 "no_disclose_enterprise_connections": {
                                    "type": "boolean",
                                    "description": "Do not Publish Enterprise Connections Information with IdP domains on the lock configuration file."
                                 },
                                 "disable_management_api_sms_obfuscation": {
                                    "type": "boolean",
                                    "description": "If true, SMS phone numbers will not be obfuscated in Management API GET calls."
                                 },
                                 "enforce_client_authentication_on_passwordless_start": {
                                    "type": "boolean",
                                    "description": "Enforce client authentication for passwordless start"
                                 },
                                 "trust_azure_adfs_email_verified_connection_property": {
                                    "type": "boolean",
                                    "description": "Changes email_verified behavior for Azure AD/ADFS connections when enabled. Sets email_verified to false otherwise."
                                 },
                                 "enable_adfs_waad_email_verification": {
                                    "type": "boolean",
                                    "description": "Enables the email verification flow during login for Azure AD and ADFS connections"
                                 },
                                 "revoke_refresh_token_grant": {
                                    "type": "boolean",
                                    "description": "Delete underlying grant when a Refresh Token is revoked via the Authentication API."
                                 },
                                 "dashboard_log_streams_next": {
                                    "type": "boolean",
                                    "description": "Enables beta access to log streaming changes"
                                 },
                                 "dashboard_insights_view": {
                                    "type": "boolean",
                                    "description": "Enables new insights activity page view"
                                 },
                                 "disable_fields_map_fix": {
                                    "type": "boolean",
                                    "description": "Disables SAML fields map fix for bad mappings with repeated attributes"
                                 }
                              }
                           },
                           "friendly_name": {
                              "type": "string",
                              "description": "Friendly name for this tenant.",
                              "default": "My Company"
                           },
                           "picture_url": {
                              "type": "string",
                              "description": "URL of logo to be shown for this tenant (recommended size: 150x150)",
                              "default": "https://mycompany.org/logo.png"
                           },
                           "support_email": {
                              "type": "string",
                              "description": "End-user support email.",
                              "default": "support@mycompany.org"
                           },
                           "support_url": {
                              "type": "string",
                              "description": "End-user support url.",
                              "default": "https://mycompany.org/support"
                           },
                           "allowed_logout_urls": {
                              "type": "array",
                              "description": "URLs that are valid to redirect to after logout from Auth0.",
                              "items": {
                                 "type": "string"
                              }
                           },
                           "session_lifetime": {
                              "type": "integer",
                              "description": "Number of hours a session will stay valid.",
                              "default": 168
                           },
                           "idle_session_lifetime": {
                              "type": "integer",
                              "description": "Number of hours for which a session can be inactive before the user must log in again.",
                              "default": 72
                           },
                           "sandbox_version": {
                              "type": "string",
                              "description": "Selected sandbox version for the extensibility environment",
                              "default": "12",
                              "maxLength": 8
                           },
                           "default_redirection_uri": {
                              "type": "string",
                              "description": "The default absolute redirection uri, must be https"
                           },
                           "enabled_locales": {
                              "type": "array",
                              "description": "Supported locales for the user interface",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "ar",
                                    "bg",
                                    "bs",
                                    "cs",
                                    "da",
                                    "de",
                                    "el",
                                    "en",
                                    "es",
                                    "et",
                                    "fi",
                                    "fr",
                                    "fr-CA",
                                    "fr-FR",
                                    "he",
                                    "hi",
                                    "hr",
                                    "hu",
                                    "id",
                                    "is",
                                    "it",
                                    "ja",
                                    "ko",
                                    "lt",
                                    "lv",
                                    "nb",
                                    "nl",
                                    "pl",
                                    "pt",
                                    "pt-BR",
                                    "pt-PT",
                                    "ro",
                                    "ru",
                                    "sk",
                                    "sl",
                                    "sr",
                                    "sv",
                                    "th",
                                    "tr",
                                    "uk",
                                    "vi",
                                    "zh-CN",
                                    "zh-TW"
                                 ]
                              }
                           },
                           "session_cookie": {
                              "type": "object",
                              "nullable": true,
                              "description": "Session cookie configuration",
                              "required": [
                                 "mode"
                              ],
                              "properties": {
                                 "mode": {
                                    "type": "string",
                                    "description": "Behavior of the session cookie",
                                    "default": "persistent",
                                    "enum": [
                                       "persistent",
                                       "non-persistent"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Tenant settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/tenantSettings"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:tenant_settings."
               },
               "404": {
                  "description": "The tenant does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_tenant_settings",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:tenant_settings"
                  ]
               }
            ]
         }
      },
      "/anomaly/blocks/ips/{id}": {
         "get": {
            "summary": "Check if an IP address is blocked",
            "description": "Check if a given IP address is blocked via the <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> due to multiple suspicious attempts.",
            "tags": [
               "anomaly"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "IP address to check.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "IP address specified is currently blocked."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: get:anomaly_block."
               },
               "404": {
                  "description": "IP address specified is not currently blocked."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_ips_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:anomaly_blocks"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Remove the blocked IP address",
            "description": "Unblock an IP address currently blocked by the <a href=\"https://auth0.com/docs/configure/attack-protection/suspicious-ip-throttling\">Suspicious IP Throttling</a> due to multiple suspicious attempts.",
            "tags": [
               "anomaly"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "IP address to unblock.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "IP address specified successfully unblocked."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:anomaly_block."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_ips_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:anomaly_blocks"
                  ]
               }
            ]
         }
      },
      "/attack-protection/breached-password-detection": {
         "get": {
            "summary": "Get breached password detection settings",
            "description": "Get breached password detection settings",
            "tags": [
               "attack-protection"
            ],
            "responses": {
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_breached-password-detection",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:attack_protection"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update breached password detection settings",
            "description": "Update breached password detection settings",
            "tags": [
               "attack-protection"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not breached password detection is active.",
                              "default": true
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a login.\\n      Possible values: <code>block<\/code>, <code>user_notification<\/code>, <code>admin_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "user_notification",
                                    "admin_notification"
                                 ]
                              }
                           },
                           "admin_notification_frequency": {
                              "type": "array",
                              "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\\n        Possible values: <code>immediately<\/code>, <code>daily<\/code>, <code>weekly<\/code>, <code>monthly<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "immediately",
                                    "daily",
                                    "weekly",
                                    "monthly"
                                 ]
                              }
                           },
                           "method": {
                              "type": "string",
                              "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\\n        Possible values: <code>standard<\/code>, <code>enhanced<\/code>.",
                              "default": "standard",
                              "enum": [
                                 "standard",
                                 "enhanced"
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not breached password detection is active.",
                              "default": true
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a breached password is detected during a login.\\n      Possible values: <code>block<\/code>, <code>user_notification<\/code>, <code>admin_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "user_notification",
                                    "admin_notification"
                                 ]
                              }
                           },
                           "admin_notification_frequency": {
                              "type": "array",
                              "description": "When \"admin_notification\" is enabled, determines how often email notifications are sent.\\n        Possible values: <code>immediately<\/code>, <code>daily<\/code>, <code>weekly<\/code>, <code>monthly<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "immediately",
                                    "daily",
                                    "weekly",
                                    "monthly"
                                 ]
                              }
                           },
                           "method": {
                              "type": "string",
                              "description": "The subscription level for breached password detection methods. Use \"enhanced\" to enable Credential Guard.\\n        Possible values: <code>standard<\/code>, <code>enhanced<\/code>.",
                              "default": "standard",
                              "enum": [
                                 "standard",
                                 "enhanced"
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_breached-password-detection",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:attack_protection"
                  ]
               }
            ]
         }
      },
      "/attack-protection/brute-force-protection": {
         "get": {
            "summary": "Get the brute force configuration",
            "description": "Get the brute force configuration",
            "tags": [
               "attack-protection"
            ],
            "responses": {
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_brute-force-protection",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:attack_protection"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update the brute force configuration",
            "description": "Update the brute force configuration",
            "tags": [
               "attack-protection"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not brute force attack protections are active."
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a brute force protection threshold is violated.\\n        Possible values: <code>block<\/code>, <code>user_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "user_notification"
                                 ]
                              }
                           },
                           "allowlist": {
                              "type": "array",
                              "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                              "items": {
                                 "anyOf": [
                                    {},
                                    {},
                                    {},
                                    {}
                                 ]
                              }
                           },
                           "mode": {
                              "type": "string",
                              "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\\n          Possible values: <code>count_per_identifier_and_ip<\/code>, <code>count_per_identifier<\/code>.",
                              "default": "count_per_identifier_and_ip",
                              "enum": [
                                 "count_per_identifier_and_ip",
                                 "count_per_identifier"
                              ]
                           },
                           "max_attempts": {
                              "type": "integer",
                              "description": "Maximum number of unsuccessful attempts.",
                              "default": 10
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not brute force attack protections are active."
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a brute force protection threshold is violated.\\n        Possible values: <code>block<\/code>, <code>user_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "user_notification"
                                 ]
                              }
                           },
                           "allowlist": {
                              "type": "array",
                              "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                              "items": {
                                 "anyOf": [
                                    {},
                                    {},
                                    {},
                                    {}
                                 ]
                              }
                           },
                           "mode": {
                              "type": "string",
                              "description": "Account Lockout: Determines whether or not IP address is used when counting failed attempts.\\n          Possible values: <code>count_per_identifier_and_ip<\/code>, <code>count_per_identifier<\/code>.",
                              "default": "count_per_identifier_and_ip",
                              "enum": [
                                 "count_per_identifier_and_ip",
                                 "count_per_identifier"
                              ]
                           },
                           "max_attempts": {
                              "type": "integer",
                              "description": "Maximum number of unsuccessful attempts.",
                              "default": 10
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_brute-force-protection",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:attack_protection"
                  ]
               }
            ]
         }
      },
      "/attack-protection/suspicious-ip-throttling": {
         "get": {
            "summary": "Get the suspicious IP throttling configuration",
            "description": "Get the suspicious IP throttling configuration",
            "tags": [
               "attack-protection"
            ],
            "responses": {
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_suspicious-ip-throttling",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:attack_protection"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update the suspicious IP throttling configuration",
            "description": "Update the suspicious IP throttling configuration",
            "tags": [
               "attack-protection"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not suspicious IP throttling attack protections are active."
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a suspicious IP throttling threshold is violated.\\n          Possible values: <code>block<\/code>, <code>admin_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "admin_notification"
                                 ]
                              }
                           },
                           "allowlist": {
                              "type": "array",
                              "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                              "items": {
                                 "anyOf": [
                                    {},
                                    {},
                                    {},
                                    {}
                                 ]
                              }
                           },
                           "stage": {
                              "type": "object",
                              "description": "Holds per-stage configuration options (max_attempts and rate).",
                              "properties": {
                                 "pre-login": {
                                    "type": "object",
                                    "description": "Configuration options that apply before every login attempt.",
                                    "properties": {
                                       "max_attempts": {
                                          "type": "integer",
                                          "description": "Total number of attempts allowed per day.",
                                          "default": 100
                                       },
                                       "rate": {
                                          "type": "integer",
                                          "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                                          "default": 864000
                                       }
                                    }
                                 },
                                 "pre-user-registration": {
                                    "type": "object",
                                    "description": "Configuration options that apply before every user registration attempt.",
                                    "properties": {
                                       "max_attempts": {
                                          "type": "integer",
                                          "description": "Total number of attempts allowed.",
                                          "default": 50
                                       },
                                       "rate": {
                                          "type": "integer",
                                          "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                                          "default": 1728000
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether or not suspicious IP throttling attack protections are active."
                           },
                           "shields": {
                              "type": "array",
                              "description": "Action to take when a suspicious IP throttling threshold is violated.\\n          Possible values: <code>block<\/code>, <code>admin_notification<\/code>.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "block",
                                    "admin_notification"
                                 ]
                              }
                           },
                           "allowlist": {
                              "type": "array",
                              "description": "List of trusted IP addresses that will not have attack protection enforced against them.",
                              "items": {
                                 "anyOf": [
                                    {},
                                    {},
                                    {},
                                    {}
                                 ]
                              }
                           },
                           "stage": {
                              "type": "object",
                              "description": "Holds per-stage configuration options (max_attempts and rate).",
                              "properties": {
                                 "pre-login": {
                                    "type": "object",
                                    "description": "Configuration options that apply before every login attempt.",
                                    "properties": {
                                       "max_attempts": {
                                          "type": "integer",
                                          "description": "Total number of attempts allowed per day.",
                                          "default": 100
                                       },
                                       "rate": {
                                          "type": "integer",
                                          "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                                          "default": 864000
                                       }
                                    }
                                 },
                                 "pre-user-registration": {
                                    "type": "object",
                                    "description": "Configuration options that apply before every user registration attempt.",
                                    "properties": {
                                       "max_attempts": {
                                          "type": "integer",
                                          "description": "Total number of attempts allowed.",
                                          "default": 50
                                       },
                                       "rate": {
                                          "type": "integer",
                                          "description": "Interval of time, given in milliseconds, at which new attempts are granted.",
                                          "default": 1728000
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:attack_protection."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_suspicious-ip-throttling",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:attack_protection"
                  ]
               }
            ]
         }
      },
      "/blacklists/tokens": {
         "get": {
            "summary": "Get blacklisted tokens",
            "description": "Retrieve the `jti` and `aud` of all tokens that are blacklisted.\\n\\nNote: The <a href=\"https://auth0.com/docs/jwt\">JWT specification</a> states that the `jti` field can be used to prevent replay attacks. Though Auth0 tokens do not include a `jti`, you can nevertheless blacklist a `jti` to prevent a token being used more than a predetermined number of times. This behavior is similar to implementing a nonce (where the token's signature can be thought of as the nonce). If a token gets stolen, it (or the tokens issued after it) should be blacklisted and let expire.\\n",
            "tags": [
               "blacklists"
            ],
            "parameters": [
               {
                  "name": "aud",
                  "in": "query",
                  "description": "Optional filter on the JWT's aud claim (the client_id to which the JWT was issued).",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Tokens successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/token"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: blacklist:tokens."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_tokens",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "blacklist:tokens"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Blacklist a token",
            "description": "Add the token identified by the `jti` to a blacklist for the tenant.\\n",
            "tags": [
               "blacklists"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/token"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/token"
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Token successfully blacklisted."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "You cannot blacklist tokens for the specified audience. You must own the client."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_tokens",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "blacklist:tokens"
                  ]
               }
            ]
         }
      },
      "/branding": {
         "get": {
            "summary": "Get branding settings",
            "description": "Retrieve branding settings.",
            "tags": [
               "branding"
            ],
            "responses": {
               "200": {
                  "description": "Branding settings successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "colors": {
                                 "type": "object",
                                 "description": "Custom color settings.",
                                 "properties": {
                                    "primary": {
                                       "type": "string",
                                       "description": "Accent color."
                                    },
                                    "page_background": {
                                       "description": "Page Background Color or Gradient.\\nProperty contains either <code>null<\/code> to unset, a solid color as a string value <code>#FFFFFF<\/code>, or a gradient as an object.\\n\\n<code>\\n{\\n  type: 'linear-gradient',\\n  start: '#FFFFFF',\\n  end: '#000000',\\n  angle_deg: 35\\n}\\n<\/code>\\n",
                                       "oneOf": [
                                          {
                                             "type": "string",
                                             "nullable": true
                                          },
                                          {
                                             "type": "object",
                                             "nullable": true,
                                             "additionalProperties": {}
                                          }
                                       ]
                                    }
                                 }
                              },
                              "favicon_url": {
                                 "type": "string",
                                 "description": "URL for the favicon. Must use HTTPS."
                              },
                              "logo_url": {
                                 "type": "string",
                                 "description": "URL for the logo. Must use HTTPS."
                              },
                              "font": {
                                 "type": "object",
                                 "description": "Custom font settings.",
                                 "properties": {
                                    "url": {
                                       "type": "string",
                                       "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:branding."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_branding",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:branding"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update branding settings",
            "description": "Update branding settings.",
            "tags": [
               "branding"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "Branding settings",
                        "properties": {
                           "colors": {
                              "type": "object",
                              "nullable": true,
                              "description": "Custom color settings.",
                              "properties": {
                                 "primary": {
                                    "type": "string",
                                    "description": "Accent color.",
                                    "nullable": true
                                 },
                                 "page_background": {
                                    "description": "Page Background Color or Gradient.\\nProperty contains either <code>null<\/code> to unset, a solid color as a string value <code>#FFFFFF<\/code>, or a gradient as an object.\\n\\n<code>\\n{\\n  type: 'linear-gradient',\\n  start: '#FFFFFF',\\n  end: '#000000',\\n  angle_deg: 35\\n}\\n<\/code>\\n",
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "nullable": true
                                       },
                                       {
                                          "type": "object",
                                          "nullable": true,
                                          "additionalProperties": {}
                                       }
                                    ]
                                 }
                              }
                           },
                           "favicon_url": {
                              "type": "string",
                              "description": "URL for the favicon. Must use HTTPS.",
                              "nullable": true
                           },
                           "logo_url": {
                              "type": "string",
                              "description": "URL for the logo. Must use HTTPS.",
                              "nullable": true
                           },
                           "font": {
                              "type": "object",
                              "nullable": true,
                              "description": "Custom font settings.",
                              "properties": {
                                 "url": {
                                    "type": "string",
                                    "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                                    "nullable": true
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "Branding settings",
                        "properties": {
                           "colors": {
                              "type": "object",
                              "nullable": true,
                              "description": "Custom color settings.",
                              "properties": {
                                 "primary": {
                                    "type": "string",
                                    "description": "Accent color.",
                                    "nullable": true
                                 },
                                 "page_background": {
                                    "description": "Page Background Color or Gradient.\\nProperty contains either <code>null<\/code> to unset, a solid color as a string value <code>#FFFFFF<\/code>, or a gradient as an object.\\n\\n<code>\\n{\\n  type: 'linear-gradient',\\n  start: '#FFFFFF',\\n  end: '#000000',\\n  angle_deg: 35\\n}\\n<\/code>\\n",
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "nullable": true
                                       },
                                       {
                                          "type": "object",
                                          "nullable": true,
                                          "additionalProperties": {}
                                       }
                                    ]
                                 }
                              }
                           },
                           "favicon_url": {
                              "type": "string",
                              "description": "URL for the favicon. Must use HTTPS.",
                              "nullable": true
                           },
                           "logo_url": {
                              "type": "string",
                              "description": "URL for the logo. Must use HTTPS.",
                              "nullable": true
                           },
                           "font": {
                              "type": "object",
                              "nullable": true,
                              "description": "Custom font settings.",
                              "properties": {
                                 "url": {
                                    "type": "string",
                                    "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS.",
                                    "nullable": true
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Branding settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "colors": {
                                 "type": "object",
                                 "description": "Custom color settings.",
                                 "properties": {
                                    "primary": {
                                       "type": "string",
                                       "description": "Accent color."
                                    },
                                    "page_background": {
                                       "description": "Page Background Color or Gradient.\\nProperty contains either <code>null<\/code> to unset, a solid color as a string value <code>#FFFFFF<\/code>, or a gradient as an object.\\n\\n<code>\\n{\\n  type: 'linear-gradient',\\n  start: '#FFFFFF',\\n  end: '#000000',\\n  angle_deg: 35\\n}\\n<\/code>\\n",
                                       "oneOf": [
                                          {
                                             "type": "string",
                                             "nullable": true
                                          },
                                          {
                                             "type": "object",
                                             "nullable": true,
                                             "additionalProperties": {}
                                          }
                                       ]
                                    }
                                 }
                              },
                              "favicon_url": {
                                 "type": "string",
                                 "description": "URL for the favicon. Must use HTTPS."
                              },
                              "logo_url": {
                                 "type": "string",
                                 "description": "URL for the logo. Must use HTTPS."
                              },
                              "font": {
                                 "type": "object",
                                 "description": "Custom font settings.",
                                 "properties": {
                                    "url": {
                                       "type": "string",
                                       "description": "URL for the custom font. The URL must point to a font file and not a stylesheet. Must use HTTPS."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:branding."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_branding",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:branding"
                  ]
               }
            ]
         }
      },
      "/branding/templates/universal-login": {
         "get": {
            "summary": "Get template for New Universal Login Experience",
            "tags": [
               "branding"
            ],
            "responses": {
               "200": {
                  "description": "Template successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "object",
                                 "properties": {
                                    "body": {
                                       "type": "string",
                                       "description": "The custom page template for the New Universal Login Experience"
                                    }
                                 }
                              },
                              {
                                 "type": "string",
                                 "description": "The custom page template for the New Universal Login Experience"
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:branding"
               },
               "404": {
                  "description": "Template does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_universal-login",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:branding"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete template for New Universal Login Experience",
            "tags": [
               "branding"
            ],
            "responses": {
               "204": {
                  "description": "Template successfully deleted."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: delete:branding."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_universal-login",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:branding"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Set template for New Universal Login Experience",
            "description": "Update the Universal Login branding template.\\n\\n<p>When <code>content-type<\/code> header is set to <code>application/json<\/code>, the expected body must be JSON:</p>\\n<pre>\\n{\\n  \"template\": \"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;{%- auth0:head -%}&lt;/head&gt;&lt;body&gt;{%- auth0:widget -%}&lt;/body&gt;&lt;/html&gt;\"\\n}\\n</pre>\\n\\n<p>\\n  When <code>content-type<\/code> header is set to <code>text/html<\/code>, the expected body must be the HTML template:\\n</p>\\n<pre>\\n&lt!DOCTYPE html&gt;\\n&lt;code&gt;\\n  &lt;html&gt;\\n    &lt;head&gt;\\n     {%- auth0:head -%}\\n    &lt;/head&gt;\\n    &lt;body&gt;\\n      {%- auth0:widget -%}\\n    &lt;/body&gt;\\n  &lt;/html&gt;\\n&lt;/code&gt;\\n</pre>\\n",
            "tags": [
               "branding"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "oneOf": [
                           {
                              "type": "string",
                              "maxLength": 102400
                           },
                           {
                              "type": "object",
                              "required": [
                                 "template"
                              ],
                              "properties": {
                                 "template": {
                                    "type": "string",
                                    "maxLength": 102400
                                 }
                              }
                           }
                        ]
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "oneOf": [
                           {
                              "type": "string",
                              "maxLength": 102400
                           },
                           {
                              "type": "object",
                              "required": [
                                 "template"
                              ],
                              "properties": {
                                 "template": {
                                    "type": "string",
                                    "maxLength": 102400
                                 }
                              }
                           }
                        ]
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Template successfully created."
               },
               "204": {
                  "description": "Template successfully updated."
               },
               "400": {
                  "description": "Payload content missing required Liquid tags (auth0:head and auth0:widget)."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:branding."
               },
               "409": {
                  "description": "Template update conflict."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "put_universal-login",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:branding"
                  ]
               }
            ]
         }
      },
      "/branding/themes": {
         "post": {
            "summary": "Create branding theme",
            "description": "Create branding theme.",
            "tags": [
               "branding"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "Branding theme",
                        "required": [
                           "borders",
                           "colors",
                           "fonts",
                           "page_background",
                           "widget"
                        ],
                        "properties": {
                           "borders": {
                              "type": "object",
                              "required": [
                                 "button_border_radius",
                                 "button_border_weight",
                                 "buttons_style",
                                 "input_border_radius",
                                 "input_border_weight",
                                 "inputs_style",
                                 "show_widget_shadow",
                                 "widget_border_weight",
                                 "widget_corner_radius"
                              ],
                              "properties": {
                                 "button_border_radius": {
                                    "type": "number",
                                    "description": "Button border radius"
                                 },
                                 "button_border_weight": {
                                    "type": "number",
                                    "description": "Button border weight"
                                 },
                                 "buttons_style": {
                                    "type": "string",
                                    "description": "Buttons style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "input_border_radius": {
                                    "type": "number",
                                    "description": "Input border radius"
                                 },
                                 "input_border_weight": {
                                    "type": "number",
                                    "description": "Input border weight"
                                 },
                                 "inputs_style": {
                                    "type": "string",
                                    "description": "Inputs style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "show_widget_shadow": {
                                    "type": "boolean",
                                    "description": "Show widget shadow"
                                 },
                                 "widget_border_weight": {
                                    "type": "number",
                                    "description": "Widget border weight"
                                 },
                                 "widget_corner_radius": {
                                    "type": "number",
                                    "description": "Widget corner radius"
                                 }
                              }
                           },
                           "colors": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "error",
                                 "header",
                                 "icons",
                                 "input_background",
                                 "input_border",
                                 "input_filled_text",
                                 "input_labels_placeholders",
                                 "links_focused_components",
                                 "primary_button",
                                 "primary_button_label",
                                 "secondary_button_border",
                                 "secondary_button_label",
                                 "success",
                                 "widget_background",
                                 "widget_border"
                              ],
                              "properties": {
                                 "base_focus_color": {
                                    "type": "string",
                                    "description": "Base Focus Color"
                                 },
                                 "base_hover_color": {
                                    "type": "string",
                                    "description": "Base Hover Color"
                                 },
                                 "body_text": {
                                    "type": "string",
                                    "description": "Body text"
                                 },
                                 "error": {
                                    "type": "string",
                                    "description": "Error"
                                 },
                                 "header": {
                                    "type": "string",
                                    "description": "Header"
                                 },
                                 "icons": {
                                    "type": "string",
                                    "description": "Icons"
                                 },
                                 "input_background": {
                                    "type": "string",
                                    "description": "Input background"
                                 },
                                 "input_border": {
                                    "type": "string",
                                    "description": "Input border"
                                 },
                                 "input_filled_text": {
                                    "type": "string",
                                    "description": "Input filled text"
                                 },
                                 "input_labels_placeholders": {
                                    "type": "string",
                                    "description": "Input labels & placeholders"
                                 },
                                 "links_focused_components": {
                                    "type": "string",
                                    "description": "Links & focused components"
                                 },
                                 "primary_button": {
                                    "type": "string",
                                    "description": "Primary button"
                                 },
                                 "primary_button_label": {
                                    "type": "string",
                                    "description": "Primary button label"
                                 },
                                 "secondary_button_border": {
                                    "type": "string",
                                    "description": "Secondary button border"
                                 },
                                 "secondary_button_label": {
                                    "type": "string",
                                    "description": "Secondary button label"
                                 },
                                 "success": {
                                    "type": "string",
                                    "description": "Success"
                                 },
                                 "widget_background": {
                                    "type": "string",
                                    "description": "Widget background"
                                 },
                                 "widget_border": {
                                    "type": "string",
                                    "description": "Widget border"
                                 }
                              }
                           },
                           "displayName": {
                              "type": "string",
                              "description": "Display Name",
                              "maxLength": 2048
                           },
                           "fonts": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "buttons_text",
                                 "font_url",
                                 "input_labels",
                                 "links",
                                 "links_style",
                                 "reference_text_size",
                                 "subtitle",
                                 "title"
                              ],
                              "properties": {
                                 "body_text": {
                                    "type": "object",
                                    "description": "Body text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Body text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Body text size"
                                       }
                                    }
                                 },
                                 "buttons_text": {
                                    "type": "object",
                                    "description": "Buttons text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Buttons text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Buttons text size"
                                       }
                                    }
                                 },
                                 "font_url": {
                                    "type": "string",
                                    "description": "Font URL"
                                 },
                                 "input_labels": {
                                    "type": "object",
                                    "description": "Input Labels",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Input Labels bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Input Labels size"
                                       }
                                    }
                                 },
                                 "links": {
                                    "type": "object",
                                    "description": "Links",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Links bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Links size"
                                       }
                                    }
                                 },
                                 "links_style": {
                                    "type": "string",
                                    "description": "Links style",
                                    "enum": [
                                       "normal",
                                       "underlined"
                                    ]
                                 },
                                 "reference_text_size": {
                                    "type": "number",
                                    "description": "Reference text size"
                                 },
                                 "subtitle": {
                                    "type": "object",
                                    "description": "Subtitle",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Subtitle bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Subtitle size"
                                       }
                                    }
                                 },
                                 "title": {
                                    "type": "object",
                                    "description": "Title",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Title bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Title size"
                                       }
                                    }
                                 }
                              }
                           },
                           "page_background": {
                              "type": "object",
                              "required": [
                                 "background_color",
                                 "background_image_url",
                                 "page_layout"
                              ],
                              "properties": {
                                 "background_color": {
                                    "type": "string",
                                    "description": "Background color"
                                 },
                                 "background_image_url": {
                                    "type": "string",
                                    "description": "Background image url"
                                 },
                                 "page_layout": {
                                    "type": "string",
                                    "description": "Page Layout",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 }
                              }
                           },
                           "widget": {
                              "type": "object",
                              "required": [
                                 "header_text_alignment",
                                 "logo_height",
                                 "logo_position",
                                 "logo_url",
                                 "social_buttons_layout"
                              ],
                              "properties": {
                                 "header_text_alignment": {
                                    "type": "string",
                                    "description": "Header text alignment",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 },
                                 "logo_height": {
                                    "type": "number",
                                    "description": "Logo height"
                                 },
                                 "logo_position": {
                                    "type": "string",
                                    "description": "Logo position",
                                    "enum": [
                                       "center",
                                       "left",
                                       "none",
                                       "right"
                                    ]
                                 },
                                 "logo_url": {
                                    "type": "string",
                                    "description": "Logo url"
                                 },
                                 "social_buttons_layout": {
                                    "type": "string",
                                    "description": "Social buttons layout",
                                    "enum": [
                                       "bottom",
                                       "top"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "Branding theme",
                        "required": [
                           "borders",
                           "colors",
                           "fonts",
                           "page_background",
                           "widget"
                        ],
                        "properties": {
                           "borders": {
                              "type": "object",
                              "required": [
                                 "button_border_radius",
                                 "button_border_weight",
                                 "buttons_style",
                                 "input_border_radius",
                                 "input_border_weight",
                                 "inputs_style",
                                 "show_widget_shadow",
                                 "widget_border_weight",
                                 "widget_corner_radius"
                              ],
                              "properties": {
                                 "button_border_radius": {
                                    "type": "number",
                                    "description": "Button border radius"
                                 },
                                 "button_border_weight": {
                                    "type": "number",
                                    "description": "Button border weight"
                                 },
                                 "buttons_style": {
                                    "type": "string",
                                    "description": "Buttons style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "input_border_radius": {
                                    "type": "number",
                                    "description": "Input border radius"
                                 },
                                 "input_border_weight": {
                                    "type": "number",
                                    "description": "Input border weight"
                                 },
                                 "inputs_style": {
                                    "type": "string",
                                    "description": "Inputs style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "show_widget_shadow": {
                                    "type": "boolean",
                                    "description": "Show widget shadow"
                                 },
                                 "widget_border_weight": {
                                    "type": "number",
                                    "description": "Widget border weight"
                                 },
                                 "widget_corner_radius": {
                                    "type": "number",
                                    "description": "Widget corner radius"
                                 }
                              }
                           },
                           "colors": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "error",
                                 "header",
                                 "icons",
                                 "input_background",
                                 "input_border",
                                 "input_filled_text",
                                 "input_labels_placeholders",
                                 "links_focused_components",
                                 "primary_button",
                                 "primary_button_label",
                                 "secondary_button_border",
                                 "secondary_button_label",
                                 "success",
                                 "widget_background",
                                 "widget_border"
                              ],
                              "properties": {
                                 "base_focus_color": {
                                    "type": "string",
                                    "description": "Base Focus Color"
                                 },
                                 "base_hover_color": {
                                    "type": "string",
                                    "description": "Base Hover Color"
                                 },
                                 "body_text": {
                                    "type": "string",
                                    "description": "Body text"
                                 },
                                 "error": {
                                    "type": "string",
                                    "description": "Error"
                                 },
                                 "header": {
                                    "type": "string",
                                    "description": "Header"
                                 },
                                 "icons": {
                                    "type": "string",
                                    "description": "Icons"
                                 },
                                 "input_background": {
                                    "type": "string",
                                    "description": "Input background"
                                 },
                                 "input_border": {
                                    "type": "string",
                                    "description": "Input border"
                                 },
                                 "input_filled_text": {
                                    "type": "string",
                                    "description": "Input filled text"
                                 },
                                 "input_labels_placeholders": {
                                    "type": "string",
                                    "description": "Input labels & placeholders"
                                 },
                                 "links_focused_components": {
                                    "type": "string",
                                    "description": "Links & focused components"
                                 },
                                 "primary_button": {
                                    "type": "string",
                                    "description": "Primary button"
                                 },
                                 "primary_button_label": {
                                    "type": "string",
                                    "description": "Primary button label"
                                 },
                                 "secondary_button_border": {
                                    "type": "string",
                                    "description": "Secondary button border"
                                 },
                                 "secondary_button_label": {
                                    "type": "string",
                                    "description": "Secondary button label"
                                 },
                                 "success": {
                                    "type": "string",
                                    "description": "Success"
                                 },
                                 "widget_background": {
                                    "type": "string",
                                    "description": "Widget background"
                                 },
                                 "widget_border": {
                                    "type": "string",
                                    "description": "Widget border"
                                 }
                              }
                           },
                           "displayName": {
                              "type": "string",
                              "description": "Display Name",
                              "maxLength": 2048
                           },
                           "fonts": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "buttons_text",
                                 "font_url",
                                 "input_labels",
                                 "links",
                                 "links_style",
                                 "reference_text_size",
                                 "subtitle",
                                 "title"
                              ],
                              "properties": {
                                 "body_text": {
                                    "type": "object",
                                    "description": "Body text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Body text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Body text size"
                                       }
                                    }
                                 },
                                 "buttons_text": {
                                    "type": "object",
                                    "description": "Buttons text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Buttons text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Buttons text size"
                                       }
                                    }
                                 },
                                 "font_url": {
                                    "type": "string",
                                    "description": "Font URL"
                                 },
                                 "input_labels": {
                                    "type": "object",
                                    "description": "Input Labels",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Input Labels bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Input Labels size"
                                       }
                                    }
                                 },
                                 "links": {
                                    "type": "object",
                                    "description": "Links",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Links bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Links size"
                                       }
                                    }
                                 },
                                 "links_style": {
                                    "type": "string",
                                    "description": "Links style",
                                    "enum": [
                                       "normal",
                                       "underlined"
                                    ]
                                 },
                                 "reference_text_size": {
                                    "type": "number",
                                    "description": "Reference text size"
                                 },
                                 "subtitle": {
                                    "type": "object",
                                    "description": "Subtitle",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Subtitle bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Subtitle size"
                                       }
                                    }
                                 },
                                 "title": {
                                    "type": "object",
                                    "description": "Title",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Title bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Title size"
                                       }
                                    }
                                 }
                              }
                           },
                           "page_background": {
                              "type": "object",
                              "required": [
                                 "background_color",
                                 "background_image_url",
                                 "page_layout"
                              ],
                              "properties": {
                                 "background_color": {
                                    "type": "string",
                                    "description": "Background color"
                                 },
                                 "background_image_url": {
                                    "type": "string",
                                    "description": "Background image url"
                                 },
                                 "page_layout": {
                                    "type": "string",
                                    "description": "Page Layout",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 }
                              }
                           },
                           "widget": {
                              "type": "object",
                              "required": [
                                 "header_text_alignment",
                                 "logo_height",
                                 "logo_position",
                                 "logo_url",
                                 "social_buttons_layout"
                              ],
                              "properties": {
                                 "header_text_alignment": {
                                    "type": "string",
                                    "description": "Header text alignment",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 },
                                 "logo_height": {
                                    "type": "number",
                                    "description": "Logo height"
                                 },
                                 "logo_position": {
                                    "type": "string",
                                    "description": "Logo position",
                                    "enum": [
                                       "center",
                                       "left",
                                       "none",
                                       "right"
                                    ]
                                 },
                                 "logo_url": {
                                    "type": "string",
                                    "description": "Logo url"
                                 },
                                 "social_buttons_layout": {
                                    "type": "string",
                                    "description": "Social buttons layout",
                                    "enum": [
                                       "bottom",
                                       "top"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Branding settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "borders",
                              "colors",
                              "displayName",
                              "fonts",
                              "page_background",
                              "themeId",
                              "widget"
                           ],
                           "properties": {
                              "borders": {
                                 "type": "object",
                                 "required": [
                                    "button_border_radius",
                                    "button_border_weight",
                                    "buttons_style",
                                    "input_border_radius",
                                    "input_border_weight",
                                    "inputs_style",
                                    "show_widget_shadow",
                                    "widget_border_weight",
                                    "widget_corner_radius"
                                 ],
                                 "properties": {
                                    "button_border_radius": {
                                       "type": "number",
                                       "description": "Button border radius"
                                    },
                                    "button_border_weight": {
                                       "type": "number",
                                       "description": "Button border weight"
                                    },
                                    "buttons_style": {
                                       "type": "string",
                                       "description": "Buttons style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "input_border_radius": {
                                       "type": "number",
                                       "description": "Input border radius"
                                    },
                                    "input_border_weight": {
                                       "type": "number",
                                       "description": "Input border weight"
                                    },
                                    "inputs_style": {
                                       "type": "string",
                                       "description": "Inputs style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "show_widget_shadow": {
                                       "type": "boolean",
                                       "description": "Show widget shadow"
                                    },
                                    "widget_border_weight": {
                                       "type": "number",
                                       "description": "Widget border weight"
                                    },
                                    "widget_corner_radius": {
                                       "type": "number",
                                       "description": "Widget corner radius"
                                    }
                                 }
                              },
                              "colors": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "error",
                                    "header",
                                    "icons",
                                    "input_background",
                                    "input_border",
                                    "input_filled_text",
                                    "input_labels_placeholders",
                                    "links_focused_components",
                                    "primary_button",
                                    "primary_button_label",
                                    "secondary_button_border",
                                    "secondary_button_label",
                                    "success",
                                    "widget_background",
                                    "widget_border"
                                 ],
                                 "properties": {
                                    "base_focus_color": {
                                       "type": "string",
                                       "description": "Base Focus Color"
                                    },
                                    "base_hover_color": {
                                       "type": "string",
                                       "description": "Base Hover Color"
                                    },
                                    "body_text": {
                                       "type": "string",
                                       "description": "Body text"
                                    },
                                    "error": {
                                       "type": "string",
                                       "description": "Error"
                                    },
                                    "header": {
                                       "type": "string",
                                       "description": "Header"
                                    },
                                    "icons": {
                                       "type": "string",
                                       "description": "Icons"
                                    },
                                    "input_background": {
                                       "type": "string",
                                       "description": "Input background"
                                    },
                                    "input_border": {
                                       "type": "string",
                                       "description": "Input border"
                                    },
                                    "input_filled_text": {
                                       "type": "string",
                                       "description": "Input filled text"
                                    },
                                    "input_labels_placeholders": {
                                       "type": "string",
                                       "description": "Input labels & placeholders"
                                    },
                                    "links_focused_components": {
                                       "type": "string",
                                       "description": "Links & focused components"
                                    },
                                    "primary_button": {
                                       "type": "string",
                                       "description": "Primary button"
                                    },
                                    "primary_button_label": {
                                       "type": "string",
                                       "description": "Primary button label"
                                    },
                                    "secondary_button_border": {
                                       "type": "string",
                                       "description": "Secondary button border"
                                    },
                                    "secondary_button_label": {
                                       "type": "string",
                                       "description": "Secondary button label"
                                    },
                                    "success": {
                                       "type": "string",
                                       "description": "Success"
                                    },
                                    "widget_background": {
                                       "type": "string",
                                       "description": "Widget background"
                                    },
                                    "widget_border": {
                                       "type": "string",
                                       "description": "Widget border"
                                    }
                                 }
                              },
                              "displayName": {
                                 "type": "string",
                                 "description": "Display Name",
                                 "maxLength": 2048
                              },
                              "fonts": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "buttons_text",
                                    "font_url",
                                    "input_labels",
                                    "links",
                                    "links_style",
                                    "reference_text_size",
                                    "subtitle",
                                    "title"
                                 ],
                                 "properties": {
                                    "body_text": {
                                       "type": "object",
                                       "description": "Body text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Body text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Body text size"
                                          }
                                       }
                                    },
                                    "buttons_text": {
                                       "type": "object",
                                       "description": "Buttons text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Buttons text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Buttons text size"
                                          }
                                       }
                                    },
                                    "font_url": {
                                       "type": "string",
                                       "description": "Font URL"
                                    },
                                    "input_labels": {
                                       "type": "object",
                                       "description": "Input Labels",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Input Labels bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Input Labels size"
                                          }
                                       }
                                    },
                                    "links": {
                                       "type": "object",
                                       "description": "Links",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Links bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Links size"
                                          }
                                       }
                                    },
                                    "links_style": {
                                       "type": "string",
                                       "description": "Links style",
                                       "enum": [
                                          "normal",
                                          "underlined"
                                       ]
                                    },
                                    "reference_text_size": {
                                       "type": "number",
                                       "description": "Reference text size"
                                    },
                                    "subtitle": {
                                       "type": "object",
                                       "description": "Subtitle",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Subtitle bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Subtitle size"
                                          }
                                       }
                                    },
                                    "title": {
                                       "type": "object",
                                       "description": "Title",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Title bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Title size"
                                          }
                                       }
                                    }
                                 }
                              },
                              "page_background": {
                                 "type": "object",
                                 "required": [
                                    "background_color",
                                    "background_image_url",
                                    "page_layout"
                                 ],
                                 "properties": {
                                    "background_color": {
                                       "type": "string",
                                       "description": "Background color"
                                    },
                                    "background_image_url": {
                                       "type": "string",
                                       "description": "Background image url"
                                    },
                                    "page_layout": {
                                       "type": "string",
                                       "description": "Page Layout",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    }
                                 }
                              },
                              "themeId": {
                                 "type": "string",
                                 "description": "Theme Id",
                                 "maxLength": 32
                              },
                              "widget": {
                                 "type": "object",
                                 "required": [
                                    "header_text_alignment",
                                    "logo_height",
                                    "logo_position",
                                    "logo_url",
                                    "social_buttons_layout"
                                 ],
                                 "properties": {
                                    "header_text_alignment": {
                                       "type": "string",
                                       "description": "Header text alignment",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    },
                                    "logo_height": {
                                       "type": "number",
                                       "description": "Logo height"
                                    },
                                    "logo_position": {
                                       "type": "string",
                                       "description": "Logo position",
                                       "enum": [
                                          "center",
                                          "left",
                                          "none",
                                          "right"
                                       ]
                                    },
                                    "logo_url": {
                                       "type": "string",
                                       "description": "Logo url"
                                    },
                                    "social_buttons_layout": {
                                       "type": "string",
                                       "description": "Social buttons layout",
                                       "enum": [
                                          "bottom",
                                          "top"
                                       ]
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Your account does not have universal login customizations enabled"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:branding."
               },
               "409": {
                  "description": "There was an error updating branding settings: The theme already exists"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_branding_theme",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:branding"
                  ]
               }
            ]
         }
      },
      "/branding/themes/default": {
         "get": {
            "summary": "Get default branding theme",
            "description": "Retrieve default branding theme.",
            "tags": [
               "branding"
            ],
            "responses": {
               "200": {
                  "description": "Branding theme successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "borders",
                              "colors",
                              "displayName",
                              "fonts",
                              "page_background",
                              "themeId",
                              "widget"
                           ],
                           "properties": {
                              "borders": {
                                 "type": "object",
                                 "required": [
                                    "button_border_radius",
                                    "button_border_weight",
                                    "buttons_style",
                                    "input_border_radius",
                                    "input_border_weight",
                                    "inputs_style",
                                    "show_widget_shadow",
                                    "widget_border_weight",
                                    "widget_corner_radius"
                                 ],
                                 "properties": {
                                    "button_border_radius": {
                                       "type": "number",
                                       "description": "Button border radius"
                                    },
                                    "button_border_weight": {
                                       "type": "number",
                                       "description": "Button border weight"
                                    },
                                    "buttons_style": {
                                       "type": "string",
                                       "description": "Buttons style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "input_border_radius": {
                                       "type": "number",
                                       "description": "Input border radius"
                                    },
                                    "input_border_weight": {
                                       "type": "number",
                                       "description": "Input border weight"
                                    },
                                    "inputs_style": {
                                       "type": "string",
                                       "description": "Inputs style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "show_widget_shadow": {
                                       "type": "boolean",
                                       "description": "Show widget shadow"
                                    },
                                    "widget_border_weight": {
                                       "type": "number",
                                       "description": "Widget border weight"
                                    },
                                    "widget_corner_radius": {
                                       "type": "number",
                                       "description": "Widget corner radius"
                                    }
                                 }
                              },
                              "colors": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "error",
                                    "header",
                                    "icons",
                                    "input_background",
                                    "input_border",
                                    "input_filled_text",
                                    "input_labels_placeholders",
                                    "links_focused_components",
                                    "primary_button",
                                    "primary_button_label",
                                    "secondary_button_border",
                                    "secondary_button_label",
                                    "success",
                                    "widget_background",
                                    "widget_border"
                                 ],
                                 "properties": {
                                    "base_focus_color": {
                                       "type": "string",
                                       "description": "Base Focus Color"
                                    },
                                    "base_hover_color": {
                                       "type": "string",
                                       "description": "Base Hover Color"
                                    },
                                    "body_text": {
                                       "type": "string",
                                       "description": "Body text"
                                    },
                                    "error": {
                                       "type": "string",
                                       "description": "Error"
                                    },
                                    "header": {
                                       "type": "string",
                                       "description": "Header"
                                    },
                                    "icons": {
                                       "type": "string",
                                       "description": "Icons"
                                    },
                                    "input_background": {
                                       "type": "string",
                                       "description": "Input background"
                                    },
                                    "input_border": {
                                       "type": "string",
                                       "description": "Input border"
                                    },
                                    "input_filled_text": {
                                       "type": "string",
                                       "description": "Input filled text"
                                    },
                                    "input_labels_placeholders": {
                                       "type": "string",
                                       "description": "Input labels & placeholders"
                                    },
                                    "links_focused_components": {
                                       "type": "string",
                                       "description": "Links & focused components"
                                    },
                                    "primary_button": {
                                       "type": "string",
                                       "description": "Primary button"
                                    },
                                    "primary_button_label": {
                                       "type": "string",
                                       "description": "Primary button label"
                                    },
                                    "secondary_button_border": {
                                       "type": "string",
                                       "description": "Secondary button border"
                                    },
                                    "secondary_button_label": {
                                       "type": "string",
                                       "description": "Secondary button label"
                                    },
                                    "success": {
                                       "type": "string",
                                       "description": "Success"
                                    },
                                    "widget_background": {
                                       "type": "string",
                                       "description": "Widget background"
                                    },
                                    "widget_border": {
                                       "type": "string",
                                       "description": "Widget border"
                                    }
                                 }
                              },
                              "displayName": {
                                 "type": "string",
                                 "description": "Display Name",
                                 "maxLength": 2048
                              },
                              "fonts": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "buttons_text",
                                    "font_url",
                                    "input_labels",
                                    "links",
                                    "links_style",
                                    "reference_text_size",
                                    "subtitle",
                                    "title"
                                 ],
                                 "properties": {
                                    "body_text": {
                                       "type": "object",
                                       "description": "Body text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Body text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Body text size"
                                          }
                                       }
                                    },
                                    "buttons_text": {
                                       "type": "object",
                                       "description": "Buttons text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Buttons text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Buttons text size"
                                          }
                                       }
                                    },
                                    "font_url": {
                                       "type": "string",
                                       "description": "Font URL"
                                    },
                                    "input_labels": {
                                       "type": "object",
                                       "description": "Input Labels",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Input Labels bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Input Labels size"
                                          }
                                       }
                                    },
                                    "links": {
                                       "type": "object",
                                       "description": "Links",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Links bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Links size"
                                          }
                                       }
                                    },
                                    "links_style": {
                                       "type": "string",
                                       "description": "Links style",
                                       "enum": [
                                          "normal",
                                          "underlined"
                                       ]
                                    },
                                    "reference_text_size": {
                                       "type": "number",
                                       "description": "Reference text size"
                                    },
                                    "subtitle": {
                                       "type": "object",
                                       "description": "Subtitle",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Subtitle bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Subtitle size"
                                          }
                                       }
                                    },
                                    "title": {
                                       "type": "object",
                                       "description": "Title",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Title bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Title size"
                                          }
                                       }
                                    }
                                 }
                              },
                              "page_background": {
                                 "type": "object",
                                 "required": [
                                    "background_color",
                                    "background_image_url",
                                    "page_layout"
                                 ],
                                 "properties": {
                                    "background_color": {
                                       "type": "string",
                                       "description": "Background color"
                                    },
                                    "background_image_url": {
                                       "type": "string",
                                       "description": "Background image url"
                                    },
                                    "page_layout": {
                                       "type": "string",
                                       "description": "Page Layout",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    }
                                 }
                              },
                              "themeId": {
                                 "type": "string",
                                 "description": "Theme Id",
                                 "maxLength": 32
                              },
                              "widget": {
                                 "type": "object",
                                 "required": [
                                    "header_text_alignment",
                                    "logo_height",
                                    "logo_position",
                                    "logo_url",
                                    "social_buttons_layout"
                                 ],
                                 "properties": {
                                    "header_text_alignment": {
                                       "type": "string",
                                       "description": "Header text alignment",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    },
                                    "logo_height": {
                                       "type": "number",
                                       "description": "Logo height"
                                    },
                                    "logo_position": {
                                       "type": "string",
                                       "description": "Logo position",
                                       "enum": [
                                          "center",
                                          "left",
                                          "none",
                                          "right"
                                       ]
                                    },
                                    "logo_url": {
                                       "type": "string",
                                       "description": "Logo url"
                                    },
                                    "social_buttons_layout": {
                                       "type": "string",
                                       "description": "Social buttons layout",
                                       "enum": [
                                          "bottom",
                                          "top"
                                       ]
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Your account does not have universal login customizations enabled"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:branding."
               },
               "404": {
                  "description": "There was an error retrieving branding settings: invalid theme ID"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_default_branding_theme",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:branding"
                  ]
               }
            ]
         }
      },
      "/branding/themes/{themeId}": {
         "get": {
            "summary": "Get branding theme",
            "description": "Retrieve branding theme.",
            "tags": [
               "branding"
            ],
            "parameters": [
               {
                  "name": "themeId",
                  "in": "path",
                  "description": "The ID of the theme",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Branding theme successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "borders",
                              "colors",
                              "displayName",
                              "fonts",
                              "page_background",
                              "themeId",
                              "widget"
                           ],
                           "properties": {
                              "borders": {
                                 "type": "object",
                                 "required": [
                                    "button_border_radius",
                                    "button_border_weight",
                                    "buttons_style",
                                    "input_border_radius",
                                    "input_border_weight",
                                    "inputs_style",
                                    "show_widget_shadow",
                                    "widget_border_weight",
                                    "widget_corner_radius"
                                 ],
                                 "properties": {
                                    "button_border_radius": {
                                       "type": "number",
                                       "description": "Button border radius"
                                    },
                                    "button_border_weight": {
                                       "type": "number",
                                       "description": "Button border weight"
                                    },
                                    "buttons_style": {
                                       "type": "string",
                                       "description": "Buttons style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "input_border_radius": {
                                       "type": "number",
                                       "description": "Input border radius"
                                    },
                                    "input_border_weight": {
                                       "type": "number",
                                       "description": "Input border weight"
                                    },
                                    "inputs_style": {
                                       "type": "string",
                                       "description": "Inputs style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "show_widget_shadow": {
                                       "type": "boolean",
                                       "description": "Show widget shadow"
                                    },
                                    "widget_border_weight": {
                                       "type": "number",
                                       "description": "Widget border weight"
                                    },
                                    "widget_corner_radius": {
                                       "type": "number",
                                       "description": "Widget corner radius"
                                    }
                                 }
                              },
                              "colors": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "error",
                                    "header",
                                    "icons",
                                    "input_background",
                                    "input_border",
                                    "input_filled_text",
                                    "input_labels_placeholders",
                                    "links_focused_components",
                                    "primary_button",
                                    "primary_button_label",
                                    "secondary_button_border",
                                    "secondary_button_label",
                                    "success",
                                    "widget_background",
                                    "widget_border"
                                 ],
                                 "properties": {
                                    "base_focus_color": {
                                       "type": "string",
                                       "description": "Base Focus Color"
                                    },
                                    "base_hover_color": {
                                       "type": "string",
                                       "description": "Base Hover Color"
                                    },
                                    "body_text": {
                                       "type": "string",
                                       "description": "Body text"
                                    },
                                    "error": {
                                       "type": "string",
                                       "description": "Error"
                                    },
                                    "header": {
                                       "type": "string",
                                       "description": "Header"
                                    },
                                    "icons": {
                                       "type": "string",
                                       "description": "Icons"
                                    },
                                    "input_background": {
                                       "type": "string",
                                       "description": "Input background"
                                    },
                                    "input_border": {
                                       "type": "string",
                                       "description": "Input border"
                                    },
                                    "input_filled_text": {
                                       "type": "string",
                                       "description": "Input filled text"
                                    },
                                    "input_labels_placeholders": {
                                       "type": "string",
                                       "description": "Input labels & placeholders"
                                    },
                                    "links_focused_components": {
                                       "type": "string",
                                       "description": "Links & focused components"
                                    },
                                    "primary_button": {
                                       "type": "string",
                                       "description": "Primary button"
                                    },
                                    "primary_button_label": {
                                       "type": "string",
                                       "description": "Primary button label"
                                    },
                                    "secondary_button_border": {
                                       "type": "string",
                                       "description": "Secondary button border"
                                    },
                                    "secondary_button_label": {
                                       "type": "string",
                                       "description": "Secondary button label"
                                    },
                                    "success": {
                                       "type": "string",
                                       "description": "Success"
                                    },
                                    "widget_background": {
                                       "type": "string",
                                       "description": "Widget background"
                                    },
                                    "widget_border": {
                                       "type": "string",
                                       "description": "Widget border"
                                    }
                                 }
                              },
                              "displayName": {
                                 "type": "string",
                                 "description": "Display Name",
                                 "maxLength": 2048
                              },
                              "fonts": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "buttons_text",
                                    "font_url",
                                    "input_labels",
                                    "links",
                                    "links_style",
                                    "reference_text_size",
                                    "subtitle",
                                    "title"
                                 ],
                                 "properties": {
                                    "body_text": {
                                       "type": "object",
                                       "description": "Body text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Body text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Body text size"
                                          }
                                       }
                                    },
                                    "buttons_text": {
                                       "type": "object",
                                       "description": "Buttons text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Buttons text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Buttons text size"
                                          }
                                       }
                                    },
                                    "font_url": {
                                       "type": "string",
                                       "description": "Font URL"
                                    },
                                    "input_labels": {
                                       "type": "object",
                                       "description": "Input Labels",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Input Labels bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Input Labels size"
                                          }
                                       }
                                    },
                                    "links": {
                                       "type": "object",
                                       "description": "Links",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Links bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Links size"
                                          }
                                       }
                                    },
                                    "links_style": {
                                       "type": "string",
                                       "description": "Links style",
                                       "enum": [
                                          "normal",
                                          "underlined"
                                       ]
                                    },
                                    "reference_text_size": {
                                       "type": "number",
                                       "description": "Reference text size"
                                    },
                                    "subtitle": {
                                       "type": "object",
                                       "description": "Subtitle",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Subtitle bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Subtitle size"
                                          }
                                       }
                                    },
                                    "title": {
                                       "type": "object",
                                       "description": "Title",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Title bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Title size"
                                          }
                                       }
                                    }
                                 }
                              },
                              "page_background": {
                                 "type": "object",
                                 "required": [
                                    "background_color",
                                    "background_image_url",
                                    "page_layout"
                                 ],
                                 "properties": {
                                    "background_color": {
                                       "type": "string",
                                       "description": "Background color"
                                    },
                                    "background_image_url": {
                                       "type": "string",
                                       "description": "Background image url"
                                    },
                                    "page_layout": {
                                       "type": "string",
                                       "description": "Page Layout",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    }
                                 }
                              },
                              "themeId": {
                                 "type": "string",
                                 "description": "Theme Id",
                                 "maxLength": 32
                              },
                              "widget": {
                                 "type": "object",
                                 "required": [
                                    "header_text_alignment",
                                    "logo_height",
                                    "logo_position",
                                    "logo_url",
                                    "social_buttons_layout"
                                 ],
                                 "properties": {
                                    "header_text_alignment": {
                                       "type": "string",
                                       "description": "Header text alignment",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    },
                                    "logo_height": {
                                       "type": "number",
                                       "description": "Logo height"
                                    },
                                    "logo_position": {
                                       "type": "string",
                                       "description": "Logo position",
                                       "enum": [
                                          "center",
                                          "left",
                                          "none",
                                          "right"
                                       ]
                                    },
                                    "logo_url": {
                                       "type": "string",
                                       "description": "Logo url"
                                    },
                                    "social_buttons_layout": {
                                       "type": "string",
                                       "description": "Social buttons layout",
                                       "enum": [
                                          "bottom",
                                          "top"
                                       ]
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Your account does not have universal login customizations enabled"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:branding."
               },
               "404": {
                  "description": "There was an error retrieving branding settings: invalid theme ID"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_branding_theme",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:branding"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete branding theme",
            "description": "Delete branding theme.",
            "tags": [
               "branding"
            ],
            "parameters": [
               {
                  "name": "themeId",
                  "in": "path",
                  "description": "The ID of the theme",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Branding theme successfully deleted."
               },
               "400": {
                  "description": "Your account does not have universal login customizations enabled"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:branding."
               },
               "404": {
                  "description": "There was an error deleting branding settings: invalid theme ID"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_branding_theme",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:branding"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update branding theme",
            "description": "Update branding theme.",
            "tags": [
               "branding"
            ],
            "parameters": [
               {
                  "name": "themeId",
                  "in": "path",
                  "description": "The ID of the theme",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "Branding theme",
                        "required": [
                           "borders",
                           "colors",
                           "fonts",
                           "page_background",
                           "widget"
                        ],
                        "properties": {
                           "borders": {
                              "type": "object",
                              "required": [
                                 "button_border_radius",
                                 "button_border_weight",
                                 "buttons_style",
                                 "input_border_radius",
                                 "input_border_weight",
                                 "inputs_style",
                                 "show_widget_shadow",
                                 "widget_border_weight",
                                 "widget_corner_radius"
                              ],
                              "properties": {
                                 "button_border_radius": {
                                    "type": "number",
                                    "description": "Button border radius"
                                 },
                                 "button_border_weight": {
                                    "type": "number",
                                    "description": "Button border weight"
                                 },
                                 "buttons_style": {
                                    "type": "string",
                                    "description": "Buttons style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "input_border_radius": {
                                    "type": "number",
                                    "description": "Input border radius"
                                 },
                                 "input_border_weight": {
                                    "type": "number",
                                    "description": "Input border weight"
                                 },
                                 "inputs_style": {
                                    "type": "string",
                                    "description": "Inputs style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "show_widget_shadow": {
                                    "type": "boolean",
                                    "description": "Show widget shadow"
                                 },
                                 "widget_border_weight": {
                                    "type": "number",
                                    "description": "Widget border weight"
                                 },
                                 "widget_corner_radius": {
                                    "type": "number",
                                    "description": "Widget corner radius"
                                 }
                              }
                           },
                           "colors": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "error",
                                 "header",
                                 "icons",
                                 "input_background",
                                 "input_border",
                                 "input_filled_text",
                                 "input_labels_placeholders",
                                 "links_focused_components",
                                 "primary_button",
                                 "primary_button_label",
                                 "secondary_button_border",
                                 "secondary_button_label",
                                 "success",
                                 "widget_background",
                                 "widget_border"
                              ],
                              "properties": {
                                 "base_focus_color": {
                                    "type": "string",
                                    "description": "Base Focus Color"
                                 },
                                 "base_hover_color": {
                                    "type": "string",
                                    "description": "Base Hover Color"
                                 },
                                 "body_text": {
                                    "type": "string",
                                    "description": "Body text"
                                 },
                                 "error": {
                                    "type": "string",
                                    "description": "Error"
                                 },
                                 "header": {
                                    "type": "string",
                                    "description": "Header"
                                 },
                                 "icons": {
                                    "type": "string",
                                    "description": "Icons"
                                 },
                                 "input_background": {
                                    "type": "string",
                                    "description": "Input background"
                                 },
                                 "input_border": {
                                    "type": "string",
                                    "description": "Input border"
                                 },
                                 "input_filled_text": {
                                    "type": "string",
                                    "description": "Input filled text"
                                 },
                                 "input_labels_placeholders": {
                                    "type": "string",
                                    "description": "Input labels & placeholders"
                                 },
                                 "links_focused_components": {
                                    "type": "string",
                                    "description": "Links & focused components"
                                 },
                                 "primary_button": {
                                    "type": "string",
                                    "description": "Primary button"
                                 },
                                 "primary_button_label": {
                                    "type": "string",
                                    "description": "Primary button label"
                                 },
                                 "secondary_button_border": {
                                    "type": "string",
                                    "description": "Secondary button border"
                                 },
                                 "secondary_button_label": {
                                    "type": "string",
                                    "description": "Secondary button label"
                                 },
                                 "success": {
                                    "type": "string",
                                    "description": "Success"
                                 },
                                 "widget_background": {
                                    "type": "string",
                                    "description": "Widget background"
                                 },
                                 "widget_border": {
                                    "type": "string",
                                    "description": "Widget border"
                                 }
                              }
                           },
                           "displayName": {
                              "type": "string",
                              "description": "Display Name",
                              "maxLength": 2048
                           },
                           "fonts": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "buttons_text",
                                 "font_url",
                                 "input_labels",
                                 "links",
                                 "links_style",
                                 "reference_text_size",
                                 "subtitle",
                                 "title"
                              ],
                              "properties": {
                                 "body_text": {
                                    "type": "object",
                                    "description": "Body text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Body text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Body text size"
                                       }
                                    }
                                 },
                                 "buttons_text": {
                                    "type": "object",
                                    "description": "Buttons text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Buttons text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Buttons text size"
                                       }
                                    }
                                 },
                                 "font_url": {
                                    "type": "string",
                                    "description": "Font URL"
                                 },
                                 "input_labels": {
                                    "type": "object",
                                    "description": "Input Labels",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Input Labels bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Input Labels size"
                                       }
                                    }
                                 },
                                 "links": {
                                    "type": "object",
                                    "description": "Links",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Links bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Links size"
                                       }
                                    }
                                 },
                                 "links_style": {
                                    "type": "string",
                                    "description": "Links style",
                                    "enum": [
                                       "normal",
                                       "underlined"
                                    ]
                                 },
                                 "reference_text_size": {
                                    "type": "number",
                                    "description": "Reference text size"
                                 },
                                 "subtitle": {
                                    "type": "object",
                                    "description": "Subtitle",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Subtitle bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Subtitle size"
                                       }
                                    }
                                 },
                                 "title": {
                                    "type": "object",
                                    "description": "Title",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Title bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Title size"
                                       }
                                    }
                                 }
                              }
                           },
                           "page_background": {
                              "type": "object",
                              "required": [
                                 "background_color",
                                 "background_image_url",
                                 "page_layout"
                              ],
                              "properties": {
                                 "background_color": {
                                    "type": "string",
                                    "description": "Background color"
                                 },
                                 "background_image_url": {
                                    "type": "string",
                                    "description": "Background image url"
                                 },
                                 "page_layout": {
                                    "type": "string",
                                    "description": "Page Layout",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 }
                              }
                           },
                           "widget": {
                              "type": "object",
                              "required": [
                                 "header_text_alignment",
                                 "logo_height",
                                 "logo_position",
                                 "logo_url",
                                 "social_buttons_layout"
                              ],
                              "properties": {
                                 "header_text_alignment": {
                                    "type": "string",
                                    "description": "Header text alignment",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 },
                                 "logo_height": {
                                    "type": "number",
                                    "description": "Logo height"
                                 },
                                 "logo_position": {
                                    "type": "string",
                                    "description": "Logo position",
                                    "enum": [
                                       "center",
                                       "left",
                                       "none",
                                       "right"
                                    ]
                                 },
                                 "logo_url": {
                                    "type": "string",
                                    "description": "Logo url"
                                 },
                                 "social_buttons_layout": {
                                    "type": "string",
                                    "description": "Social buttons layout",
                                    "enum": [
                                       "bottom",
                                       "top"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "Branding theme",
                        "required": [
                           "borders",
                           "colors",
                           "fonts",
                           "page_background",
                           "widget"
                        ],
                        "properties": {
                           "borders": {
                              "type": "object",
                              "required": [
                                 "button_border_radius",
                                 "button_border_weight",
                                 "buttons_style",
                                 "input_border_radius",
                                 "input_border_weight",
                                 "inputs_style",
                                 "show_widget_shadow",
                                 "widget_border_weight",
                                 "widget_corner_radius"
                              ],
                              "properties": {
                                 "button_border_radius": {
                                    "type": "number",
                                    "description": "Button border radius"
                                 },
                                 "button_border_weight": {
                                    "type": "number",
                                    "description": "Button border weight"
                                 },
                                 "buttons_style": {
                                    "type": "string",
                                    "description": "Buttons style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "input_border_radius": {
                                    "type": "number",
                                    "description": "Input border radius"
                                 },
                                 "input_border_weight": {
                                    "type": "number",
                                    "description": "Input border weight"
                                 },
                                 "inputs_style": {
                                    "type": "string",
                                    "description": "Inputs style",
                                    "enum": [
                                       "pill",
                                       "rounded",
                                       "sharp"
                                    ]
                                 },
                                 "show_widget_shadow": {
                                    "type": "boolean",
                                    "description": "Show widget shadow"
                                 },
                                 "widget_border_weight": {
                                    "type": "number",
                                    "description": "Widget border weight"
                                 },
                                 "widget_corner_radius": {
                                    "type": "number",
                                    "description": "Widget corner radius"
                                 }
                              }
                           },
                           "colors": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "error",
                                 "header",
                                 "icons",
                                 "input_background",
                                 "input_border",
                                 "input_filled_text",
                                 "input_labels_placeholders",
                                 "links_focused_components",
                                 "primary_button",
                                 "primary_button_label",
                                 "secondary_button_border",
                                 "secondary_button_label",
                                 "success",
                                 "widget_background",
                                 "widget_border"
                              ],
                              "properties": {
                                 "base_focus_color": {
                                    "type": "string",
                                    "description": "Base Focus Color"
                                 },
                                 "base_hover_color": {
                                    "type": "string",
                                    "description": "Base Hover Color"
                                 },
                                 "body_text": {
                                    "type": "string",
                                    "description": "Body text"
                                 },
                                 "error": {
                                    "type": "string",
                                    "description": "Error"
                                 },
                                 "header": {
                                    "type": "string",
                                    "description": "Header"
                                 },
                                 "icons": {
                                    "type": "string",
                                    "description": "Icons"
                                 },
                                 "input_background": {
                                    "type": "string",
                                    "description": "Input background"
                                 },
                                 "input_border": {
                                    "type": "string",
                                    "description": "Input border"
                                 },
                                 "input_filled_text": {
                                    "type": "string",
                                    "description": "Input filled text"
                                 },
                                 "input_labels_placeholders": {
                                    "type": "string",
                                    "description": "Input labels & placeholders"
                                 },
                                 "links_focused_components": {
                                    "type": "string",
                                    "description": "Links & focused components"
                                 },
                                 "primary_button": {
                                    "type": "string",
                                    "description": "Primary button"
                                 },
                                 "primary_button_label": {
                                    "type": "string",
                                    "description": "Primary button label"
                                 },
                                 "secondary_button_border": {
                                    "type": "string",
                                    "description": "Secondary button border"
                                 },
                                 "secondary_button_label": {
                                    "type": "string",
                                    "description": "Secondary button label"
                                 },
                                 "success": {
                                    "type": "string",
                                    "description": "Success"
                                 },
                                 "widget_background": {
                                    "type": "string",
                                    "description": "Widget background"
                                 },
                                 "widget_border": {
                                    "type": "string",
                                    "description": "Widget border"
                                 }
                              }
                           },
                           "displayName": {
                              "type": "string",
                              "description": "Display Name",
                              "maxLength": 2048
                           },
                           "fonts": {
                              "type": "object",
                              "required": [
                                 "body_text",
                                 "buttons_text",
                                 "font_url",
                                 "input_labels",
                                 "links",
                                 "links_style",
                                 "reference_text_size",
                                 "subtitle",
                                 "title"
                              ],
                              "properties": {
                                 "body_text": {
                                    "type": "object",
                                    "description": "Body text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Body text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Body text size"
                                       }
                                    }
                                 },
                                 "buttons_text": {
                                    "type": "object",
                                    "description": "Buttons text",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Buttons text bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Buttons text size"
                                       }
                                    }
                                 },
                                 "font_url": {
                                    "type": "string",
                                    "description": "Font URL"
                                 },
                                 "input_labels": {
                                    "type": "object",
                                    "description": "Input Labels",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Input Labels bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Input Labels size"
                                       }
                                    }
                                 },
                                 "links": {
                                    "type": "object",
                                    "description": "Links",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Links bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Links size"
                                       }
                                    }
                                 },
                                 "links_style": {
                                    "type": "string",
                                    "description": "Links style",
                                    "enum": [
                                       "normal",
                                       "underlined"
                                    ]
                                 },
                                 "reference_text_size": {
                                    "type": "number",
                                    "description": "Reference text size"
                                 },
                                 "subtitle": {
                                    "type": "object",
                                    "description": "Subtitle",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Subtitle bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Subtitle size"
                                       }
                                    }
                                 },
                                 "title": {
                                    "type": "object",
                                    "description": "Title",
                                    "required": [
                                       "bold",
                                       "size"
                                    ],
                                    "properties": {
                                       "bold": {
                                          "type": "boolean",
                                          "description": "Title bold"
                                       },
                                       "size": {
                                          "type": "number",
                                          "description": "Title size"
                                       }
                                    }
                                 }
                              }
                           },
                           "page_background": {
                              "type": "object",
                              "required": [
                                 "background_color",
                                 "background_image_url",
                                 "page_layout"
                              ],
                              "properties": {
                                 "background_color": {
                                    "type": "string",
                                    "description": "Background color"
                                 },
                                 "background_image_url": {
                                    "type": "string",
                                    "description": "Background image url"
                                 },
                                 "page_layout": {
                                    "type": "string",
                                    "description": "Page Layout",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 }
                              }
                           },
                           "widget": {
                              "type": "object",
                              "required": [
                                 "header_text_alignment",
                                 "logo_height",
                                 "logo_position",
                                 "logo_url",
                                 "social_buttons_layout"
                              ],
                              "properties": {
                                 "header_text_alignment": {
                                    "type": "string",
                                    "description": "Header text alignment",
                                    "enum": [
                                       "center",
                                       "left",
                                       "right"
                                    ]
                                 },
                                 "logo_height": {
                                    "type": "number",
                                    "description": "Logo height"
                                 },
                                 "logo_position": {
                                    "type": "string",
                                    "description": "Logo position",
                                    "enum": [
                                       "center",
                                       "left",
                                       "none",
                                       "right"
                                    ]
                                 },
                                 "logo_url": {
                                    "type": "string",
                                    "description": "Logo url"
                                 },
                                 "social_buttons_layout": {
                                    "type": "string",
                                    "description": "Social buttons layout",
                                    "enum": [
                                       "bottom",
                                       "top"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Branding settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "borders",
                              "colors",
                              "displayName",
                              "fonts",
                              "page_background",
                              "themeId",
                              "widget"
                           ],
                           "properties": {
                              "borders": {
                                 "type": "object",
                                 "required": [
                                    "button_border_radius",
                                    "button_border_weight",
                                    "buttons_style",
                                    "input_border_radius",
                                    "input_border_weight",
                                    "inputs_style",
                                    "show_widget_shadow",
                                    "widget_border_weight",
                                    "widget_corner_radius"
                                 ],
                                 "properties": {
                                    "button_border_radius": {
                                       "type": "number",
                                       "description": "Button border radius"
                                    },
                                    "button_border_weight": {
                                       "type": "number",
                                       "description": "Button border weight"
                                    },
                                    "buttons_style": {
                                       "type": "string",
                                       "description": "Buttons style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "input_border_radius": {
                                       "type": "number",
                                       "description": "Input border radius"
                                    },
                                    "input_border_weight": {
                                       "type": "number",
                                       "description": "Input border weight"
                                    },
                                    "inputs_style": {
                                       "type": "string",
                                       "description": "Inputs style",
                                       "enum": [
                                          "pill",
                                          "rounded",
                                          "sharp"
                                       ]
                                    },
                                    "show_widget_shadow": {
                                       "type": "boolean",
                                       "description": "Show widget shadow"
                                    },
                                    "widget_border_weight": {
                                       "type": "number",
                                       "description": "Widget border weight"
                                    },
                                    "widget_corner_radius": {
                                       "type": "number",
                                       "description": "Widget corner radius"
                                    }
                                 }
                              },
                              "colors": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "error",
                                    "header",
                                    "icons",
                                    "input_background",
                                    "input_border",
                                    "input_filled_text",
                                    "input_labels_placeholders",
                                    "links_focused_components",
                                    "primary_button",
                                    "primary_button_label",
                                    "secondary_button_border",
                                    "secondary_button_label",
                                    "success",
                                    "widget_background",
                                    "widget_border"
                                 ],
                                 "properties": {
                                    "base_focus_color": {
                                       "type": "string",
                                       "description": "Base Focus Color"
                                    },
                                    "base_hover_color": {
                                       "type": "string",
                                       "description": "Base Hover Color"
                                    },
                                    "body_text": {
                                       "type": "string",
                                       "description": "Body text"
                                    },
                                    "error": {
                                       "type": "string",
                                       "description": "Error"
                                    },
                                    "header": {
                                       "type": "string",
                                       "description": "Header"
                                    },
                                    "icons": {
                                       "type": "string",
                                       "description": "Icons"
                                    },
                                    "input_background": {
                                       "type": "string",
                                       "description": "Input background"
                                    },
                                    "input_border": {
                                       "type": "string",
                                       "description": "Input border"
                                    },
                                    "input_filled_text": {
                                       "type": "string",
                                       "description": "Input filled text"
                                    },
                                    "input_labels_placeholders": {
                                       "type": "string",
                                       "description": "Input labels & placeholders"
                                    },
                                    "links_focused_components": {
                                       "type": "string",
                                       "description": "Links & focused components"
                                    },
                                    "primary_button": {
                                       "type": "string",
                                       "description": "Primary button"
                                    },
                                    "primary_button_label": {
                                       "type": "string",
                                       "description": "Primary button label"
                                    },
                                    "secondary_button_border": {
                                       "type": "string",
                                       "description": "Secondary button border"
                                    },
                                    "secondary_button_label": {
                                       "type": "string",
                                       "description": "Secondary button label"
                                    },
                                    "success": {
                                       "type": "string",
                                       "description": "Success"
                                    },
                                    "widget_background": {
                                       "type": "string",
                                       "description": "Widget background"
                                    },
                                    "widget_border": {
                                       "type": "string",
                                       "description": "Widget border"
                                    }
                                 }
                              },
                              "displayName": {
                                 "type": "string",
                                 "description": "Display Name",
                                 "maxLength": 2048
                              },
                              "fonts": {
                                 "type": "object",
                                 "required": [
                                    "body_text",
                                    "buttons_text",
                                    "font_url",
                                    "input_labels",
                                    "links",
                                    "links_style",
                                    "reference_text_size",
                                    "subtitle",
                                    "title"
                                 ],
                                 "properties": {
                                    "body_text": {
                                       "type": "object",
                                       "description": "Body text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Body text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Body text size"
                                          }
                                       }
                                    },
                                    "buttons_text": {
                                       "type": "object",
                                       "description": "Buttons text",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Buttons text bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Buttons text size"
                                          }
                                       }
                                    },
                                    "font_url": {
                                       "type": "string",
                                       "description": "Font URL"
                                    },
                                    "input_labels": {
                                       "type": "object",
                                       "description": "Input Labels",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Input Labels bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Input Labels size"
                                          }
                                       }
                                    },
                                    "links": {
                                       "type": "object",
                                       "description": "Links",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Links bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Links size"
                                          }
                                       }
                                    },
                                    "links_style": {
                                       "type": "string",
                                       "description": "Links style",
                                       "enum": [
                                          "normal",
                                          "underlined"
                                       ]
                                    },
                                    "reference_text_size": {
                                       "type": "number",
                                       "description": "Reference text size"
                                    },
                                    "subtitle": {
                                       "type": "object",
                                       "description": "Subtitle",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Subtitle bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Subtitle size"
                                          }
                                       }
                                    },
                                    "title": {
                                       "type": "object",
                                       "description": "Title",
                                       "required": [
                                          "bold",
                                          "size"
                                       ],
                                       "properties": {
                                          "bold": {
                                             "type": "boolean",
                                             "description": "Title bold"
                                          },
                                          "size": {
                                             "type": "number",
                                             "description": "Title size"
                                          }
                                       }
                                    }
                                 }
                              },
                              "page_background": {
                                 "type": "object",
                                 "required": [
                                    "background_color",
                                    "background_image_url",
                                    "page_layout"
                                 ],
                                 "properties": {
                                    "background_color": {
                                       "type": "string",
                                       "description": "Background color"
                                    },
                                    "background_image_url": {
                                       "type": "string",
                                       "description": "Background image url"
                                    },
                                    "page_layout": {
                                       "type": "string",
                                       "description": "Page Layout",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    }
                                 }
                              },
                              "themeId": {
                                 "type": "string",
                                 "description": "Theme Id",
                                 "maxLength": 32
                              },
                              "widget": {
                                 "type": "object",
                                 "required": [
                                    "header_text_alignment",
                                    "logo_height",
                                    "logo_position",
                                    "logo_url",
                                    "social_buttons_layout"
                                 ],
                                 "properties": {
                                    "header_text_alignment": {
                                       "type": "string",
                                       "description": "Header text alignment",
                                       "enum": [
                                          "center",
                                          "left",
                                          "right"
                                       ]
                                    },
                                    "logo_height": {
                                       "type": "number",
                                       "description": "Logo height"
                                    },
                                    "logo_position": {
                                       "type": "string",
                                       "description": "Logo position",
                                       "enum": [
                                          "center",
                                          "left",
                                          "none",
                                          "right"
                                       ]
                                    },
                                    "logo_url": {
                                       "type": "string",
                                       "description": "Logo url"
                                    },
                                    "social_buttons_layout": {
                                       "type": "string",
                                       "description": "Social buttons layout",
                                       "enum": [
                                          "bottom",
                                          "top"
                                       ]
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Your account does not have universal login customizations enabled"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:branding."
               },
               "404": {
                  "description": "There was an error updating branding settings: invalid theme ID"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_branding_theme",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:branding"
                  ]
               }
            ]
         }
      },
      "/client-grants": {
         "get": {
            "summary": "Get client grants",
            "description": "Retrieve <a href=\"https://auth0.com/docs/api-auth/grant/client-credentials\">client grants</a>.\\n",
            "tags": [
               "client-grants"
            ],
            "parameters": [
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "audience",
                  "in": "query",
                  "description": "Optional filter on audience.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "client_id",
                  "in": "query",
                  "description": "Optional filter on client_id.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Client grants successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/clientGrant"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "client_grants": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/clientGrant"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:client_grants."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_client-grants",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:client_grants"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create client grant",
            "description": "Create a client grant.",
            "tags": [
               "client-grants"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/clientGrantCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/clientGrantCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Client grant successfully created."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:client_grants."
               },
               "404": {
                  "description": "Client not found"
               },
               "409": {
                  "description": "A resource server with the same identifier already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_client-grants",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:client_grants"
                  ]
               }
            ]
         }
      },
      "/client-grants/{id}": {
         "delete": {
            "summary": "Delete client grant",
            "description": "Delete a client grant.",
            "tags": [
               "client-grants"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client grant to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^cgr_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Client grant successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:client_grants."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_client-grants_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:client_grants"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update client grant",
            "description": "Update a client grant.",
            "tags": [
               "client-grants"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client grant to update.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^cgr_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "scope": {
                              "type": "array",
                              "description": "Scopes allowed for this client grant.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 280
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "scope": {
                              "type": "array",
                              "description": "Scopes allowed for this client grant.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 280
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Client grant successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/clientGrant"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:client_grants."
               },
               "404": {
                  "description": "The client grant does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_client-grants_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:client_grants"
                  ]
               }
            ]
         }
      },
      "/clients": {
         "get": {
            "summary": "Get clients",
            "description": "Retrieve clients (applications and SSO integrations) matching provided filters. A list of fields to include or exclude\\nmay also be specified. Note:\\n<ul>\\n  <li>\\n    <code>client_id<\/code>, <code>app_type<\/code>, <code>name<\/code>, and <code>description<\/code> can be retrieved with\\n    any scope.\\n  </li>\\n  <li>\\n    <code>callbacks<\/code>, <code>oidc_backchannel_logout<\/code>, <code>allowed_origins<\/code>,\\n    <code>web_origins<\/code>, <code>tenant<\/code>, <code>global<\/code>, <code>config_route<\/code>,\\n    <code>callback_url_template<\/code>, <code>jwt_configuration<\/code>,\\n    <code>jwt_configuration.lifetime_in_seconds<\/code>, <code>jwt_configuration.secret_encoded<\/code>,\\n    <code>jwt_configuration.scopes<\/code>, <code>jwt_configuration.alg<\/code>, <code>api_type<\/code>,\\n    <code>logo_uri<\/code>, <code>allowed_clients<\/code>, <code>owners<\/code>, <code>custom_login_page<\/code>,\\n    <code>custom_login_page_off<\/code>, <code>sso<\/code>, <code>addons<\/code>, <code>form_template<\/code>,\\n    <code>custom_login_page_codeview<\/code>, <code>resource_servers<\/code>, <code>client_metadata<\/code>,\\n    <code>mobile<\/code>, <code>mobile.android<\/code>, <code>mobile.ios<\/code>, <code>allowed_logout_urls<\/code>,\\n    <code>token_endpoint_auth_method<\/code>, <code>is_first_party<\/code>, <code>oidc_conformant<\/code>,\\n    <code>is_token_endpoint_ip_header_trusted<\/code>, <code>initiate_login_uri<\/code>, <code>grant_types<\/code>,\\n    <code>refresh_token<\/code>, <code>refresh_token.rotation_type<\/code>, <code>refresh_token.expiration_type<\/code>,\\n    <code>refresh_token.leeway<\/code>, <code>refresh_token.token_lifetime<\/code>, <code>organization_usage<\/code>, and\\n    <code>organization_require_behavior<\/code> properties can only be retrieved with the <code>read:clients<\/code> or\\n    <code>read:client_keys<\/code> scope.\\n  </li>\\n  <li>\\n    <code>encryption_key<\/code>, <code>encryption_key.pub<\/code>, <code>encryption_key.cert<\/code>,\\n    <code>client_secret<\/code>, and <code>signing_key<\/code> properties can only be retrieved with the\\n    <code>read:client_keys<\/code> scope.\\n  </li>\\n</ul>\\n",
            "tags": [
               "clients"
            ],
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(description)|(callbacks)|(oidc_backchannel_logout)|(allowed_origins)|(web_origins)|(client_id)|(tenant)|(global)|(config_route)|(callback_url_template)|(jwt_configuration)|(jwt_configuration\\.lifetime_in_seconds)|(jwt_configuration\\.secret_encoded)|(jwt_configuration\\.scopes)|(jwt_configuration\\.alg)|(api_type)|(logo_uri)|(allowed_clients)|(owners)|(custom_login_page)|(custom_login_page_on)|(sso)|(addons)|(form_template)|(custom_login_page_preview)|(encryption_key)|(encryption_key\\.pub)|(encryption_key\\.cert)|(client_secret)|(signing_keys)|(mobile)|(mobile\\.android)|(mobile\\.ios)|(token_endpoint_auth_method)|(allowed_logout_urls)|(app_type)|(is_first_party)|(oidc_conformant)|(client_metadata)|(is_token_endpoint_ip_header_trusted)|(initiate_login_uri)|(grant_types)|(refresh_token)|(refresh_token\\.rotation_type)|(refresh_token\\.expiration_type)|(refresh_token\\.leeway)|(refresh_token\\.token_lifetime)|(organization_usage)|(organization_require_behavior)|(client_authentication_methods)|(client_authentication_methods\\.private_key_jwt)|(require_pushed_authorization_requests))(,((name)|(description)|(callbacks)|(oidc_backchannel_logout)|(allowed_origins)|(web_origins)|(client_id)|(tenant)|(global)|(config_route)|(callback_url_template)|(jwt_configuration)|(jwt_configuration\\.lifetime_in_seconds)|(jwt_configuration\\.secret_encoded)|(jwt_configuration\\.scopes)|(jwt_configuration\\.alg)|(api_type)|(logo_uri)|(allowed_clients)|(owners)|(custom_login_page)|(custom_login_page_on)|(sso)|(addons)|(form_template)|(custom_login_page_preview)|(encryption_key)|(encryption_key\\.pub)|(encryption_key\\.cert)|(client_secret)|(signing_keys)|(mobile)|(mobile\\.android)|(mobile\\.ios)|(token_endpoint_auth_method)|(allowed_logout_urls)|(app_type)|(is_first_party)|(oidc_conformant)|(client_metadata)|(is_token_endpoint_ip_header_trusted)|(initiate_login_uri)|(grant_types)|(refresh_token)|(refresh_token\\.rotation_type)|(refresh_token\\.expiration_type)|(refresh_token\\.leeway)|(refresh_token\\.token_lifetime)|(organization_usage)|(organization_require_behavior)|(client_authentication_methods)|(client_authentication_methods\\.private_key_jwt)|(require_pushed_authorization_requests)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Default value is 50, maximum value is 100",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "is_global",
                  "in": "query",
                  "description": "Optional filter on the global client parameter.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "is_first_party",
                  "in": "query",
                  "description": "Optional filter on whether or not a client is a first-party client.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "app_type",
                  "in": "query",
                  "description": "Optional filter by a comma-separated list of application types.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((native)|(spa)|(regular_web)|(non_interactive)|(rms)|(box)|(cloudbees)|(concur)|(dropbox)|(mscrm)|(echosign)|(egnyte)|(newrelic)|(office365)|(salesforce)|(sentry)|(sharepoint)|(slack)|(springcm)|(zendesk)|(zoom)|(sso_integration))(,((native)|(spa)|(regular_web)|(non_interactive)|(rms)|(box)|(cloudbees)|(concur)|(dropbox)|(mscrm)|(echosign)|(egnyte)|(newrelic)|(office365)|(salesforce)|(sentry)|(sharepoint)|(slack)|(springcm)|(zendesk)|(zoom)|(sso_integration)))*$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Clients successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/client"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_clients",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:clients",
                     "read:client_keys",
                     "read:client_credentials",
                     "read:client_summary"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a client",
            "description": "Create a new client (application or SSO integration).\\n\\nNote: We recommend leaving the `client_secret` parameter unspecified to allow the generation of a safe secret.\\n\\n<div class=\"alert alert-warning\">SSO Integrations created via this endpoint will accept login requests and share user profile information.</div>\\n",
            "tags": [
               "clients"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/clientCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/clientCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Client successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/client"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Organizations are only available to first party clients."
               },
               "409": {
                  "description": "Another client exists with the same alias."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_clients",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:clients"
                  ]
               }
            ]
         }
      },
      "/clients/{id}": {
         "get": {
            "summary": "Get a client",
            "description": "Retrieve client details. A list of fields to include or exclude may also be specified. Note:\\n<ul>\\n  <li>\\n    <code>client_id<\/code>, <code>app_type<\/code>, <code>name<\/code>, and <code>description<\/code> can be retrieved with\\n    the any of the scopes.\\n  </li>\\n  <li>\\n    <code>callbacks<\/code>, <code>oidc_backchannel_logout<\/code>, <code>allowed_origins<\/code>,\\n    <code>web_origins<\/code>, <code>tenant<\/code>, <code>global<\/code>, <code>config_route<\/code>,\\n    <code>callback_url_template<\/code>, <code>jwt_configuration<\/code>,\\n    <code>jwt_configuration.lifetime_in_seconds<\/code>, <code>jwt_configuration.secret_encoded<\/code>,\\n    <code>jwt_configuration.scopes<\/code>, <code>jwt_configuration.alg<\/code>, <code>api_type<\/code>,\\n    <code>logo_uri<\/code>, <code>allowed_clients<\/code>, <code>owners<\/code>, <code>custom_login_page<\/code>,\\n    <code>custom_login_page_off<\/code>, <code>sso<\/code>, <code>addons<\/code>, <code>form_template<\/code>,\\n    <code>custom_login_page_codeview<\/code>, <code>resource_servers<\/code>, <code>client_metadata<\/code>,\\n    <code>mobile<\/code>, <code>mobile.android<\/code>, <code>mobile.ios<\/code>, <code>allowed_logout_urls<\/code>,\\n    <code>token_endpoint_auth_method<\/code>, <code>is_first_party<\/code>, <code>oidc_conformant<\/code>,\\n    <code>is_token_endpoint_ip_header_trusted<\/code>, <code>initiate_login_uri<\/code>, <code>grant_types<\/code>,\\n    <code>refresh_token<\/code>, <code>refresh_token.rotation_type<\/code>, <code>refresh_token.expiration_type<\/code>,\\n    <code>refresh_token.leeway<\/code>, <code>refresh_token.token_lifetime<\/code>, <code>organization_usage<\/code>, and\\n    <code>organization_require_behavior<\/code> properties can only be retrieved with the <code>read:clients<\/code> or\\n    <code>read:client_keys<\/code> scope.\\n  </li>\\n  <li>\\n    <code>encryption_key<\/code>, <code>encryption_key.pub<\/code>, <code>encryption_key.cert<\/code>,\\n    <code>client_secret<\/code>, and <code>signing_key<\/code> properties can only be retrieved with the\\n    <code>read:client_keys<\/code> scope.\\n  </li>\\n</ul>\\n",
            "tags": [
               "clients"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(description)|(callbacks)|(oidc_backchannel_logout)|(allowed_origins)|(web_origins)|(client_id)|(tenant)|(global)|(config_route)|(callback_url_template)|(jwt_configuration)|(jwt_configuration\\.lifetime_in_seconds)|(jwt_configuration\\.secret_encoded)|(jwt_configuration\\.scopes)|(jwt_configuration\\.alg)|(api_type)|(logo_uri)|(allowed_clients)|(owners)|(custom_login_page)|(custom_login_page_on)|(sso)|(addons)|(form_template)|(custom_login_page_preview)|(encryption_key)|(encryption_key\\.pub)|(encryption_key\\.cert)|(client_secret)|(signing_keys)|(mobile)|(mobile\\.android)|(mobile\\.ios)|(token_endpoint_auth_method)|(allowed_logout_urls)|(app_type)|(is_first_party)|(oidc_conformant)|(client_metadata)|(is_token_endpoint_ip_header_trusted)|(initiate_login_uri)|(grant_types)|(refresh_token)|(refresh_token\\.rotation_type)|(refresh_token\\.expiration_type)|(refresh_token\\.leeway)|(refresh_token\\.token_lifetime)|(organization_usage)|(organization_require_behavior)|(client_authentication_methods)|(client_authentication_methods\\.private_key_jwt)|(require_pushed_authorization_requests))(,((name)|(description)|(callbacks)|(oidc_backchannel_logout)|(allowed_origins)|(web_origins)|(client_id)|(tenant)|(global)|(config_route)|(callback_url_template)|(jwt_configuration)|(jwt_configuration\\.lifetime_in_seconds)|(jwt_configuration\\.secret_encoded)|(jwt_configuration\\.scopes)|(jwt_configuration\\.alg)|(api_type)|(logo_uri)|(allowed_clients)|(owners)|(custom_login_page)|(custom_login_page_on)|(sso)|(addons)|(form_template)|(custom_login_page_preview)|(encryption_key)|(encryption_key\\.pub)|(encryption_key\\.cert)|(client_secret)|(signing_keys)|(mobile)|(mobile\\.android)|(mobile\\.ios)|(token_endpoint_auth_method)|(allowed_logout_urls)|(app_type)|(is_first_party)|(oidc_conformant)|(client_metadata)|(is_token_endpoint_ip_header_trusted)|(initiate_login_uri)|(grant_types)|(refresh_token)|(refresh_token\\.rotation_type)|(refresh_token\\.expiration_type)|(refresh_token\\.leeway)|(refresh_token\\.token_lifetime)|(organization_usage)|(organization_require_behavior)|(client_authentication_methods)|(client_authentication_methods\\.private_key_jwt)|(require_pushed_authorization_requests)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Client successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/client"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
               },
               "404": {
                  "description": "Client not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_clients_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:clients",
                     "read:client_keys",
                     "read:client_credentials",
                     "read:client_summary"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a client",
            "description": "Delete a client and related configuration (rules, connections, etc).",
            "tags": [
               "clients"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Client successfully deleted."
               },
               "400": {
                  "description": "Global client cannot be deleted."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:clients."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_clients_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:clients"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a client",
            "description": "Note: The `client_secret` and `signing_key` attributes can only be updated with the `update:client_keys` scope.",
            "tags": [
               "clients"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/clientUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/clientUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Client successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/client"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Organizations are only available to first party clients."
               },
               "404": {
                  "description": "Client not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_clients_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:clients",
                     "update:client_keys",
                     "update:client_credentials"
                  ]
               }
            ]
         }
      },
      "/clients/{id}/rotate-secret": {
         "post": {
            "summary": "Rotate a client secret",
            "description": "Rotate a client secret.\\n\\nNote: The generated secret is NOT base64 encoded.\\n",
            "tags": [
               "clients"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the client that will rotate secrets.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Secret successfully rotated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/client"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Some fields cannot be updated with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
               },
               "404": {
                  "description": "Client not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_rotate-secret",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:client_keys"
                  ]
               }
            ]
         }
      },
      "/connections": {
         "get": {
            "summary": "Get all connections",
            "description": "Retrieves every connection matching the specified strategy. All connections are retrieved if no strategy is being specified. Accepts a list of fields to include or exclude in the resulting list of connection objects.\\n",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "The amount of entries per page. Default: no paging is used, all connections are returned",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "The page number. Zero based",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "true if a query summary must be included in the result, false otherwise. Default <code>false<\/code>.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "strategy",
                  "in": "query",
                  "description": "Provide strategies to only retrieve connections with such strategies",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "array",
                     "items": {
                        "type": "string",
                        "enum": [
                           "ad",
                           "adfs",
                           "amazon",
                           "apple",
                           "dropbox",
                           "bitbucket",
                           "aol",
                           "auth0-oidc",
                           "auth0",
                           "baidu",
                           "bitly",
                           "box",
                           "custom",
                           "daccount",
                           "dwolla",
                           "email",
                           "evernote-sandbox",
                           "evernote",
                           "exact",
                           "facebook",
                           "fitbit",
                           "flickr",
                           "github",
                           "google-apps",
                           "google-oauth2",
                           "instagram",
                           "ip",
                           "linkedin",
                           "miicard",
                           "oauth1",
                           "oauth2",
                           "office365",
                           "oidc",
                           "paypal",
                           "paypal-sandbox",
                           "pingfederate",
                           "planningcenter",
                           "renren",
                           "salesforce-community",
                           "salesforce-sandbox",
                           "salesforce",
                           "samlp",
                           "sharepoint",
                           "shopify",
                           "sms",
                           "soundcloud",
                           "thecity-sandbox",
                           "thecity",
                           "thirtysevensignals",
                           "twitter",
                           "untappd",
                           "vkontakte",
                           "waad",
                           "weibo",
                           "windowslive",
                           "wordpress",
                           "yahoo",
                           "yammer",
                           "yandex",
                           "line",
                           "auth0-adldap"
                        ],
                        "uniqueItems": true
                     }
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Provide the name of the connection to retrieve",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(display_name)|(strategy)|(options)|(enabled_clients)|(id)|(provisioning_ticket_url)|(metadata)|(show_as_button))(,((name)|(display_name)|(strategy)|(options)|(enabled_clients)|(id)|(provisioning_ticket_url)|(metadata)|(show_as_button)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "<code>true<\/code> if the fields specified are to be included in the result, <code>false<\/code> otherwise (defaults to <code>true<\/code>)",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The conections were retrieved. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/connection"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "connections": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/connection"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:connections"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_connections",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:connections"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a connection",
            "description": "Creates a new connection according to the JSON object received in <code>body<\/code>.<br/> The samples on the right show all available attributes. Mandatory attributes are <code>name<\/code> and <code>strategy<\/code>.<br/> Valid Strategy names are: <code>ad<\/code>, <code>adfs<\/code>, <code>amazon<\/code>, <code>apple<\/code>, <code>dropbox<\/code>, <code>bitbucket<\/code>, <code>aol<\/code>, <code>auth0-oidc<\/code>, <code>auth0<\/code>, <code>baidu<\/code>, <code>bitly<\/code>, <code>box<\/code>, <code>custom<\/code>, <code>daccount<\/code>, <code>dwolla<\/code>, <code>email<\/code>, <code>evernote-sandbox<\/code>, <code>evernote<\/code>, <code>exact<\/code>, <code>facebook<\/code>, <code>fitbit<\/code>, <code>flickr<\/code>, <code>github<\/code>, <code>google-apps<\/code>, <code>google-oauth2<\/code>, <code>instagram<\/code>, <code>ip<\/code>, <code>linkedin<\/code>, <code>miicard<\/code>, <code>oauth1<\/code>, <code>oauth2<\/code>, <code>office365<\/code>, <code>oidc<\/code>, <code>paypal<\/code>, <code>paypal-sandbox<\/code>, <code>pingfederate<\/code>, <code>planningcenter<\/code>, <code>renren<\/code>, <code>salesforce-community<\/code>, <code>salesforce-sandbox<\/code>, <code>salesforce<\/code>, <code>samlp<\/code>, <code>sharepoint<\/code>, <code>shopify<\/code>, <code>sms<\/code>, <code>soundcloud<\/code>, <code>thecity-sandbox<\/code>, <code>thecity<\/code>, <code>thirtysevensignals<\/code>, <code>twitter<\/code>, <code>untappd<\/code>, <code>vkontakte<\/code>, <code>waad<\/code>, <code>weibo<\/code>, <code>windowslive<\/code>, <code>wordpress<\/code>, <code>yahoo<\/code>, <code>yammer<\/code>, <code>yandex<\/code>, <code>line<\/code><br/><br/><div class=\"alert alert-warning\">Connections created via this endpoint may redirect users to log in, receive and store user identities, and update user root profiles</div>",
            "tags": [
               "connections"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/connectionCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/connectionCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "The connection was created. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/connection"
                        }
                     }
                  }
               },
               "400": {
                  "description": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "You reached the limit of entities of this type for this tenant."
               },
               "409": {
                  "description": "There is already a domain connection enabled for strategy"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_connections",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:connections"
                  ]
               }
            ]
         }
      },
      "/connections/{id}": {
         "get": {
            "summary": "Get a connection",
            "description": "Retrieves a connection by its <code>ID<\/code>.\\n",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the connection to retrieve",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(display_name)|(strategy)|(options)|(enabled_clients)|(id)|(provisioning_ticket_url)|(metadata)|(show_as_button))(,((name)|(display_name)|(strategy)|(options)|(enabled_clients)|(id)|(provisioning_ticket_url)|(metadata)|(show_as_button)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "<code>true<\/code> if the fields specified are to be included in the result, <code>false<\/code> otherwise (defaults to <code>true<\/code>)",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The connection was retrieved. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/connection"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:connections"
               },
               "404": {
                  "description": "The connection does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_connections_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:connections"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a connection",
            "description": "Deletes a connection and all its users.\\n",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the connection to delete",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "202": {
                  "description": "The connection is being deleted."
               },
               "204": {
                  "description": "The connection no longer exists."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: delete:connections"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_connections_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:connections"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a connection",
            "description": "<b>Note:</b> if you use the options parameter, the whole options object will be overridden, so ensure that all parameters are present\\n",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the connection to retrieve",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/connectionUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/connectionUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "The connection was updated. See <strong>Response Class</strong> below for schema.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/connection"
                        }
                     }
                  }
               },
               "400": {
                  "description": "options.set_user_root_attributes can be set only for enterprise connections, social connections or custom database connections (using external users store)"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: update:connections"
               },
               "404": {
                  "description": "The connection does not exist"
               },
               "409": {
                  "description": "The name/client_id tuple has already been used for another connection"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_connections_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:connections"
                  ]
               }
            ]
         }
      },
      "/connections/{id}/status": {
         "get": {
            "summary": "Check connection status",
            "description": "Retrieves the status of an ad/ldap connection referenced by its <code>ID<\/code>. <code>200 OK<\/code> http status code response is returned  when the connection is online, otherwise a <code>404<\/code> status code is returned along with an error message",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the connection to check",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Connection status successfully retrieved."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:connections."
               },
               "404": {
                  "description": "not connected to any node"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_status",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:connections"
                  ]
               }
            ]
         }
      },
      "/connections/{id}/users": {
         "delete": {
            "summary": "Delete a connection user",
            "description": "Deletes a specified connection user by its email (you cannot delete all users from specific connection). Currently, only Database Connections are supported.\\n",
            "tags": [
               "connections"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the connection (currently only database connections are supported)",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "The email of the user to delete",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "The user no longer exists."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: delete:users"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_users_by_email",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:users"
                  ]
               }
            ]
         }
      },
      "/custom-domains": {
         "get": {
            "summary": "Get custom domains configurations",
            "description": "Retrieve details on <a href=\"https://auth0.com/docs/custom-domains\">custom domains</a>.",
            "tags": [
               "custom-domains"
            ],
            "responses": {
               "200": {
                  "description": "Custom domains successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/customDomain"
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_custom-domains",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:custom_domains"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Configure a new custom domain",
            "description": "Create a new custom domain.\\n\\nNote: The custom domain will need to be verified before it will accept\\nrequests.\\n\\nOptional attributes that can be updated:\\n\\n- custom_client_ip_header\\n- tls_policy\\n\\n\\nTLS Policies:\\n\\n- recommended - for modern usage this includes TLS 1.2 only\\n- compatible - compatible with older browsers this policy includes TLS 1.0, 1.1, 1.2\\n\\n\\nSome considerations:\\n\\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\\n- Do not use the <code>compatible<\/code> TLS policy unless you have clients that require TLS 1.0.\\n",
            "tags": [
               "custom-domains"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "domain",
                           "type"
                        ],
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Domain name."
                           },
                           "type": {
                              "type": "string",
                              "description": "Custom domain provisioning type. Must be `auth0_managed_certs` or `self_managed_certs`.",
                              "enum": [
                                 "auth0_managed_certs",
                                 "self_managed_certs"
                              ]
                           },
                           "verification_method": {
                              "type": "string",
                              "description": "Custom domain verification method. Must be `txt`.",
                              "default": "txt",
                              "enum": [
                                 "txt"
                              ]
                           },
                           "tls_policy": {
                              "type": "string",
                              "description": "compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2",
                              "default": "recommended",
                              "enum": [
                                 "recommended",
                                 "compatible"
                              ]
                           },
                           "custom_client_ip_header": {
                              "type": "string",
                              "description": "HTTP header to fetch client IP header. Ex: CF-Connecting-IP, X-Forwarded-For or True-Client-IP.",
                              "default": "true-client-ip",
                              "enum": [
                                 "true-client-ip",
                                 "cf-connecting-ip",
                                 "x-forwarded-for",
                                 null
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "domain",
                           "type"
                        ],
                        "properties": {
                           "domain": {
                              "type": "string",
                              "description": "Domain name."
                           },
                           "type": {
                              "type": "string",
                              "description": "Custom domain provisioning type. Must be `auth0_managed_certs` or `self_managed_certs`.",
                              "enum": [
                                 "auth0_managed_certs",
                                 "self_managed_certs"
                              ]
                           },
                           "verification_method": {
                              "type": "string",
                              "description": "Custom domain verification method. Must be `txt`.",
                              "default": "txt",
                              "enum": [
                                 "txt"
                              ]
                           },
                           "tls_policy": {
                              "type": "string",
                              "description": "compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2",
                              "default": "recommended",
                              "enum": [
                                 "recommended",
                                 "compatible"
                              ]
                           },
                           "custom_client_ip_header": {
                              "type": "string",
                              "description": "HTTP header to fetch client IP header. Ex: CF-Connecting-IP, X-Forwarded-For or True-Client-IP.",
                              "default": "true-client-ip",
                              "enum": [
                                 "true-client-ip",
                                 "cf-connecting-ip",
                                 "x-forwarded-for",
                                 null
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Custom domain successfully created (verification is pending).",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "custom_domain_id",
                              "domain",
                              "primary",
                              "status",
                              "type",
                              "verification"
                           ],
                           "properties": {
                              "custom_domain_id": {
                                 "type": "string",
                                 "description": "ID of the custom domain.",
                                 "default": "cd_0000000000000001"
                              },
                              "domain": {
                                 "type": "string",
                                 "description": "Domain name.",
                                 "default": "login.mycompany.com"
                              },
                              "primary": {
                                 "type": "boolean",
                                 "description": "Whether this is a primary domain (true) or not (false).",
                                 "default": false
                              },
                              "status": {
                                 "type": "string",
                                 "description": "Custom domain configuration status. Can be `disabled`, `pending`, `pending_verification`, or `ready`.",
                                 "default": "ready",
                                 "enum": [
                                    "disabled",
                                    "pending",
                                    "pending_verification",
                                    "ready"
                                 ]
                              },
                              "type": {
                                 "type": "string",
                                 "description": "Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.",
                                 "default": "self_managed_certs",
                                 "enum": [
                                    "auth0_managed_certs",
                                    "self_managed_certs"
                                 ]
                              },
                              "verification": {
                                 "type": "object",
                                 "description": "Domain verification settings.",
                                 "properties": {
                                    "methods": {
                                       "type": "array",
                                       "description": "Domain verification methods.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "name",
                                             "record"
                                          ],
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "Domain verification method.",
                                                "default": "txt",
                                                "enum": [
                                                   "cname",
                                                   "txt"
                                                ]
                                             },
                                             "record": {
                                                "type": "string",
                                                "description": "Value used to verify the domain.",
                                                "default": "auth0-domain-verification=..."
                                             },
                                             "domain": {
                                                "type": "string",
                                                "description": "The name of the txt record for verification",
                                                "default": "_cf-custom-hostname.login.mycompany.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "custom_client_ip_header": {
                                 "type": "string",
                                 "description": "The HTTP header to fetch the client's IP address",
                                 "nullable": true
                              },
                              "tls_policy": {
                                 "type": "string",
                                 "description": "The TLS version policy",
                                 "default": "recommended"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "409": {
                  "description": "You reached the maximum number of custom domains for your account."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_custom-domains",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:custom_domains"
                  ]
               }
            ]
         }
      },
      "/custom-domains/{id}": {
         "get": {
            "summary": "Get custom domain configuration",
            "description": "Retrieve a custom domain configuration and status.",
            "tags": [
               "custom-domains"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the custom domain to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Custom domain successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/customDomain"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "404": {
                  "description": "Custom domain not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_custom-domains_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:custom_domains"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete custom domain configuration",
            "description": "Delete a custom domain and stop serving requests for it.",
            "tags": [
               "custom-domains"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the custom domain to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Custom domain successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_custom-domains_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:custom_domains"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update custom domain configuration",
            "description": "Update a custom domain.\\n\\nThese are the attributes that can be updated:\\n\\n- custom_client_ip_header\\n- tls_policy\\n\\n<h5>Updating CUSTOM_CLIENT_IP_HEADER for a custom domain</h5>To update the <code>custom_client_ip_header<\/code> for a domain, the body to\\nsend should be:\\n<pre><code>{ \"custom_client_ip_header\": \"cf-connecting-ip\" }<\/code></pre>\\n\\n<h5>Updating TLS_POLICY for a custom domain</h5>To update the <code>tls_policy<\/code> for a domain, the body to send should be:\\n<pre><code>{ \"tls_policy\": \"compatible\" }<\/code></pre>\\n\\n\\nTLS Policies:\\n\\n- recommended - for modern usage this includes TLS 1.2 only\\n- compatible - compatible with older browsers this policy includes TLS 1.0, 1.1, 1.2\\n\\n\\nSome considerations:\\n\\n- The TLS ciphers and protocols available in each TLS policy follow industry recommendations, and may be updated occasionally.\\n- Do not use the <code>compatible<\/code> TLS policy unless you have clients that require TLS 1.0.\\n",
            "tags": [
               "custom-domains"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the custom domain to update",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "tls_policy": {
                              "type": "string",
                              "description": "compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2",
                              "default": "recommended",
                              "enum": [
                                 "recommended",
                                 "compatible"
                              ]
                           },
                           "custom_client_ip_header": {
                              "type": "string",
                              "description": "The HTTP header to fetch the client's IP address",
                              "default": "true-client-ip",
                              "enum": [
                                 "true-client-ip",
                                 "cf-connecting-ip",
                                 "x-forwarded-for",
                                 ""
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "tls_policy": {
                              "type": "string",
                              "description": "compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2",
                              "default": "recommended",
                              "enum": [
                                 "recommended",
                                 "compatible"
                              ]
                           },
                           "custom_client_ip_header": {
                              "type": "string",
                              "description": "The HTTP header to fetch the client's IP address",
                              "default": "true-client-ip",
                              "enum": [
                                 "true-client-ip",
                                 "cf-connecting-ip",
                                 "x-forwarded-for",
                                 ""
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Custom domain updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "custom_domain_id",
                              "domain",
                              "primary",
                              "status",
                              "type",
                              "verification"
                           ],
                           "properties": {
                              "custom_domain_id": {
                                 "type": "string",
                                 "description": "ID of the custom domain.",
                                 "default": "cd_0000000000000001"
                              },
                              "domain": {
                                 "type": "string",
                                 "description": "Domain name.",
                                 "default": "login.mycompany.com"
                              },
                              "primary": {
                                 "type": "boolean",
                                 "description": "Whether this is a primary domain (true) or not (false).",
                                 "default": false
                              },
                              "status": {
                                 "type": "string",
                                 "description": "Custom domain configuration status. Can be `disabled`, `pending`, `pending_verification`, or `ready`.",
                                 "default": "ready",
                                 "enum": [
                                    "disabled",
                                    "pending",
                                    "pending_verification",
                                    "ready"
                                 ]
                              },
                              "type": {
                                 "type": "string",
                                 "description": "Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.",
                                 "default": "self_managed_certs",
                                 "enum": [
                                    "auth0_managed_certs",
                                    "self_managed_certs"
                                 ]
                              },
                              "verification": {
                                 "type": "object",
                                 "description": "Domain verification settings.",
                                 "properties": {
                                    "methods": {
                                       "type": "array",
                                       "description": "Domain verification methods.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "name",
                                             "record"
                                          ],
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "Domain verification method.",
                                                "default": "txt",
                                                "enum": [
                                                   "cname",
                                                   "txt"
                                                ]
                                             },
                                             "record": {
                                                "type": "string",
                                                "description": "Value used to verify the domain.",
                                                "default": "auth0-domain-verification=..."
                                             },
                                             "domain": {
                                                "type": "string",
                                                "description": "The name of the txt record for verification",
                                                "default": "_cf-custom-hostname.login.mycompany.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "custom_client_ip_header": {
                                 "type": "string",
                                 "description": "The HTTP header to fetch the client's IP address",
                                 "nullable": true
                              },
                              "tls_policy": {
                                 "type": "string",
                                 "description": "The TLS version policy",
                                 "default": "recommended"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The 'custom_client_ip_header' cannot be set on auth0_managed domains"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Your account is not allowed to perform this operation."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_custom-domains_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:custom_domains"
                  ]
               }
            ]
         }
      },
      "/custom-domains/{id}/verify": {
         "post": {
            "summary": "Verify a custom domain",
            "description": "Run the verification process on a custom domain.\\n\\nNote: Check the <code>status<\/code> field to see its verification status. Once verification is complete, it may take up to 10 minutes before the custom domain can start accepting requests.\\n\\nFor <code>self_managed_certs<\/code>, when the custom domain is verified for the first time, the response will also include the <code>cname_api_key<\/code> which you will need to configure your proxy. This key must be kept secret, and is used to validate the proxy requests.\\n\\n<a href=\"https://auth0.com/docs/custom-domains#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Auth0 Managed certificates.\\n<a href=\"https://auth0.com/docs/custom-domains/self-managed-certificates#step-2-verify-ownership\">Learn more</a> about verifying custom domains that use Self Managed certificates.\\n",
            "tags": [
               "custom-domains"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the custom domain to verify.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Custom domain failed verification.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "custom_domain_id",
                              "domain",
                              "primary",
                              "status",
                              "type"
                           ],
                           "properties": {
                              "custom_domain_id": {
                                 "type": "string",
                                 "description": "ID of the custom domain.",
                                 "default": "cd_0000000000000001"
                              },
                              "domain": {
                                 "type": "string",
                                 "description": "Domain name.",
                                 "default": "login.mycompany.com"
                              },
                              "primary": {
                                 "type": "boolean",
                                 "description": "Whether this is a primary domain (true) or not (false).",
                                 "default": false
                              },
                              "status": {
                                 "type": "string",
                                 "description": "Custom domain configuration status. Can be `disabled`, `pending`, `pending_verification`, or `ready`.",
                                 "default": "ready",
                                 "enum": [
                                    "disabled",
                                    "pending",
                                    "pending_verification",
                                    "ready"
                                 ]
                              },
                              "type": {
                                 "type": "string",
                                 "description": "Custom domain provisioning type. Can be `auth0_managed_certs` or `self_managed_certs`.",
                                 "default": "self_managed_certs",
                                 "enum": [
                                    "auth0_managed_certs",
                                    "self_managed_certs"
                                 ]
                              },
                              "cname_api_key": {
                                 "type": "string",
                                 "description": "CNAME API key header.",
                                 "default": "d4feca..."
                              },
                              "origin_domain_name": {
                                 "type": "string",
                                 "description": "Intermediate address.",
                                 "default": "mycompany_cd_0000000000000001.edge.tenants.auth0.com"
                              },
                              "verification": {
                                 "type": "object",
                                 "description": "Domain verification settings.",
                                 "properties": {
                                    "methods": {
                                       "type": "array",
                                       "description": "Domain verification methods.",
                                       "items": {
                                          "type": "object",
                                          "required": [
                                             "name",
                                             "record"
                                          ],
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "Domain verification method.",
                                                "default": "txt",
                                                "enum": [
                                                   "cname",
                                                   "txt"
                                                ]
                                             },
                                             "record": {
                                                "type": "string",
                                                "description": "Value used to verify the domain.",
                                                "default": "auth0-domain-verification=..."
                                             },
                                             "domain": {
                                                "type": "string",
                                                "description": "The name of the txt record for verification",
                                                "default": "_cf-custom-hostname.login.mycompany.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              "custom_client_ip_header": {
                                 "type": "string",
                                 "description": "The HTTP header to fetch the client's IP address",
                                 "nullable": true
                              },
                              "tls_policy": {
                                 "type": "string",
                                 "description": "The TLS version policy",
                                 "default": "recommended"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Custom domain already verified."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "404": {
                  "description": "Custom domain not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_verify",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:custom_domains"
                  ]
               }
            ]
         }
      },
      "/device-credentials": {
         "get": {
            "summary": "Retrieve device credentials",
            "description": "Device Credentials relate to refresh tokens and rotating refresh tokens for a given user_id.\\n\\nNote: Device Credentials APIs are designed for ad-hoc administrative use only, and paging is by default enabled for GET requests.\\nNote: When Refresh Token Rotation is enabled, the endpoint becomes eventual consistent.\\n",
            "tags": [
               "device-credentials"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page.  There is a maximum of 1000 results allowed from this endpoint.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((device_name)|(id)|(device_id)|(type)|(user_id)|(client_id))(,((device_name)|(id)|(device_id)|(type)|(user_id)|(client_id)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "user_id",
                  "in": "query",
                  "description": "user_id of the devices to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "client_id",
                  "in": "query",
                  "description": "client_id of the devices to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "type",
                  "in": "query",
                  "description": "Type of credentials to retrieve. Must be `public_key`, `refresh_token` or `rotating_refresh_token`. The property will default to `refresh_token` when paging is requested",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "public_key",
                        "refresh_token",
                        "rotating_refresh_token"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Device credentials successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/deviceCredential"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "device_credentials": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/deviceCredential"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Bad username or password."
               },
               "403": {
                  "description": "Must provide client_id parameter."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_device-credentials",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:device_credentials",
                     "read:current_user_device_credentials"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a device public key credential",
            "description": "Device Credentials relate to refresh tokens and rotating refresh tokens for a given user_id.\\n\\nNote: Device Credentials APIs are designed for ad-hoc administrative use only, and paging is by default enabled for GET requests.\\nNote: When Refresh Token Rotation is enabled, the endpoint becomes eventual consistent.\\n",
            "tags": [
               "device-credentials"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/deviceCredentialCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/deviceCredentialCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Device credentials successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "id"
                           ],
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The credential's identifier",
                                 "default": "dcr_0000000000000001"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Bad username or password."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:current_user_device_credentials."
               },
               "409": {
                  "description": "A public key already exists for the device."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_device-credentials",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:current_user_device_credentials"
                  ]
               }
            ]
         }
      },
      "/device-credentials/{id}": {
         "delete": {
            "summary": "Delete a device credential",
            "description": "Delete a device credential.",
            "tags": [
               "device-credentials"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the credential to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^dcr_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Device credentials successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Bad username or password."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:device_credentials, update:current_user, delete:current_user_device_credentials."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_device-credentials_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:device_credentials",
                     "delete:current_user_device_credentials"
                  ]
               }
            ]
         }
      },
      "/email-templates": {
         "post": {
            "summary": "Create an email template",
            "description": "Create an email template.",
            "tags": [
               "email-templates"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "template",
                           "body",
                           "from",
                           "subject",
                           "syntax",
                           "enabled"
                        ],
                        "properties": {
                           "template": {
                              "type": "string",
                              "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                              "default": "verify_email",
                              "enum": [
                                 "verify_email",
                                 "verify_email_by_code",
                                 "reset_email",
                                 "welcome_email",
                                 "blocked_account",
                                 "stolen_credentials",
                                 "enrollment_email",
                                 "mfa_oob_code",
                                 "user_invitation",
                                 "change_password",
                                 "password_reset"
                              ]
                           },
                           "body": {
                              "type": "string",
                              "description": "Body of the email template.",
                              "nullable": true
                           },
                           "from": {
                              "type": "string",
                              "description": "Senders `from` email address.",
                              "default": "sender@auth0.com",
                              "nullable": true
                           },
                           "resultUrl": {
                              "type": "string",
                              "description": "URL to redirect the user to after a successful action.",
                              "nullable": true
                           },
                           "subject": {
                              "type": "string",
                              "description": "Subject line of the email.",
                              "nullable": true
                           },
                           "syntax": {
                              "type": "string",
                              "description": "Syntax of the template body.",
                              "default": "liquid",
                              "nullable": true
                           },
                           "urlLifetimeInSeconds": {
                              "type": "number",
                              "description": "Lifetime in seconds that the link within the email will be valid for.",
                              "nullable": true
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the template is enabled (true) or disabled (false).",
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "template",
                           "body",
                           "from",
                           "subject",
                           "syntax",
                           "enabled"
                        ],
                        "properties": {
                           "template": {
                              "type": "string",
                              "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                              "default": "verify_email",
                              "enum": [
                                 "verify_email",
                                 "verify_email_by_code",
                                 "reset_email",
                                 "welcome_email",
                                 "blocked_account",
                                 "stolen_credentials",
                                 "enrollment_email",
                                 "mfa_oob_code",
                                 "user_invitation",
                                 "change_password",
                                 "password_reset"
                              ]
                           },
                           "body": {
                              "type": "string",
                              "description": "Body of the email template.",
                              "nullable": true
                           },
                           "from": {
                              "type": "string",
                              "description": "Senders `from` email address.",
                              "default": "sender@auth0.com",
                              "nullable": true
                           },
                           "resultUrl": {
                              "type": "string",
                              "description": "URL to redirect the user to after a successful action.",
                              "nullable": true
                           },
                           "subject": {
                              "type": "string",
                              "description": "Subject line of the email.",
                              "nullable": true
                           },
                           "syntax": {
                              "type": "string",
                              "description": "Syntax of the template body.",
                              "default": "liquid",
                              "nullable": true
                           },
                           "urlLifetimeInSeconds": {
                              "type": "number",
                              "description": "Lifetime in seconds that the link within the email will be valid for.",
                              "nullable": true
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the template is enabled (true) or disabled (false).",
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Template successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "template",
                              "body",
                              "from",
                              "subject",
                              "syntax",
                              "enabled"
                           ],
                           "properties": {
                              "template": {
                                 "type": "string",
                                 "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                                 "default": "verify_email",
                                 "enum": [
                                    "verify_email",
                                    "verify_email_by_code",
                                    "reset_email",
                                    "welcome_email",
                                    "blocked_account",
                                    "stolen_credentials",
                                    "enrollment_email",
                                    "mfa_oob_code",
                                    "user_invitation",
                                    "change_password",
                                    "password_reset"
                                 ]
                              },
                              "body": {
                                 "type": "string",
                                 "description": "Body of the email template.",
                                 "nullable": true
                              },
                              "from": {
                                 "type": "string",
                                 "description": "Senders `from` email address.",
                                 "default": "sender@auth0.com",
                                 "nullable": true
                              },
                              "resultUrl": {
                                 "type": "string",
                                 "description": "URL to redirect the user to after a successful action.",
                                 "nullable": true
                              },
                              "subject": {
                                 "type": "string",
                                 "description": "Subject line of the email.",
                                 "nullable": true
                              },
                              "syntax": {
                                 "type": "string",
                                 "description": "Syntax of the template body.",
                                 "default": "liquid",
                                 "nullable": true
                              },
                              "urlLifetimeInSeconds": {
                                 "type": "number",
                                 "description": "Lifetime in seconds that the link within the email will be valid for.",
                                 "nullable": true
                              },
                              "includeEmailInRedirect": {
                                 "type": "boolean",
                                 "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                              },
                              "enabled": {
                                 "type": "boolean",
                                 "description": "Whether the template is enabled (true) or disabled (false).",
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: create:email_templates."
               },
               "409": {
                  "description": "Template (templateName) already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_email-templates",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:email_templates"
                  ]
               }
            ]
         }
      },
      "/email-templates/{templateName}": {
         "get": {
            "summary": "Get an email template",
            "description": "Retrieve an email template by pre-defined name. These names are `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, and `user_invitation`. The names `change_password`, and `password_reset` are also supported for legacy scenarios.",
            "tags": [
               "email-templates"
            ],
            "parameters": [
               {
                  "name": "templateName",
                  "in": "path",
                  "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "verify_email",
                        "verify_email_by_code",
                        "reset_email",
                        "welcome_email",
                        "blocked_account",
                        "stolen_credentials",
                        "enrollment_email",
                        "mfa_oob_code",
                        "user_invitation",
                        "change_password",
                        "password_reset"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Template successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "template": {
                                 "type": "string",
                                 "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                                 "default": "verify_email",
                                 "enum": [
                                    "verify_email",
                                    "verify_email_by_code",
                                    "reset_email",
                                    "welcome_email",
                                    "blocked_account",
                                    "stolen_credentials",
                                    "enrollment_email",
                                    "mfa_oob_code",
                                    "user_invitation",
                                    "change_password",
                                    "password_reset"
                                 ]
                              },
                              "body": {
                                 "type": "string",
                                 "description": "Body of the email template.",
                                 "nullable": true
                              },
                              "from": {
                                 "type": "string",
                                 "description": "Senders `from` email address.",
                                 "default": "sender@auth0.com",
                                 "nullable": true
                              },
                              "resultUrl": {
                                 "type": "string",
                                 "description": "URL to redirect the user to after a successful action.",
                                 "nullable": true
                              },
                              "subject": {
                                 "type": "string",
                                 "description": "Subject line of the email.",
                                 "nullable": true
                              },
                              "syntax": {
                                 "type": "string",
                                 "description": "Syntax of the template body.",
                                 "default": "liquid",
                                 "nullable": true
                              },
                              "urlLifetimeInSeconds": {
                                 "type": "number",
                                 "description": "Lifetime in seconds that the link within the email will be valid for.",
                                 "nullable": true
                              },
                              "includeEmailInRedirect": {
                                 "type": "boolean",
                                 "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                              },
                              "enabled": {
                                 "type": "boolean",
                                 "description": "Whether the template is enabled (true) or disabled (false).",
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:email_templates."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_email-templates_by_templateName",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:email_templates"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Patch an email template",
            "description": "Modify an email template.",
            "tags": [
               "email-templates"
            ],
            "parameters": [
               {
                  "name": "templateName",
                  "in": "path",
                  "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "verify_email",
                        "verify_email_by_code",
                        "reset_email",
                        "welcome_email",
                        "blocked_account",
                        "stolen_credentials",
                        "enrollment_email",
                        "mfa_oob_code",
                        "user_invitation",
                        "change_password",
                        "password_reset"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "template": {
                              "type": "string",
                              "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                              "default": "verify_email",
                              "enum": [
                                 "verify_email",
                                 "verify_email_by_code",
                                 "reset_email",
                                 "welcome_email",
                                 "blocked_account",
                                 "stolen_credentials",
                                 "enrollment_email",
                                 "mfa_oob_code",
                                 "user_invitation",
                                 "change_password",
                                 "password_reset"
                              ]
                           },
                           "body": {
                              "type": "string",
                              "description": "Body of the email template.",
                              "nullable": true
                           },
                           "from": {
                              "type": "string",
                              "description": "Senders `from` email address.",
                              "default": "sender@auth0.com",
                              "nullable": true
                           },
                           "resultUrl": {
                              "type": "string",
                              "description": "URL to redirect the user to after a successful action.",
                              "nullable": true
                           },
                           "subject": {
                              "type": "string",
                              "description": "Subject line of the email.",
                              "nullable": true
                           },
                           "syntax": {
                              "type": "string",
                              "description": "Syntax of the template body.",
                              "default": "liquid",
                              "nullable": true
                           },
                           "urlLifetimeInSeconds": {
                              "type": "number",
                              "description": "Lifetime in seconds that the link within the email will be valid for.",
                              "nullable": true
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the template is enabled (true) or disabled (false).",
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "template": {
                              "type": "string",
                              "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                              "default": "verify_email",
                              "enum": [
                                 "verify_email",
                                 "verify_email_by_code",
                                 "reset_email",
                                 "welcome_email",
                                 "blocked_account",
                                 "stolen_credentials",
                                 "enrollment_email",
                                 "mfa_oob_code",
                                 "user_invitation",
                                 "change_password",
                                 "password_reset"
                              ]
                           },
                           "body": {
                              "type": "string",
                              "description": "Body of the email template.",
                              "nullable": true
                           },
                           "from": {
                              "type": "string",
                              "description": "Senders `from` email address.",
                              "default": "sender@auth0.com",
                              "nullable": true
                           },
                           "resultUrl": {
                              "type": "string",
                              "description": "URL to redirect the user to after a successful action.",
                              "nullable": true
                           },
                           "subject": {
                              "type": "string",
                              "description": "Subject line of the email.",
                              "nullable": true
                           },
                           "syntax": {
                              "type": "string",
                              "description": "Syntax of the template body.",
                              "default": "liquid",
                              "nullable": true
                           },
                           "urlLifetimeInSeconds": {
                              "type": "number",
                              "description": "Lifetime in seconds that the link within the email will be valid for.",
                              "nullable": true
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the template is enabled (true) or disabled (false).",
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Template successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "template": {
                                 "type": "string",
                                 "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                                 "default": "verify_email",
                                 "enum": [
                                    "verify_email",
                                    "verify_email_by_code",
                                    "reset_email",
                                    "welcome_email",
                                    "blocked_account",
                                    "stolen_credentials",
                                    "enrollment_email",
                                    "mfa_oob_code",
                                    "user_invitation",
                                    "change_password",
                                    "password_reset"
                                 ]
                              },
                              "body": {
                                 "type": "string",
                                 "description": "Body of the email template.",
                                 "nullable": true
                              },
                              "from": {
                                 "type": "string",
                                 "description": "Senders `from` email address.",
                                 "default": "sender@auth0.com",
                                 "nullable": true
                              },
                              "resultUrl": {
                                 "type": "string",
                                 "description": "URL to redirect the user to after a successful action.",
                                 "nullable": true
                              },
                              "subject": {
                                 "type": "string",
                                 "description": "Subject line of the email.",
                                 "nullable": true
                              },
                              "syntax": {
                                 "type": "string",
                                 "description": "Syntax of the template body.",
                                 "default": "liquid",
                                 "nullable": true
                              },
                              "urlLifetimeInSeconds": {
                                 "type": "number",
                                 "description": "Lifetime in seconds that the link within the email will be valid for.",
                                 "nullable": true
                              },
                              "includeEmailInRedirect": {
                                 "type": "boolean",
                                 "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                              },
                              "enabled": {
                                 "type": "boolean",
                                 "description": "Whether the template is enabled (true) or disabled (false).",
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:email_templates."
               },
               "404": {
                  "description": "Template not found and cannot be updated."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_email-templates_by_templateName",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:email_templates"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update an email template",
            "description": "Update an email template.",
            "tags": [
               "email-templates"
            ],
            "parameters": [
               {
                  "name": "templateName",
                  "in": "path",
                  "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "verify_email",
                        "verify_email_by_code",
                        "reset_email",
                        "welcome_email",
                        "blocked_account",
                        "stolen_credentials",
                        "enrollment_email",
                        "mfa_oob_code",
                        "user_invitation",
                        "change_password",
                        "password_reset"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/emailTemplateUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/emailTemplateUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Template successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "template",
                              "body",
                              "from",
                              "subject",
                              "syntax",
                              "enabled"
                           ],
                           "properties": {
                              "template": {
                                 "type": "string",
                                 "description": "Template name. Can be `verify_email`, `verify_email_by_code`, `reset_email`, `welcome_email`, `blocked_account`, `stolen_credentials`, `enrollment_email`, `mfa_oob_code`, `user_invitation`, `change_password` (legacy), or `password_reset` (legacy).",
                                 "default": "verify_email",
                                 "enum": [
                                    "verify_email",
                                    "verify_email_by_code",
                                    "reset_email",
                                    "welcome_email",
                                    "blocked_account",
                                    "stolen_credentials",
                                    "enrollment_email",
                                    "mfa_oob_code",
                                    "user_invitation",
                                    "change_password",
                                    "password_reset"
                                 ]
                              },
                              "body": {
                                 "type": "string",
                                 "description": "Body of the email template.",
                                 "nullable": true
                              },
                              "from": {
                                 "type": "string",
                                 "description": "Senders `from` email address.",
                                 "default": "sender@auth0.com",
                                 "nullable": true
                              },
                              "resultUrl": {
                                 "type": "string",
                                 "description": "URL to redirect the user to after a successful action.",
                                 "nullable": true
                              },
                              "subject": {
                                 "type": "string",
                                 "description": "Subject line of the email.",
                                 "nullable": true
                              },
                              "syntax": {
                                 "type": "string",
                                 "description": "Syntax of the template body.",
                                 "default": "liquid",
                                 "nullable": true
                              },
                              "urlLifetimeInSeconds": {
                                 "type": "number",
                                 "description": "Lifetime in seconds that the link within the email will be valid for.",
                                 "nullable": true
                              },
                              "includeEmailInRedirect": {
                                 "type": "boolean",
                                 "description": "Whether the `reset_email` and `verify_email` templates should include the user's email address as the `email` parameter in the returnUrl (true) or whether no email address should be included in the redirect (false). Defaults to true."
                              },
                              "enabled": {
                                 "type": "boolean",
                                 "description": "Whether the template is enabled (true) or disabled (false).",
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:email_templates."
               },
               "404": {
                  "description": "Template not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "put_email-templates_by_templateName",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:email_templates"
                  ]
               }
            ]
         }
      },
      "/emails/provider": {
         "get": {
            "summary": "Get the email provider",
            "description": "Retrieve <a href=\"https://auth0.com/docs/email/providers\">email provider</a> details. A list of fields to include or exclude may also be specified.\\n",
            "tags": [
               "emails"
            ],
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (dependent upon include_fields) from the result. Leave empty to retrieve `name` and `enabled`. Additional fields available include `credentials`, `default_from_address`, and `settings`.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(enabled)|(credentials)|(settings)|(default_from_address))(,((name)|(enabled)|(credentials)|(settings)|(default_from_address)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Email provider successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/emailProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:email_provider."
               },
               "404": {
                  "description": "Email provider has not been configured."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:email_provider"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update the email provider",
            "description": "Update an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>.\\nThe <code>credentials<\/code> object requires different properties depending on the email provider (which is specified using the <code>name<\/code> property):\\n<ul><li><code>mandrill<\/code> requires <code>api_key<\/code></li><li><code>sendgrid<\/code> requires <code>api_key<\/code></li><li><code>sparkpost<\/code> requires <code>api_key<\/code>. Optionally, set <code>region<\/code> to <code>eu<\/code> to use the SparkPost service hosted in Western Europe; set to <code>null<\/code> to use the SparkPost service hosted in North America. <code>eu<\/code> or <code>null<\/code> are the only valid values for <code>region<\/code>.</li><li><code>mailgun<\/code> requires <code>api_key<\/code> and <code>domain<\/code>. Optionally, set <code>region<\/code> to <code>eu<\/code> to use the Mailgun service hosted in Europe; set to <code>null<\/code> otherwise. <code>eu<\/code> or <code>null<\/code> are the only valid values for <code>region<\/code>.</li><li><code>ses<\/code> requires <code>accessKeyId<\/code>, <code>secretAccessKey<\/code>, and <code>region<\/code></li><li><code>smtp<\/code> requires <code>smtp_host<\/code>, <code>smtp_port<\/code>, <code>smtp_user<\/code>, and <code>smtp_pass<\/code></li></ul>Depending on the type of provider it is possible to specify <code>settings<\/code> object with different configuration options, which will be used when sending an email:\\n<ul><li><code>smtp<\/code> provider, <code>settings<\/code> may contain <code>headers<\/code> object. When using AWS SES SMTP host, you may provide a name of configuration set in <code>X-SES-Configuration-Set<\/code> header. Value must be a string.</li><li>for <code>ses<\/code> provider, <code>settings<\/code> may contain <code>message<\/code> object, where you can provide a name of configuration set in <code>configuration_set_name<\/code> property. Value must be a string.</li></ul>\\n",
            "tags": [
               "emails"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, or `smtp`.",
                              "enum": [
                                 "mailgun",
                                 "mandrill",
                                 "sendgrid",
                                 "ses",
                                 "sparkpost",
                                 "smtp"
                              ]
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the provider is enabled (true) or disabled (false)."
                           },
                           "default_from_address": {
                              "type": "string",
                              "description": "Email address to use as \"from\" when no other address specified."
                           },
                           "credentials": {
                              "description": "Credentials required to use the provider.",
                              "anyOf": [
                                 {},
                                 {},
                                 {},
                                 {},
                                 {}
                              ]
                           },
                           "settings": {
                              "type": "object",
                              "nullable": true,
                              "description": "Specific provider setting",
                              "additionalProperties": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, or `smtp`.",
                              "enum": [
                                 "mailgun",
                                 "mandrill",
                                 "sendgrid",
                                 "ses",
                                 "sparkpost",
                                 "smtp"
                              ]
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the provider is enabled (true) or disabled (false)."
                           },
                           "default_from_address": {
                              "type": "string",
                              "description": "Email address to use as \"from\" when no other address specified."
                           },
                           "credentials": {
                              "description": "Credentials required to use the provider.",
                              "anyOf": [
                                 {},
                                 {},
                                 {},
                                 {},
                                 {}
                              ]
                           },
                           "settings": {
                              "type": "object",
                              "nullable": true,
                              "description": "Specific provider setting",
                              "additionalProperties": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Email provider successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/emailProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:email_provider."
               },
               "404": {
                  "description": "Email provider has not been configured."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:email_provider"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Configure the email provider",
            "description": "Create an <a href=\"https://auth0.com/docs/email/providers\">email provider</a>.\\nThe <code>credentials<\/code> object requires different properties depending on the email provider (which is specified using the <code>name<\/code> property):\\n<ul><li><code>mandrill<\/code> requires <code>api_key<\/code></li><li><code>sendgrid<\/code> requires <code>api_key<\/code></li><li><code>sparkpost<\/code> requires <code>api_key<\/code>. Optionally, set <code>region<\/code> to <code>eu<\/code> to use the SparkPost service hosted in Western Europe; set to <code>null<\/code> to use the SparkPost service hosted in North America. <code>eu<\/code> or <code>null<\/code> are the only valid values for <code>region<\/code>.</li><li><code>mailgun<\/code> requires <code>api_key<\/code> and <code>domain<\/code>. Optionally, set <code>region<\/code> to <code>eu<\/code> to use the Mailgun service hosted in Europe; set to <code>null<\/code> otherwise. <code>eu<\/code> or <code>null<\/code> are the only valid values for <code>region<\/code>.</li><li><code>ses<\/code> requires <code>accessKeyId<\/code>, <code>secretAccessKey<\/code>, and <code>region<\/code></li><li><code>smtp<\/code> requires <code>smtp_host<\/code>, <code>smtp_port<\/code>, <code>smtp_user<\/code>, and <code>smtp_pass<\/code></li></ul>Depending on the type of provider it is possible to specify <code>settings<\/code> object with different configuration options, which will be used when sending an email:\\n<ul><li><code>smtp<\/code> provider, <code>settings<\/code> may contain <code>headers<\/code> object. When using AWS SES SMTP host, you may provide a name of configuration set in <code>X-SES-Configuration-Set<\/code> header. Value must be a string.</li><li>for <code>ses<\/code> provider, <code>settings<\/code> may contain <code>message<\/code> object, where you can provide a name of configuration set in <code>configuration_set_name<\/code> property. Value must be a string.</li></ul>\\n",
            "tags": [
               "emails"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name",
                           "credentials"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, or `smtp`.",
                              "default": "mandrill",
                              "enum": [
                                 "mailgun",
                                 "mandrill",
                                 "sendgrid",
                                 "ses",
                                 "sparkpost",
                                 "smtp"
                              ]
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the provider is enabled (true) or disabled (false).",
                              "default": true
                           },
                           "default_from_address": {
                              "type": "string",
                              "description": "Email address to use as \"from\" when no other address specified."
                           },
                           "credentials": {
                              "description": "Credentials required to use the provider.",
                              "anyOf": [
                                 {},
                                 {},
                                 {},
                                 {},
                                 {}
                              ]
                           },
                           "settings": {
                              "type": "object",
                              "nullable": true,
                              "description": "Specific provider setting",
                              "additionalProperties": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name",
                           "credentials"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Name of the email provider. Can be `mailgun`, `mandrill`, `sendgrid`, `ses`, `sparkpost`, or `smtp`.",
                              "default": "mandrill",
                              "enum": [
                                 "mailgun",
                                 "mandrill",
                                 "sendgrid",
                                 "ses",
                                 "sparkpost",
                                 "smtp"
                              ]
                           },
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether the provider is enabled (true) or disabled (false).",
                              "default": true
                           },
                           "default_from_address": {
                              "type": "string",
                              "description": "Email address to use as \"from\" when no other address specified."
                           },
                           "credentials": {
                              "description": "Credentials required to use the provider.",
                              "anyOf": [
                                 {},
                                 {},
                                 {},
                                 {},
                                 {}
                              ]
                           },
                           "settings": {
                              "type": "object",
                              "nullable": true,
                              "description": "Specific provider setting",
                              "additionalProperties": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Email provider successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/emailProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:email_provider."
               },
               "409": {
                  "description": "Email provider is already configured."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:email_provider"
                  ]
               }
            ]
         }
      },
      "/grants": {
         "get": {
            "summary": "Get grants",
            "description": "Retrieve the <a href=\"https://auth0.com/docs/api-auth/which-oauth-flow-to-use\">grants</a> associated with your account. ",
            "tags": [
               "grants"
            ],
            "parameters": [
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "user_id",
                  "in": "query",
                  "description": "user_id of the grants to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "client_id",
                  "in": "query",
                  "description": "client_id of the grants to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "audience",
                  "in": "query",
                  "description": "audience of the grants to retrieve.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Grants successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/userGrant"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "grants": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/userGrant"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:grants."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_grants",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:grants"
                  ]
               }
            ]
         }
      },
      "/grants/": {
         "delete": {
            "summary": "Delete a grant by user_id",
            "description": "Delete a grant associated with your account.",
            "tags": [
               "grants"
            ],
            "parameters": [
               {
                  "name": "user_id",
                  "in": "query",
                  "description": "user_id of the grant to delete.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "User grant successfully deleted."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:grants."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:grants"
                  ]
               }
            ]
         }
      },
      "/grants/{id}": {
         "delete": {
            "summary": "Delete a grant by id",
            "description": "Delete a grant associated with your account.",
            "tags": [
               "grants"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the grant to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "User grant successfully deleted."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:grants."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_grants_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:grants"
                  ]
               }
            ]
         }
      },
      "/guardian/enrollments/ticket": {
         "post": {
            "summary": "Create a multi-factor authentication enrollment ticket",
            "description": "Generate an email with a link to start the multi-factor authentication enrollment process (subscription required).",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/enrollmentCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/enrollmentCreate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Enrollment ticket successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "ticket_id": {
                                 "type": "string",
                                 "description": "The ticket_id used to identify the enrollment",
                                 "default": "u2x2-u2x2-u2x2-u2x2-u2x2-u2x2"
                              },
                              "ticket_url": {
                                 "type": "string",
                                 "description": "The url you can use to start enrollment",
                                 "default": "https://{tenant}.guardian.auth0.com/enrollment?ticket_id={ticket_id}"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               },
               "404": {
                  "description": "User not found."
               }
            },
            "operationId": "post_ticket",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:guardian_enrollment_tickets"
                  ]
               }
            ]
         }
      },
      "/guardian/enrollments/{id}": {
         "get": {
            "summary": "Retrieve a multi-factor authentication enrollment",
            "description": "Retrieve an enrollment (including its status and type).\\n\\nNote: Phone numbers are partially obfuscated.",
            "tags": [
               "guardian"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the enrollment to be retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^((totp|sms|voice|push|email|recovery-code|webauthn-roaming|webauthn-platform)\\|)?dev_[A-Za-z0-9-_]+$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Enrollment successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/enrollment"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_enrollments_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_enrollments"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a multi-factor authentication enrollment",
            "description": "Delete an enrollment to allow the user to enroll with multi-factor authentication again.",
            "tags": [
               "guardian"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the enrollment to be deleted.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^((totp|sms|voice|push|email|recovery-code|webauthn-roaming|webauthn-platform)\\|)?dev_[A-Za-z0-9-_]+$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Enrollment successfully deleted."
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope (expected delete:enrollment)."
               }
            },
            "operationId": "delete_enrollments_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:guardian_enrollments"
                  ]
               }
            ]
         }
      },
      "/guardian/factors": {
         "get": {
            "summary": "Retrieve Factors and their Status",
            "description": "Retrieve all <a href=\"https://auth0.com/docs/multifactor-authentication\">multi-factor authentication</a> configurations.",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Factors successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/factor"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_factors",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/phone/message-types": {
         "get": {
            "summary": "Retrieve the Enabled Phone Factors",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Returns the enabled phone factors",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message_types": {
                                 "type": "array",
                                 "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                                 "items": {
                                    "type": "string",
                                    "enum": [
                                       "sms",
                                       "voice"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "get_message-types",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update the Enabled Phone Factors",
            "description": "Update enabled phone factors for multi-factor authentication",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "message_types"
                        ],
                        "properties": {
                           "message_types": {
                              "type": "array",
                              "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "sms",
                                    "voice"
                                 ]
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "message_types"
                        ],
                        "properties": {
                           "message_types": {
                              "type": "array",
                              "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                              "items": {
                                 "type": "string",
                                 "enum": [
                                    "sms",
                                    "voice"
                                 ]
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Returns selected SMS provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message_types": {
                                 "type": "array",
                                 "description": "The list of phone factors to enable on the tenant. Can include `sms` and `voice`.",
                                 "items": {
                                    "type": "string",
                                    "enum": [
                                       "sms",
                                       "voice"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               },
               "404": {
                  "description": "The phone factor does not exist."
               }
            },
            "operationId": "put_message-types",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/phone/providers/twilio": {
         "get": {
            "summary": "Retrieve Twilio phone configuration",
            "description": "Retrieve the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio phone provider configuration</a> (subscription required).",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Twilio Phone configuration successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/twilioFactorProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_phone_twilio_factor_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update Twilio phone configuration",
            "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio phone provider configuration</a> (subscription required).",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "from": {
                              "type": "string",
                              "description": "From number",
                              "default": "+1223323",
                              "minLength": 0,
                              "maxLength": 64,
                              "nullable": true
                           },
                           "messaging_service_sid": {
                              "type": "string",
                              "description": "Copilot SID",
                              "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "auth_token": {
                              "type": "string",
                              "description": "Twilio Authentication token",
                              "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sid": {
                              "type": "string",
                              "description": "Twilio SID",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "from": {
                              "type": "string",
                              "description": "From number",
                              "default": "+1223323",
                              "minLength": 0,
                              "maxLength": 64,
                              "nullable": true
                           },
                           "messaging_service_sid": {
                              "type": "string",
                              "description": "Copilot SID",
                              "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "auth_token": {
                              "type": "string",
                              "description": "Twilio Authentication token",
                              "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sid": {
                              "type": "string",
                              "description": "Twilio SID",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Twilio Phone configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "from": {
                                 "type": "string",
                                 "description": "From number",
                                 "default": "+1223323",
                                 "minLength": 0,
                                 "maxLength": 64,
                                 "nullable": true
                              },
                              "messaging_service_sid": {
                                 "type": "string",
                                 "description": "Copilot SID",
                                 "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "auth_token": {
                                 "type": "string",
                                 "description": "Twilio Authentication token",
                                 "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sid": {
                                 "type": "string",
                                 "description": "Twilio SID",
                                 "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_twilio",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/phone/selected-provider": {
         "get": {
            "summary": "Retrieve phone configuration (one of auth0|twilio|phone-message-hook)",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Returns selected Phone provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "auth0",
                                    "twilio",
                                    "phone-message-hook"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "get_phone_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update phone configuration (one of auth0|twilio|phone-message-hook)",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "auth0",
                                 "twilio",
                                 "phone-message-hook"
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "auth0",
                                 "twilio",
                                 "phone-message-hook"
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Returns selected Phone provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "auth0",
                                    "twilio",
                                    "phone-message-hook"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "put_phone_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/phone/templates": {
         "get": {
            "summary": "Retrieve Enrollment and Verification Phone Templates",
            "description": "Retrieve phone enrollment and verification templates (subscription required).",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Phone enrollment and verification templates successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/templateMessages"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_factor_phone_templates",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update Enrollment and Verification Phone Templates",
            "description": "Customize the messages sent to complete phone enrollment and verification (subscription required).",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/templateMessages"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/templateMessages"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Phone enrollment and verification templates successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/templateMessages"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_factor_phone_templates",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/push-notification/providers/apns": {
         "get": {
            "summary": "Retrieve APNS push notification configuration",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "APNS configuration successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "bundle_id": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 20,
                                 "nullable": true
                              },
                              "sandbox": {
                                 "type": "boolean"
                              },
                              "enabled": {
                                 "type": "boolean"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_apns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Updates APNs provider configuration",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "sandbox": {
                              "type": "boolean"
                           },
                           "bundle_id": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "p12": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 10000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "sandbox": {
                              "type": "boolean"
                           },
                           "bundle_id": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "p12": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 10000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "APNS configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "sandbox": {
                                 "type": "boolean"
                              },
                              "bundle_id": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "patch_apns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Updates APNs provider configuration",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "sandbox": {
                              "type": "boolean"
                           },
                           "bundle_id": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "p12": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 10000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "sandbox": {
                              "type": "boolean"
                           },
                           "bundle_id": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "p12": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 10000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "APNS configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "sandbox": {
                                 "type": "boolean"
                              },
                              "bundle_id": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_apns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/push-notification/providers/fcm": {
         "patch": {
            "summary": "Updates FCM provider configuration",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "server_key": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 152,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "server_key": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 152,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "FCM configuration updated",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "patch_fcm",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Updates FCM provider configuration",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "server_key": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 152,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "server_key": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 152,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "FCM configuration updated",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "put_fcm",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/push-notification/providers/sns": {
         "get": {
            "summary": "Retrieve AWS SNS push notification configuration",
            "description": "Retrieve the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "AWS SNS configuration successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/snsFactorProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_sns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update SNS configuration for push notifications",
            "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "aws_access_key_id": {
                              "type": "string",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_secret_access_key": {
                              "type": "string",
                              "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_region": {
                              "type": "string",
                              "default": "us-west-1",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_apns_platform_application_arn": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_gcm_platform_application_arn": {
                              "type": "string",
                              "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "aws_access_key_id": {
                              "type": "string",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_secret_access_key": {
                              "type": "string",
                              "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_region": {
                              "type": "string",
                              "default": "us-west-1",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_apns_platform_application_arn": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_gcm_platform_application_arn": {
                              "type": "string",
                              "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "AWS SNS configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "aws_access_key_id": {
                                 "type": "string",
                                 "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "aws_secret_access_key": {
                                 "type": "string",
                                 "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "aws_region": {
                                 "type": "string",
                                 "default": "us-west-1",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sns_apns_platform_application_arn": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sns_gcm_platform_application_arn": {
                                 "type": "string",
                                 "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "patch_sns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update AWS SNS push notification configuration",
            "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/developer/sns-configuration\">AWS SNS push notification provider configuration</a> (subscription required).",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "aws_access_key_id": {
                              "type": "string",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_secret_access_key": {
                              "type": "string",
                              "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_region": {
                              "type": "string",
                              "default": "us-west-1",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_apns_platform_application_arn": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_gcm_platform_application_arn": {
                              "type": "string",
                              "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "aws_access_key_id": {
                              "type": "string",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_secret_access_key": {
                              "type": "string",
                              "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "aws_region": {
                              "type": "string",
                              "default": "us-west-1",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_apns_platform_application_arn": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sns_gcm_platform_application_arn": {
                              "type": "string",
                              "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "AWS SNS configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "aws_access_key_id": {
                                 "type": "string",
                                 "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "aws_secret_access_key": {
                                 "type": "string",
                                 "default": "B1ER5JHDGJL3C4sVAKK7SBsq806R3IpL",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "aws_region": {
                                 "type": "string",
                                 "default": "us-west-1",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sns_apns_platform_application_arn": {
                                 "type": "string",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sns_gcm_platform_application_arn": {
                                 "type": "string",
                                 "default": "urn://yRMeBxgcCXh8MeTXPBAxhQnm6gP6f5nP",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_sns",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/push-notification/selected-provider": {
         "get": {
            "summary": "Retrieve push notification provider",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Returns selected push notification provider",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "guardian",
                                    "sns",
                                    "direct"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "get_pn_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update Push Notification configuration (one of direct|sns|guardian)",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "guardian",
                                 "sns",
                                 "direct"
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "guardian",
                                 "sns",
                                 "direct"
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Returns selected push notification provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "guardian",
                                    "sns",
                                    "direct"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "put_pn_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/sms/providers/twilio": {
         "get": {
            "summary": "Retrieve Twilio SMS configuration",
            "description": "Retrieve the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio SMS provider configuration</a> (subscription required).\\n\\n    A new endpoint is available to retrieve the Twilio configuration related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/get_twilio'>phone Twilio configuration</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Twilio SMS configuration successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/twilioFactorProvider"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_sms_twilio_factor_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update Twilio SMS configuration",
            "description": "Configure the <a href=\"https://auth0.com/docs/multifactor-authentication/twilio-configuration\">Twilio SMS provider configuration</a> (subscription required).\\n    \\n    A new endpoint is available to update the Twilio configuration related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/put_twilio'>phone Twilio configuration</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "from": {
                              "type": "string",
                              "description": "From number",
                              "default": "+1223323",
                              "minLength": 0,
                              "maxLength": 64,
                              "nullable": true
                           },
                           "messaging_service_sid": {
                              "type": "string",
                              "description": "Copilot SID",
                              "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "auth_token": {
                              "type": "string",
                              "description": "Twilio Authentication token",
                              "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sid": {
                              "type": "string",
                              "description": "Twilio SID",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "from": {
                              "type": "string",
                              "description": "From number",
                              "default": "+1223323",
                              "minLength": 0,
                              "maxLength": 64,
                              "nullable": true
                           },
                           "messaging_service_sid": {
                              "type": "string",
                              "description": "Copilot SID",
                              "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "auth_token": {
                              "type": "string",
                              "description": "Twilio Authentication token",
                              "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           },
                           "sid": {
                              "type": "string",
                              "description": "Twilio SID",
                              "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                              "minLength": 1,
                              "maxLength": 1000,
                              "nullable": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Twilio SMS configuration successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "from": {
                                 "type": "string",
                                 "description": "From number",
                                 "default": "+1223323",
                                 "minLength": 0,
                                 "maxLength": 64,
                                 "nullable": true
                              },
                              "messaging_service_sid": {
                                 "type": "string",
                                 "description": "Copilot SID",
                                 "default": "5dEkAiHLPCuQ1uJj4qNXcAnERFAL6cpq",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "auth_token": {
                                 "type": "string",
                                 "description": "Twilio Authentication token",
                                 "default": "zw5Ku6z2sxhd0ZVXto5SDHX6KPDByJPU",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              },
                              "sid": {
                                 "type": "string",
                                 "description": "Twilio SID",
                                 "default": "wywA2BH4VqTpfywiDuyDAYZL3xQjoO40",
                                 "minLength": 1,
                                 "maxLength": 1000,
                                 "nullable": true
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_sms_twilio_factor_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/sms/selected-provider": {
         "get": {
            "summary": "Retrieve SMS configuration (one of auth0|twilio|phone-message-hook)",
            "description": "A new endpoint is available to retrieve the configuration related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/get_selected_provider'>phone configuration</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Returns selected SMS provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "auth0",
                                    "twilio",
                                    "phone-message-hook"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "get_sms_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update SMS configuration (one of auth0|twilio|phone-message-hook)",
            "description": "A new endpoint is available to update the configuration related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/put_selected_provider'>phone configuration</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "auth0",
                                 "twilio",
                                 "phone-message-hook"
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "provider"
                        ],
                        "properties": {
                           "provider": {
                              "type": "string",
                              "enum": [
                                 "auth0",
                                 "twilio",
                                 "phone-message-hook"
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Returns selected SMS provider configuration",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "provider": {
                                 "type": "string",
                                 "enum": [
                                    "auth0",
                                    "twilio",
                                    "phone-message-hook"
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "put_sms_providers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/sms/templates": {
         "get": {
            "summary": "Retrieve SMS Enrollment and Verification Templates",
            "description": "Retrieve SMS enrollment and verification templates (subscription required). \\n\\n    A new endpoint is available to retrieve enrollment and verification templates related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/get_templates'>phone templates</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "SMS enrollment and verification templates successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/templateMessages"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "get_factor_sms_templates",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:guardian_factors"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Update SMS Enrollment and Verification Templates",
            "description": "Customize the messages sent to complete SMS enrollment and verification (subscription required).\\n    \\n    A new endpoint is available to update enrollment and verification templates related to phone factors (<a href='https://manage.local.dev.auth0.com/docs/api/management/v2/#!/Guardian/put_templates'>phone templates</a>). It has the same payload as this one. Please use it instead.",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/templateMessages"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/templateMessages"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "SMS enrollment and verification templates successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/templateMessages"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_factor_sms_templates",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/factors/{name}": {
         "put": {
            "summary": "Update a Multi-factor Authentication Factor",
            "description": "Update a multi-factor authentication factor (subscription required).",
            "tags": [
               "guardian"
            ],
            "parameters": [
               {
                  "name": "name",
                  "in": "path",
                  "description": "Factor name. Can be `sms`, `push-notification`, `email`, `duo` `otp` `webauthn-roaming`, `webauthn-platform`, or `recovery-code`.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "push-notification",
                        "sms",
                        "email",
                        "duo",
                        "otp",
                        "webauthn-roaming",
                        "webauthn-platform",
                        "recovery-code"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "enabled"
                        ],
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether this factor is enabled (true) or disabled (false)."
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "enabled"
                        ],
                        "properties": {
                           "enabled": {
                              "type": "boolean",
                              "description": "Whether this factor is enabled (true) or disabled (false)."
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Factor updated successfully.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "enabled"
                           ],
                           "properties": {
                              "enabled": {
                                 "type": "boolean",
                                 "description": "Whether this factor is enabled (true) or disabled (false).",
                                 "default": "true"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope."
               }
            },
            "operationId": "put_factors_by_name",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:guardian_factors"
                  ]
               }
            ]
         }
      },
      "/guardian/policies": {
         "get": {
            "summary": "Get the Multi-factor Authentication policies",
            "description": "Gets the MFA policies for the tenant.\\n\\nThe following policies are supported: <ul><li><code>all-applications<\/code> policy - will prompt with MFA for all logins.</li><li><code>confidence-score<\/code> policy - will prompt with MFA only for low confidence logins.</li></ul>\\nUse of the Adaptive MFA feature requires an add-on for the Enterprise plan. Please contact sales with any questions. For more information about Adaptive MFA, read our <a href=\"https://auth0.com/docs/mfa/adaptive-mfa\">full documentation</a>.\\n",
            "tags": [
               "guardian"
            ],
            "responses": {
               "200": {
                  "description": "Success",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string",
                              "description": "The MFA policy",
                              "enum": [
                                 "all-applications",
                                 "confidence-score"
                              ]
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "get_policies",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:mfa_policies"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Set the Multi-factor Authentication policies",
            "description": "Sets the MFA policies for the tenant.\\n\\nThe following policies are supported: <ul><li><code>all-applications<\/code> policy - will prompt with MFA for all logins.</li><li><code>confidence-score<\/code> policy - will prompt with MFA only for low confidence logins.</li></ul> Pass an empty array to remove all MFA policies.\\nUse of the Adaptive MFA feature requires an add-on for the Enterprise plan. Please contact sales with any questions. For more information about Adaptive MFA, read our <a href=\"https://auth0.com/docs/mfa/adaptive-mfa\">full documentation</a>.\\n\\n",
            "tags": [
               "guardian"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "type": "string",
                           "description": "The MFA policy",
                           "enum": [
                              "all-applications",
                              "confidence-score"
                           ]
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "array",
                        "items": {
                           "type": "string",
                           "description": "The MFA policy",
                           "enum": [
                              "all-applications",
                              "confidence-score"
                           ]
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Policies updated",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "string",
                              "description": "The MFA policy",
                              "enum": [
                                 "all-applications",
                                 "confidence-score"
                              ]
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas"
               },
               "401": {
                  "description": "Token has expired or signature is invalid"
               },
               "403": {
                  "description": "Insufficient scope"
               }
            },
            "operationId": "put_policies",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:mfa_policies"
                  ]
               }
            ]
         }
      },
      "/hooks": {
         "get": {
            "summary": "Get hooks",
            "description": "Retrieve all <a href=\"https://auth0.com/docs/hooks\">hooks</a>. Accepts a list of fields to include or exclude in the result.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "enabled",
                  "in": "query",
                  "description": "Optional filter on whether a hook is enabled (true) or disabled (false).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((id)|(name)|(script)|(dependencies)|(enabled)|(triggerId))(,((id)|(name)|(script)|(dependencies)|(enabled)|(triggerId)))*$"
                  }
               },
               {
                  "name": "triggerId",
                  "in": "query",
                  "description": "Retrieves hooks that match the trigger",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "credentials-exchange",
                        "pre-user-registration",
                        "post-user-registration",
                        "post-change-password",
                        "send-phone-message"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Hooks successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/hook"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "hooks": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/hook"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:hooks."
               },
               "404": {
                  "description": "Hook not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_hooks",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:hooks"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a hook",
            "description": "Create a new hook.\\n",
            "tags": [
               "hooks"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/hookCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/hookCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Hook successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/hook"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "This endpoint is disabled for your tenant."
               },
               "409": {
                  "description": "Hook with the same name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_hooks",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:hooks"
                  ]
               }
            ]
         }
      },
      "/hooks/{id}": {
         "get": {
            "summary": "Get a hook",
            "description": "Retrieve <a href=\"https://auth0.com/docs/hooks\">a hook</a> by its ID. Accepts a list of fields to include in the result.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((id)|(name)|(script)|(dependencies)|(enabled)|(triggerId))(,((id)|(name)|(script)|(dependencies)|(enabled)|(triggerId)))*$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Hook successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/hook"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:hooks."
               },
               "404": {
                  "description": "Hook not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_hooks_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:hooks"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a hook",
            "description": "Delete a hook.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Hook successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:hooks."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_hooks_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:hooks"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a hook",
            "description": "Update an existing hook.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook to update.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/hookUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/hookUpdate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Hook successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/hook"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "This endpoint is disabled for your tenant."
               },
               "404": {
                  "description": "The hook does not exist"
               },
               "409": {
                  "description": "A hook with the same name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_hooks_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:hooks"
                  ]
               }
            ]
         }
      },
      "/hooks/{id}/secrets": {
         "get": {
            "summary": "Get hook secrets",
            "description": "Retrieve a hook's secrets by the ID of the hook.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook to retrieve secrets from.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Hook secrets successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "description": "Hashmap of key-value pairs where the value must be a string.",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:hooks."
               },
               "404": {
                  "description": "Hook not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_secrets",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:hooks"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete hook secrets",
            "description": "Delete one or more existing secrets for a given hook. Accepts an array of secret names to delete. ",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook whose secrets to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "array",
                        "description": "Array of secret names to delete.",
                        "items": {
                           "type": "string"
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "array",
                        "description": "Array of secret names to delete.",
                        "items": {
                           "type": "string"
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Hook secrets successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:hooks."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_secrets",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:hooks"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update hook secrets",
            "description": "Update one or more existing secrets for an existing hook. Accepts an object of key-value pairs, where the key is the name of the existing secret.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the hook whose secrets to update.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "Hashmap of key-value pairs where the value must be a string.",
                        "additionalProperties": {}
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "Hashmap of key-value pairs where the value must be a string.",
                        "additionalProperties": {}
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Hook secrets successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "description": "Hashmap of key-value pairs where the value must be a string.",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "This endpoint is disabled for your tenant."
               },
               "404": {
                  "description": "Hook or secret not found."
               },
               "409": {
                  "description": "Secret with the same name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_secrets",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:hooks"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Add hook secrets",
            "description": "Add one or more secrets to an existing hook. Accepts an object of key-value pairs, where the key is the name of the secret. A hook can have a maximum of 20 secrets.\\n",
            "tags": [
               "hooks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the hook to retrieve",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9-]*$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "Hashmap of key-value pairs where the value must be a string.",
                        "additionalProperties": {}
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "Hashmap of key-value pairs where the value must be a string.",
                        "additionalProperties": {}
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Hook secrets successfully added.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "description": "Hashmap of key-value pairs where the value must be a string.",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "This endpoint is disabled for your tenant."
               },
               "409": {
                  "description": "Secret with the same name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_secrets",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:hooks"
                  ]
               }
            ]
         }
      },
      "/jobs/users-exports": {
         "post": {
            "summary": "Create export users job",
            "description": "Export all users to a file via a long-running job.",
            "tags": [
               "jobs"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "connection_id": {
                              "type": "string",
                              "description": "connection_id of the connection from which users will be exported.",
                              "default": "con_0000000000000001"
                           },
                           "format": {
                              "type": "string",
                              "description": "Format of the file. Must be `json` or `csv`.",
                              "default": "csv",
                              "enum": [
                                 "json",
                                 "csv"
                              ]
                           },
                           "limit": {
                              "type": "integer",
                              "description": "Limit the number of records.",
                              "default": 5
                           },
                           "fields": {
                              "type": "array",
                              "description": "List of fields to be included in the CSV. Defaults to a predefined set of fields.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "name"
                                 ],
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "Name of the field in the profile.",
                                       "maxLength": 100
                                    },
                                    "export_as": {
                                       "type": "string",
                                       "description": "Title of the column in the exported CSV.",
                                       "maxLength": 100
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "connection_id": {
                              "type": "string",
                              "description": "connection_id of the connection from which users will be exported.",
                              "default": "con_0000000000000001"
                           },
                           "format": {
                              "type": "string",
                              "description": "Format of the file. Must be `json` or `csv`.",
                              "default": "csv",
                              "enum": [
                                 "json",
                                 "csv"
                              ]
                           },
                           "limit": {
                              "type": "integer",
                              "description": "Limit the number of records.",
                              "default": 5
                           },
                           "fields": {
                              "type": "array",
                              "description": "List of fields to be included in the CSV. Defaults to a predefined set of fields.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "name"
                                 ],
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "Name of the field in the profile.",
                                       "maxLength": 100
                                    },
                                    "export_as": {
                                       "type": "string",
                                       "description": "Title of the column in the exported CSV.",
                                       "maxLength": 100
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Job created successfully.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/job"
                        }
                     }
                  }
               },
               "400": {
                  "description": "The connection does not exist."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_users-exports",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users"
                  ]
               }
            ]
         }
      },
      "/jobs/users-imports": {
         "post": {
            "summary": "Create import users job",
            "description": "Import users from a <a href=\"https://manage.local.dev.auth0.com/docs/users/references/bulk-import-database-schema-examples\">formatted file</a> into a connection via a long-running job.",
            "tags": [
               "jobs"
            ],
            "requestBody": {
               "content": {
                  "multipart/form-data": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "users",
                           "connection_id"
                        ],
                        "properties": {
                           "users": {
                              "type": "string",
                              "format": "binary"
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "connection_id of the connection to which users will be imported.",
                              "default": "con_0000000000000001"
                           },
                           "upsert": {
                              "type": "boolean",
                              "description": "Whether to update users if they already exist (true) or to ignore them (false).",
                              "default": false
                           },
                           "external_id": {
                              "type": "string",
                              "description": "Customer-defined ID."
                           },
                           "send_completion_email": {
                              "type": "boolean",
                              "description": "Whether to send a completion email to all tenant owners when the job is finished (true) or not (false).",
                              "default": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Job successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/job"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Custom Database Connections without import mode are not allowed."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:users."
               },
               "413": {
                  "description": "Payload content length greater than maximum allowed: 512000."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               },
               "500": {
                  "description": "Internal error."
               }
            },
            "operationId": "post_users-imports",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:users"
                  ]
               }
            ]
         }
      },
      "/jobs/verification-email": {
         "post": {
            "summary": "Send an email address verification email",
            "description": "Send an email to the specified user that asks them to click a link to <a href=\"https://auth0.com/docs/email/custom#verification-email\">verify their email address</a>.\\n\\nNote: You must have the `Status` toggle enabled for the verification email template for the email to be sent.",
            "tags": [
               "jobs"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "user_id"
                        ],
                        "properties": {
                           "user_id": {
                              "type": "string",
                              "description": "user_id of the user to send the verification email to.",
                              "default": "google-oauth2|1234"
                           },
                           "client_id": {
                              "type": "string",
                              "description": "client_id of the client (application). If no value provided, the global Client ID will be used."
                           },
                           "identity": {
                              "type": "object",
                              "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
                              "required": [
                                 "user_id",
                                 "provider"
                              ],
                              "properties": {
                                 "user_id": {
                                    "type": "string",
                                    "description": "user_id of the identity to be verified.",
                                    "default": "5457edea1b8f22891a000004"
                                 },
                                 "provider": {
                                    "type": "string",
                                    "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
                                    "default": "google-oauth2",
                                    "enum": [
                                       "ad",
                                       "adfs",
                                       "amazon",
                                       "apple",
                                       "dropbox",
                                       "bitbucket",
                                       "aol",
                                       "auth0-oidc",
                                       "auth0",
                                       "baidu",
                                       "bitly",
                                       "box",
                                       "custom",
                                       "daccount",
                                       "dwolla",
                                       "email",
                                       "evernote-sandbox",
                                       "evernote",
                                       "exact",
                                       "facebook",
                                       "fitbit",
                                       "flickr",
                                       "github",
                                       "google-apps",
                                       "google-oauth2",
                                       "instagram",
                                       "ip",
                                       "linkedin",
                                       "miicard",
                                       "oauth1",
                                       "oauth2",
                                       "office365",
                                       "oidc",
                                       "paypal",
                                       "paypal-sandbox",
                                       "pingfederate",
                                       "planningcenter",
                                       "renren",
                                       "salesforce-community",
                                       "salesforce-sandbox",
                                       "salesforce",
                                       "samlp",
                                       "sharepoint",
                                       "shopify",
                                       "sms",
                                       "soundcloud",
                                       "thecity-sandbox",
                                       "thecity",
                                       "thirtysevensignals",
                                       "twitter",
                                       "untappd",
                                       "vkontakte",
                                       "waad",
                                       "weibo",
                                       "windowslive",
                                       "wordpress",
                                       "yahoo",
                                       "yammer",
                                       "yandex",
                                       "line"
                                    ]
                                 }
                              }
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "user_id"
                        ],
                        "properties": {
                           "user_id": {
                              "type": "string",
                              "description": "user_id of the user to send the verification email to.",
                              "default": "google-oauth2|1234"
                           },
                           "client_id": {
                              "type": "string",
                              "description": "client_id of the client (application). If no value provided, the global Client ID will be used."
                           },
                           "identity": {
                              "type": "object",
                              "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
                              "required": [
                                 "user_id",
                                 "provider"
                              ],
                              "properties": {
                                 "user_id": {
                                    "type": "string",
                                    "description": "user_id of the identity to be verified.",
                                    "default": "5457edea1b8f22891a000004"
                                 },
                                 "provider": {
                                    "type": "string",
                                    "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
                                    "default": "google-oauth2",
                                    "enum": [
                                       "ad",
                                       "adfs",
                                       "amazon",
                                       "apple",
                                       "dropbox",
                                       "bitbucket",
                                       "aol",
                                       "auth0-oidc",
                                       "auth0",
                                       "baidu",
                                       "bitly",
                                       "box",
                                       "custom",
                                       "daccount",
                                       "dwolla",
                                       "email",
                                       "evernote-sandbox",
                                       "evernote",
                                       "exact",
                                       "facebook",
                                       "fitbit",
                                       "flickr",
                                       "github",
                                       "google-apps",
                                       "google-oauth2",
                                       "instagram",
                                       "ip",
                                       "linkedin",
                                       "miicard",
                                       "oauth1",
                                       "oauth2",
                                       "office365",
                                       "oidc",
                                       "paypal",
                                       "paypal-sandbox",
                                       "pingfederate",
                                       "planningcenter",
                                       "renren",
                                       "salesforce-community",
                                       "salesforce-sandbox",
                                       "salesforce",
                                       "samlp",
                                       "sharepoint",
                                       "shopify",
                                       "sms",
                                       "soundcloud",
                                       "thecity-sandbox",
                                       "thecity",
                                       "thirtysevensignals",
                                       "twitter",
                                       "untappd",
                                       "vkontakte",
                                       "waad",
                                       "weibo",
                                       "windowslive",
                                       "wordpress",
                                       "yahoo",
                                       "yammer",
                                       "yandex",
                                       "line"
                                    ]
                                 }
                              }
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Job successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/job"
                        }
                     }
                  }
               },
               "400": {
                  "description": "The organization does not exist"
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_verification-email",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/jobs/{id}": {
         "get": {
            "summary": "Get a job",
            "description": "Retrieves a job. Useful to check its status.",
            "tags": [
               "jobs",
               "ignore-linter-missing-owners"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the job.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^job_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Job retrieved successfully.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/job"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:users."
               },
               "404": {
                  "description": "Job not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_jobs_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:users",
                     "read:users"
                  ]
               }
            ]
         }
      },
      "/jobs/{id}/errors": {
         "get": {
            "summary": "Get job error details",
            "description": "Retrieve error details of a failed job.",
            "tags": [
               "jobs",
               "ignore-linter-missing-owners"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the job.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^job_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Job successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "user": {
                                          "type": "object",
                                          "description": "User, as provided in the import file",
                                          "additionalProperties": {}
                                       },
                                       "errors": {
                                          "type": "array",
                                          "description": "Errors importing the user.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "code": {
                                                   "type": "string",
                                                   "description": "Error code."
                                                },
                                                "message": {
                                                   "type": "string",
                                                   "description": "Error message."
                                                },
                                                "path": {
                                                   "type": "string",
                                                   "description": "Error field."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "$ref": "#/components/schemas/job"
                              }
                           ]
                        }
                     }
                  }
               },
               "204": {
                  "description": "The job was retrieved, but no errors were found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "user": {
                                          "type": "object",
                                          "description": "User, as provided in the import file",
                                          "additionalProperties": {}
                                       },
                                       "errors": {
                                          "type": "array",
                                          "description": "Errors importing the user.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "code": {
                                                   "type": "string",
                                                   "description": "Error code."
                                                },
                                                "message": {
                                                   "type": "string",
                                                   "description": "Error message."
                                                },
                                                "path": {
                                                   "type": "string",
                                                   "description": "Error field."
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "$ref": "#/components/schemas/job"
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: create:users"
               },
               "404": {
                  "description": "The job does not exist"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_errors",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:users",
                     "read:users"
                  ]
               }
            ]
         }
      },
      "/keys/signing": {
         "get": {
            "summary": "Get all Application Signing Keys",
            "description": "Get all Application Signing Keys",
            "tags": [
               "keys"
            ],
            "responses": {
               "200": {
                  "description": "The signing keys were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "object",
                              "required": [
                                 "cert",
                                 "kid",
                                 "fingerprint",
                                 "thumbprint"
                              ],
                              "properties": {
                                 "kid": {
                                    "type": "string",
                                    "description": "The key id of the signing key",
                                    "default": "21hi274Rp02112mgkUGma"
                                 },
                                 "cert": {
                                    "type": "string",
                                    "description": "The public certificate of the signing key",
                                    "default": "-----BEGIN CERTIFICATE-----\r\\nMIIDDTCCA...YiA0TQhAt8=\r\\n-----END CERTIFICATE-----"
                                 },
                                 "pkcs7": {
                                    "type": "string",
                                    "description": "The public certificate of the signing key in pkcs7 format",
                                    "default": "-----BEGIN PKCS7-----\r\\nMIIDPA....t8xAA==\r\\n-----END PKCS7-----"
                                 },
                                 "current": {
                                    "type": "boolean",
                                    "description": "True if the key is the the current key",
                                    "default": true
                                 },
                                 "next": {
                                    "type": "boolean",
                                    "description": "True if the key is the the next key"
                                 },
                                 "previous": {
                                    "type": "boolean",
                                    "description": "True if the key is the the previous key"
                                 },
                                 "current_since": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "The date and time when the key became the current key"
                                       },
                                       {
                                          "type": "object",
                                          "description": "The date and time when the key became the current key",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 },
                                 "current_until": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "The date and time when the current key was rotated"
                                       },
                                       {
                                          "type": "object",
                                          "description": "The date and time when the current key was rotated",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 },
                                 "fingerprint": {
                                    "type": "string",
                                    "description": "The cert fingerprint",
                                    "default": "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25"
                                 },
                                 "thumbprint": {
                                    "type": "string",
                                    "description": "The cert thumbprint",
                                    "default": "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825"
                                 },
                                 "revoked": {
                                    "type": "boolean",
                                    "description": "True if the key is revoked"
                                 },
                                 "revoked_at": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "The date and time when the key was revoked"
                                       },
                                       {
                                          "type": "object",
                                          "description": "The date and time when the key was revoked",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:signing_keys"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_signing_keys",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:signing_keys"
                  ]
               }
            ]
         }
      },
      "/keys/signing/rotate": {
         "post": {
            "summary": "Rotate the Application Signing Key",
            "description": "Rotate the Application Signing Key",
            "tags": [
               "keys"
            ],
            "responses": {
               "201": {
                  "description": "Signing key rotated successfully.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "cert",
                              "kid"
                           ],
                           "properties": {
                              "cert": {
                                 "type": "string",
                                 "description": "Next key certificate",
                                 "default": "-----BEGIN CERTIFICATE-----\r\\nMIIDDTCCA...YiA0TQhAt8=\r\\n-----END CERTIFICATE-----"
                              },
                              "kid": {
                                 "type": "string",
                                 "description": "Next key id",
                                 "default": "21hi274Rp02112mgkUGma"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected create:signing_keys and update:signing_keys."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_signing_keys",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:signing_keys",
                     "update:signing_keys"
                  ]
               }
            ]
         }
      },
      "/keys/signing/{kid}": {
         "get": {
            "summary": "Get an Application Signing Key by its key id",
            "description": "Get an Application Signing Key by its key id",
            "tags": [
               "keys"
            ],
            "parameters": [
               {
                  "name": "kid",
                  "in": "path",
                  "description": "Key id of the key to retrieve",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The signing keys were retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "cert",
                              "kid",
                              "fingerprint",
                              "thumbprint"
                           ],
                           "properties": {
                              "kid": {
                                 "type": "string",
                                 "description": "The key id of the signing key",
                                 "default": "21hi274Rp02112mgkUGma"
                              },
                              "cert": {
                                 "type": "string",
                                 "description": "The public certificate of the signing key",
                                 "default": "-----BEGIN CERTIFICATE-----\r\\nMIIDDTCCA...YiA0TQhAt8=\r\\n-----END CERTIFICATE-----"
                              },
                              "pkcs7": {
                                 "type": "string",
                                 "description": "The public certificate of the signing key in pkcs7 format",
                                 "default": "-----BEGIN PKCS7-----\r\\nMIIDPA....t8xAA==\r\\n-----END PKCS7-----"
                              },
                              "current": {
                                 "type": "boolean",
                                 "description": "True if the key is the the current key",
                                 "default": true
                              },
                              "next": {
                                 "type": "boolean",
                                 "description": "True if the key is the the next key"
                              },
                              "previous": {
                                 "type": "boolean",
                                 "description": "True if the key is the the previous key"
                              },
                              "current_since": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "The date and time when the key became the current key"
                                    },
                                    {
                                       "type": "object",
                                       "description": "The date and time when the key became the current key",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "current_until": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "The date and time when the current key was rotated"
                                    },
                                    {
                                       "type": "object",
                                       "description": "The date and time when the current key was rotated",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "fingerprint": {
                                 "type": "string",
                                 "description": "The cert fingerprint",
                                 "default": "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25"
                              },
                              "thumbprint": {
                                 "type": "string",
                                 "description": "The cert thumbprint",
                                 "default": "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825"
                              },
                              "revoked": {
                                 "type": "boolean",
                                 "description": "True if the key is revoked"
                              },
                              "revoked_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "The date and time when the key was revoked"
                                    },
                                    {
                                       "type": "object",
                                       "description": "The date and time when the key was revoked",
                                       "additionalProperties": {}
                                    }
                                 ]
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation"
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:signing_keys"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_signing_key",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:signing_keys"
                  ]
               }
            ]
         }
      },
      "/keys/signing/{kid}/revoke": {
         "put": {
            "summary": "Revoke an Application Signing Key by its key id",
            "description": "Revoke an Application Signing Key by its key id",
            "tags": [
               "keys"
            ],
            "parameters": [
               {
                  "name": "kid",
                  "in": "path",
                  "description": "Key id of the key to revoke",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Signing key revoked successfully.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "cert",
                              "kid"
                           ],
                           "properties": {
                              "cert": {
                                 "type": "string",
                                 "description": "Revoked key certificate",
                                 "default": "-----BEGIN CERTIFICATE-----\r\\nMIIDDTCCA...YiA0TQhAt8=\r\\n-----END CERTIFICATE-----"
                              },
                              "kid": {
                                 "type": "string",
                                 "description": "Revoked key id",
                                 "default": "21hi274Rp02112mgkUGma"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:signing_keys."
               },
               "404": {
                  "description": "Signing key not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "put_signing_keys",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:signing_keys"
                  ]
               }
            ]
         }
      },
      "/log-streams": {
         "get": {
            "summary": "Get log streams",
            "description": "Retrieve details on <a href=\"https://auth0.com/docs/logs/streams\">log streams</a>.\\n<h5>Sample Response</h5><pre><code>[{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"eventbridge\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"awsAccountId\": \"string\",\\n\t\t\"awsRegion\": \"string\",\\n\t\t\"awsPartnerEventSource\": \"string\"\\n\t}\\n}, {\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"http\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\\n\t\t\"httpContentType\": \"string\",\\n\t\t\"httpEndpoint\": \"string\",\\n\t\t\"httpAuthorization\": \"string\"\\n\t}\\n},\\n{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"eventgrid\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"azureSubscriptionId\": \"string\",\\n\t\t\"azureResourceGroup\": \"string\",\\n\t\t\"azureRegion\": \"string\",\\n\t\t\"azurePartnerTopic\": \"string\"\\n\t}\\n},\\n{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"splunk\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"splunkDomain\": \"string\",\\n\t\t\"splunkToken\": \"string\",\\n\t\t\"splunkPort\": \"string\",\\n\t\t\"splunkSecure\": \"boolean\"\\n\t}\\n},\\n{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"sumo\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"sumoSourceAddress\": \"string\",\\n\t}\\n},\\n{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"datadog\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"datadogRegion\": \"string\",\\n\t\t\"datadogApiKey\": \"string\"\\n\t}\\n}]<\/code></pre>\\n",
            "tags": [
               "log-streams"
            ],
            "responses": {
               "200": {
                  "description": "Returning log streams",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "oneOf": [
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "http"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "httpEndpoint"
                                          ],
                                          "properties": {
                                             "httpAuthorization": {
                                                "type": "string",
                                                "description": "HTTP Authorization header"
                                             },
                                             "httpContentFormat": {
                                                "type": "string",
                                                "description": "HTTP JSON format",
                                                "enum": [
                                                   "JSONARRAY",
                                                   "JSONLINES",
                                                   "JSONOBJECT"
                                                ]
                                             },
                                             "httpContentType": {
                                                "type": "string",
                                                "description": "HTTP Content-Type header"
                                             },
                                             "httpEndpoint": {
                                                "type": "string",
                                                "description": "HTTP endpoint"
                                             },
                                             "httpCustomHeaders": {
                                                "type": "array",
                                                "description": "custom HTTP headers",
                                                "items": {
                                                   "type": "object",
                                                   "properties": {
                                                      "header": {
                                                         "type": "string",
                                                         "description": "HTTP header name"
                                                      },
                                                      "value": {
                                                         "type": "string",
                                                         "description": "HTTP header value"
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "eventbridge"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "awsAccountId",
                                             "awsRegion"
                                          ],
                                          "properties": {
                                             "awsAccountId": {
                                                "type": "string",
                                                "description": "AWS account ID"
                                             },
                                             "awsRegion": {
                                                "type": "string",
                                                "description": "The region in which the EventBridge event source will be created",
                                                "enum": [
                                                   "ap-east-1",
                                                   "ap-northeast-1",
                                                   "ap-northeast-2",
                                                   "ap-northeast-3",
                                                   "ap-south-1",
                                                   "ap-southeast-1",
                                                   "ap-southeast-2",
                                                   "ca-central-1",
                                                   "cn-north-1",
                                                   "cn-northwest-1",
                                                   "eu-central-1",
                                                   "eu-north-1",
                                                   "eu-west-1",
                                                   "eu-west-2",
                                                   "eu-west-3",
                                                   "me-south-1",
                                                   "sa-east-1",
                                                   "us-gov-east-1",
                                                   "us-gov-west-1",
                                                   "us-east-1",
                                                   "us-east-2",
                                                   "us-west-1",
                                                   "us-west-2"
                                                ]
                                             },
                                             "awsPartnerEventSource": {
                                                "type": "string",
                                                "description": "AWS EventBridge partner event source"
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "eventgrid"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "azureSubscriptionId",
                                             "azureRegion",
                                             "azureResourceGroup"
                                          ],
                                          "properties": {
                                             "azureSubscriptionId": {
                                                "type": "string",
                                                "description": "Subscription ID"
                                             },
                                             "azureRegion": {
                                                "type": "string",
                                                "description": "Azure Region Name",
                                                "enum": [
                                                   "australiacentral",
                                                   "australiaeast",
                                                   "australiasoutheast",
                                                   "brazilsouth",
                                                   "canadacentral",
                                                   "canadaeast",
                                                   "centralindia",
                                                   "centralus",
                                                   "eastasia",
                                                   "eastus",
                                                   "eastus2",
                                                   "francecentral",
                                                   "germanywestcentral",
                                                   "japaneast",
                                                   "japanwest",
                                                   "koreacentral",
                                                   "koreasouth",
                                                   "northcentralus",
                                                   "northeurope",
                                                   "norwayeast",
                                                   "southafricanorth",
                                                   "southcentralus",
                                                   "southeastasia",
                                                   "southindia",
                                                   "switzerlandnorth",
                                                   "uaenorth",
                                                   "uksouth",
                                                   "ukwest",
                                                   "westcentralus",
                                                   "westeurope",
                                                   "westindia",
                                                   "westus",
                                                   "westus2"
                                                ]
                                             },
                                             "azureResourceGroup": {
                                                "type": "string",
                                                "description": "Resource Group"
                                             },
                                             "azurePartnerTopic": {
                                                "type": "string",
                                                "description": "Partner Topic"
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "datadog"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "datadogApiKey",
                                             "datadogRegion"
                                          ],
                                          "properties": {
                                             "datadogApiKey": {
                                                "type": "string",
                                                "description": "Datadog API Key"
                                             },
                                             "datadogRegion": {
                                                "type": "string",
                                                "description": "Datadog region",
                                                "enum": [
                                                   "us",
                                                   "eu",
                                                   "us3",
                                                   "us5"
                                                ]
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "splunk"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "splunkDomain",
                                             "splunkToken",
                                             "splunkPort",
                                             "splunkSecure"
                                          ],
                                          "properties": {
                                             "splunkDomain": {
                                                "type": "string",
                                                "description": "Splunk URL Endpoint"
                                             },
                                             "splunkPort": {
                                                "type": "string",
                                                "description": "Port"
                                             },
                                             "splunkToken": {
                                                "type": "string",
                                                "description": "Splunk token"
                                             },
                                             "splunkSecure": {
                                                "type": "boolean",
                                                "description": "Verify TLS certificate"
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "sumo"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "sumoSourceAddress"
                                          ],
                                          "properties": {
                                             "sumoSourceAddress": {
                                                "type": "string",
                                                "description": "HTTP Source Address"
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "segment"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "segmentWriteKey"
                                          ],
                                          "properties": {
                                             "segmentWriteKey": {
                                                "type": "string",
                                                "description": "Segment write key"
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the log stream"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "log stream name"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                          "enum": [
                                             "active",
                                             "paused",
                                             "suspended"
                                          ]
                                       },
                                       "type": {
                                          "type": "string",
                                          "enum": [
                                             "mixpanel"
                                          ]
                                       },
                                       "filters": {
                                          "type": "array",
                                          "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "type": {
                                                   "type": "string",
                                                   "description": "Filter type. Currently `category` is the only valid type.",
                                                   "enum": [
                                                      "category"
                                                   ]
                                                },
                                                "name": {
                                                   "type": "string",
                                                   "description": "Category group name",
                                                   "enum": [
                                                      "auth.ancillary.fail",
                                                      "auth.ancillary.success",
                                                      "auth.login.fail",
                                                      "auth.login.notification",
                                                      "auth.login.success",
                                                      "auth.logout.fail",
                                                      "auth.logout.success",
                                                      "auth.signup.fail",
                                                      "auth.signup.success",
                                                      "auth.silent_auth.fail",
                                                      "auth.silent_auth.success",
                                                      "auth.token_exchange.fail",
                                                      "auth.token_exchange.success",
                                                      "management.fail",
                                                      "management.success",
                                                      "system.notification",
                                                      "user.fail",
                                                      "user.notification",
                                                      "user.success",
                                                      "other"
                                                   ]
                                                }
                                             }
                                          }
                                       },
                                       "sink": {
                                          "type": "object",
                                          "required": [
                                             "mixpanelRegion",
                                             "mixpanelProjectId",
                                             "mixpanelServiceAccountUsername",
                                             "mixpanelServiceAccountPassword"
                                          ],
                                          "properties": {
                                             "mixpanelRegion": {
                                                "type": "string",
                                                "description": "Mixpanel Region",
                                                "enum": [
                                                   "us",
                                                   "eu"
                                                ]
                                             },
                                             "mixpanelProjectId": {
                                                "type": "string",
                                                "description": "Mixpanel Project Id"
                                             },
                                             "mixpanelServiceAccountUsername": {
                                                "type": "string",
                                                "description": "Mixpanel Service Account Username"
                                             },
                                             "mixpanelServiceAccountPassword": {
                                                "type": "string",
                                                "description": "Mixpanel Service Account Password"
                                             }
                                          }
                                       }
                                    }
                                 }
                              ]
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "404": {
                  "description": "The log stream does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_log-streams",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:log_streams"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a log stream",
            "description": "Create a log stream.\\n<h5>Log Stream Types</h5> The <code>type<\/code> of log stream being created determines the properties required in the <code>sink<\/code> payload.\\n<h5>HTTP Stream</h5> For an <code>http<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"http\",\\n\t\"sink\": {\\n\t\t\"httpEndpoint\": \"string\",\\n\t\t\"httpContentType\": \"string\",\\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\\n\t\t\"httpAuthorization\": \"string\"\\n\t}\\n}<\/code></pre>\\nResponse: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"http\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"httpEndpoint\": \"string\",\\n\t\t\"httpContentType\": \"string\",\\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\\n\t\t\"httpAuthorization\": \"string\"\\n\t}\\n}<\/code></pre>\\n<h5>Amazon EventBridge Stream</h5> For an <code>eventbridge<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"eventbridge\",\\n\t\"sink\": {\\n\t\t\"awsRegion\": \"string\",\\n\t\t\"awsAccountId\": \"string\"\\n\t}\\n}<\/code></pre>\\nThe response will include an additional field <code>awsPartnerEventSource<\/code> in the <code>sink<\/code>: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"eventbridge\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"awsAccountId\": \"string\",\\n\t\t\"awsRegion\": \"string\",\\n\t\t\"awsPartnerEventSource\": \"string\"\\n\t}\\n}<\/code></pre>\\n<h5>Azure Event Grid Stream</h5> For an <code>Azure Event Grid<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"eventgrid\",\\n\t\"sink\": {\\n\t\t\"azureSubscriptionId\": \"string\",\\n\t\t\"azureResourceGroup\": \"string\",\\n\t\t\"azureRegion\": \"string\"\\n\t}\\n}<\/code></pre>\\nResponse: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"http\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"azureSubscriptionId\": \"string\",\\n\t\t\"azureResourceGroup\": \"string\",\\n\t\t\"azureRegion\": \"string\",\\n\t\t\"azurePartnerTopic\": \"string\"\\n\t}\\n}<\/code></pre>\\n<h5>Datadog Stream</h5> For a <code>Datadog<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"datadog\",\\n\t\"sink\": {\\n\t\t\"datadogRegion\": \"string\",\\n\t\t\"datadogApiKey\": \"string\"\\n\t}\\n}<\/code></pre>\\nResponse: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"datadog\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"datadogRegion\": \"string\",\\n\t\t\"datadogApiKey\": \"string\"\\n\t}\\n}<\/code></pre>\\n<h5>Splunk Stream</h5> For a <code>Splunk<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"splunk\",\\n\t\"sink\": {\\n\t\t\"splunkDomain\": \"string\",\\n\t\t\"splunkToken\": \"string\",\\n\t\t\"splunkPort\": \"string\",\\n\t\t\"splunkSecure\": \"boolean\"\\n\t}\\n}<\/code></pre>\\nResponse: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"splunk\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"splunkDomain\": \"string\",\\n\t\t\"splunkToken\": \"string\",\\n\t\t\"splunkPort\": \"string\",\\n\t\t\"splunkSecure\": \"boolean\"\\n\t}\\n}<\/code></pre>\\n<h5>Sumo Logic Stream</h5> For a <code>Sumo Logic<\/code> Stream, the <code>sink<\/code> properties are listed in the payload below\\nRequest: <pre><code>{\\n\t\"name\": \"string\",\\n\t\"type\": \"sumo\",\\n\t\"sink\": {\\n\t\t\"sumoSourceAddress\": \"string\",\\n\t}\\n}<\/code></pre>\\nResponse: <pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"sumo\",\\n\t\"status\": \"active\",\\n\t\"sink\": {\\n\t\t\"sumoSourceAddress\": \"string\",\\n\t}\\n}<\/code></pre>\\n",
            "tags": [
               "log-streams"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "oneOf": [
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "http"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "httpEndpoint"
                                    ],
                                    "properties": {
                                       "httpAuthorization": {
                                          "type": "string",
                                          "description": "HTTP Authorization header"
                                       },
                                       "httpContentFormat": {
                                          "type": "string",
                                          "description": "HTTP JSON format",
                                          "enum": [
                                             "JSONARRAY",
                                             "JSONLINES",
                                             "JSONOBJECT"
                                          ]
                                       },
                                       "httpContentType": {
                                          "type": "string",
                                          "description": "HTTP Content-Type header"
                                       },
                                       "httpEndpoint": {
                                          "type": "string",
                                          "description": "HTTP endpoint"
                                       },
                                       "httpCustomHeaders": {
                                          "type": "array",
                                          "description": "custom HTTP headers",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "header": {
                                                   "type": "string",
                                                   "description": "HTTP header name"
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "HTTP header value"
                                                }
                                             }
                                          }
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "eventbridge"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "awsAccountId",
                                       "awsRegion"
                                    ],
                                    "properties": {
                                       "awsAccountId": {
                                          "type": "string",
                                          "description": "AWS account ID"
                                       },
                                       "awsRegion": {
                                          "type": "string",
                                          "description": "The region in which the EventBridge event source will be created",
                                          "enum": [
                                             "ap-east-1",
                                             "ap-northeast-1",
                                             "ap-northeast-2",
                                             "ap-northeast-3",
                                             "ap-south-1",
                                             "ap-southeast-1",
                                             "ap-southeast-2",
                                             "ca-central-1",
                                             "cn-north-1",
                                             "cn-northwest-1",
                                             "eu-central-1",
                                             "eu-north-1",
                                             "eu-west-1",
                                             "eu-west-2",
                                             "eu-west-3",
                                             "me-south-1",
                                             "sa-east-1",
                                             "us-gov-east-1",
                                             "us-gov-west-1",
                                             "us-east-1",
                                             "us-east-2",
                                             "us-west-1",
                                             "us-west-2"
                                          ]
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "eventgrid"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "azureSubscriptionId",
                                       "azureRegion",
                                       "azureResourceGroup"
                                    ],
                                    "properties": {
                                       "azureSubscriptionId": {
                                          "type": "string",
                                          "description": "Subscription ID"
                                       },
                                       "azureRegion": {
                                          "type": "string",
                                          "description": "Azure Region Name",
                                          "enum": [
                                             "australiacentral",
                                             "australiaeast",
                                             "australiasoutheast",
                                             "brazilsouth",
                                             "canadacentral",
                                             "canadaeast",
                                             "centralindia",
                                             "centralus",
                                             "eastasia",
                                             "eastus",
                                             "eastus2",
                                             "francecentral",
                                             "germanywestcentral",
                                             "japaneast",
                                             "japanwest",
                                             "koreacentral",
                                             "koreasouth",
                                             "northcentralus",
                                             "northeurope",
                                             "norwayeast",
                                             "southafricanorth",
                                             "southcentralus",
                                             "southeastasia",
                                             "southindia",
                                             "switzerlandnorth",
                                             "uaenorth",
                                             "uksouth",
                                             "ukwest",
                                             "westcentralus",
                                             "westeurope",
                                             "westindia",
                                             "westus",
                                             "westus2"
                                          ]
                                       },
                                       "azureResourceGroup": {
                                          "type": "string",
                                          "description": "Resource Group"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "datadog"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "datadogApiKey",
                                       "datadogRegion"
                                    ],
                                    "properties": {
                                       "datadogApiKey": {
                                          "type": "string",
                                          "description": "Datadog API Key"
                                       },
                                       "datadogRegion": {
                                          "type": "string",
                                          "description": "Datadog region",
                                          "enum": [
                                             "us",
                                             "eu",
                                             "us3",
                                             "us5"
                                          ]
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "splunk"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "splunkDomain",
                                       "splunkToken",
                                       "splunkPort",
                                       "splunkSecure"
                                    ],
                                    "properties": {
                                       "splunkDomain": {
                                          "type": "string",
                                          "description": "Splunk URL Endpoint"
                                       },
                                       "splunkPort": {
                                          "type": "string",
                                          "description": "Port"
                                       },
                                       "splunkToken": {
                                          "type": "string",
                                          "description": "Splunk token"
                                       },
                                       "splunkSecure": {
                                          "type": "boolean",
                                          "description": "Verify TLS certificate"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "sumo"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "sumoSourceAddress"
                                    ],
                                    "properties": {
                                       "sumoSourceAddress": {
                                          "type": "string",
                                          "description": "HTTP Source Address"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "segment"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "segmentWriteKey"
                                    ],
                                    "properties": {
                                       "segmentWriteKey": {
                                          "type": "string",
                                          "description": "Segment write key"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "mixpanel"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "mixpanelRegion",
                                       "mixpanelProjectId",
                                       "mixpanelServiceAccountUsername",
                                       "mixpanelServiceAccountPassword"
                                    ],
                                    "properties": {
                                       "mixpanelRegion": {
                                          "type": "string",
                                          "description": "Mixpanel Region",
                                          "enum": [
                                             "us",
                                             "eu"
                                          ]
                                       },
                                       "mixpanelProjectId": {
                                          "type": "string",
                                          "description": "Mixpanel Project Id"
                                       },
                                       "mixpanelServiceAccountUsername": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Username"
                                       },
                                       "mixpanelServiceAccountPassword": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Password"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           }
                        ]
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "oneOf": [
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "http"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "httpEndpoint"
                                    ],
                                    "properties": {
                                       "httpAuthorization": {
                                          "type": "string",
                                          "description": "HTTP Authorization header"
                                       },
                                       "httpContentFormat": {
                                          "type": "string",
                                          "description": "HTTP JSON format",
                                          "enum": [
                                             "JSONARRAY",
                                             "JSONLINES",
                                             "JSONOBJECT"
                                          ]
                                       },
                                       "httpContentType": {
                                          "type": "string",
                                          "description": "HTTP Content-Type header"
                                       },
                                       "httpEndpoint": {
                                          "type": "string",
                                          "description": "HTTP endpoint"
                                       },
                                       "httpCustomHeaders": {
                                          "type": "array",
                                          "description": "custom HTTP headers",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "header": {
                                                   "type": "string",
                                                   "description": "HTTP header name"
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "HTTP header value"
                                                }
                                             }
                                          }
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "eventbridge"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "awsAccountId",
                                       "awsRegion"
                                    ],
                                    "properties": {
                                       "awsAccountId": {
                                          "type": "string",
                                          "description": "AWS account ID"
                                       },
                                       "awsRegion": {
                                          "type": "string",
                                          "description": "The region in which the EventBridge event source will be created",
                                          "enum": [
                                             "ap-east-1",
                                             "ap-northeast-1",
                                             "ap-northeast-2",
                                             "ap-northeast-3",
                                             "ap-south-1",
                                             "ap-southeast-1",
                                             "ap-southeast-2",
                                             "ca-central-1",
                                             "cn-north-1",
                                             "cn-northwest-1",
                                             "eu-central-1",
                                             "eu-north-1",
                                             "eu-west-1",
                                             "eu-west-2",
                                             "eu-west-3",
                                             "me-south-1",
                                             "sa-east-1",
                                             "us-gov-east-1",
                                             "us-gov-west-1",
                                             "us-east-1",
                                             "us-east-2",
                                             "us-west-1",
                                             "us-west-2"
                                          ]
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "eventgrid"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "azureSubscriptionId",
                                       "azureRegion",
                                       "azureResourceGroup"
                                    ],
                                    "properties": {
                                       "azureSubscriptionId": {
                                          "type": "string",
                                          "description": "Subscription ID"
                                       },
                                       "azureRegion": {
                                          "type": "string",
                                          "description": "Azure Region Name",
                                          "enum": [
                                             "australiacentral",
                                             "australiaeast",
                                             "australiasoutheast",
                                             "brazilsouth",
                                             "canadacentral",
                                             "canadaeast",
                                             "centralindia",
                                             "centralus",
                                             "eastasia",
                                             "eastus",
                                             "eastus2",
                                             "francecentral",
                                             "germanywestcentral",
                                             "japaneast",
                                             "japanwest",
                                             "koreacentral",
                                             "koreasouth",
                                             "northcentralus",
                                             "northeurope",
                                             "norwayeast",
                                             "southafricanorth",
                                             "southcentralus",
                                             "southeastasia",
                                             "southindia",
                                             "switzerlandnorth",
                                             "uaenorth",
                                             "uksouth",
                                             "ukwest",
                                             "westcentralus",
                                             "westeurope",
                                             "westindia",
                                             "westus",
                                             "westus2"
                                          ]
                                       },
                                       "azureResourceGroup": {
                                          "type": "string",
                                          "description": "Resource Group"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "datadog"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "datadogApiKey",
                                       "datadogRegion"
                                    ],
                                    "properties": {
                                       "datadogApiKey": {
                                          "type": "string",
                                          "description": "Datadog API Key"
                                       },
                                       "datadogRegion": {
                                          "type": "string",
                                          "description": "Datadog region",
                                          "enum": [
                                             "us",
                                             "eu",
                                             "us3",
                                             "us5"
                                          ]
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "splunk"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "splunkDomain",
                                       "splunkToken",
                                       "splunkPort",
                                       "splunkSecure"
                                    ],
                                    "properties": {
                                       "splunkDomain": {
                                          "type": "string",
                                          "description": "Splunk URL Endpoint"
                                       },
                                       "splunkPort": {
                                          "type": "string",
                                          "description": "Port"
                                       },
                                       "splunkToken": {
                                          "type": "string",
                                          "description": "Splunk token"
                                       },
                                       "splunkSecure": {
                                          "type": "boolean",
                                          "description": "Verify TLS certificate"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "sumo"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "sumoSourceAddress"
                                    ],
                                    "properties": {
                                       "sumoSourceAddress": {
                                          "type": "string",
                                          "description": "HTTP Source Address"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "segment"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "segmentWriteKey"
                                    ],
                                    "properties": {
                                       "segmentWriteKey": {
                                          "type": "string",
                                          "description": "Segment write key"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           },
                           {
                              "type": "object",
                              "required": [
                                 "type",
                                 "sink"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "log stream name"
                                 },
                                 "type": {
                                    "type": "string",
                                    "enum": [
                                       "mixpanel"
                                    ]
                                 },
                                 "filters": {
                                    "type": "array",
                                    "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "type": {
                                             "type": "string",
                                             "description": "Filter type. Currently `category` is the only valid type.",
                                             "enum": [
                                                "category"
                                             ]
                                          },
                                          "name": {
                                             "type": "string",
                                             "description": "Category group name",
                                             "enum": [
                                                "auth.ancillary.fail",
                                                "auth.ancillary.success",
                                                "auth.login.fail",
                                                "auth.login.notification",
                                                "auth.login.success",
                                                "auth.logout.fail",
                                                "auth.logout.success",
                                                "auth.signup.fail",
                                                "auth.signup.success",
                                                "auth.silent_auth.fail",
                                                "auth.silent_auth.success",
                                                "auth.token_exchange.fail",
                                                "auth.token_exchange.success",
                                                "management.fail",
                                                "management.success",
                                                "system.notification",
                                                "user.fail",
                                                "user.notification",
                                                "user.success",
                                                "other"
                                             ]
                                          }
                                       }
                                    }
                                 },
                                 "sink": {
                                    "type": "object",
                                    "required": [
                                       "mixpanelRegion",
                                       "mixpanelProjectId",
                                       "mixpanelServiceAccountUsername",
                                       "mixpanelServiceAccountPassword"
                                    ],
                                    "properties": {
                                       "mixpanelRegion": {
                                          "type": "string",
                                          "description": "Mixpanel Region",
                                          "enum": [
                                             "us",
                                             "eu"
                                          ]
                                       },
                                       "mixpanelProjectId": {
                                          "type": "string",
                                          "description": "Mixpanel Project Id"
                                       },
                                       "mixpanelServiceAccountUsername": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Username"
                                       },
                                       "mixpanelServiceAccountPassword": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Password"
                                       }
                                    }
                                 },
                                 "startFrom": {
                                    "type": "string",
                                    "description": "The optional datetime (ISO 8601) to start streaming logs from",
                                    "default": "2021-03-01T19:57:29.532Z"
                                 }
                              }
                           }
                        ]
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Log stream created",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "http"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "httpEndpoint"
                                       ],
                                       "properties": {
                                          "httpAuthorization": {
                                             "type": "string",
                                             "description": "HTTP Authorization header"
                                          },
                                          "httpContentFormat": {
                                             "type": "string",
                                             "description": "HTTP JSON format",
                                             "enum": [
                                                "JSONARRAY",
                                                "JSONLINES",
                                                "JSONOBJECT"
                                             ]
                                          },
                                          "httpContentType": {
                                             "type": "string",
                                             "description": "HTTP Content-Type header"
                                          },
                                          "httpEndpoint": {
                                             "type": "string",
                                             "description": "HTTP endpoint"
                                          },
                                          "httpCustomHeaders": {
                                             "type": "array",
                                             "description": "custom HTTP headers",
                                             "items": {
                                                "type": "object",
                                                "properties": {
                                                   "header": {
                                                      "type": "string",
                                                      "description": "HTTP header name"
                                                   },
                                                   "value": {
                                                      "type": "string",
                                                      "description": "HTTP header value"
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventbridge"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "awsAccountId",
                                          "awsRegion"
                                       ],
                                       "properties": {
                                          "awsAccountId": {
                                             "type": "string",
                                             "description": "AWS account ID"
                                          },
                                          "awsRegion": {
                                             "type": "string",
                                             "description": "The region in which the EventBridge event source will be created",
                                             "enum": [
                                                "ap-east-1",
                                                "ap-northeast-1",
                                                "ap-northeast-2",
                                                "ap-northeast-3",
                                                "ap-south-1",
                                                "ap-southeast-1",
                                                "ap-southeast-2",
                                                "ca-central-1",
                                                "cn-north-1",
                                                "cn-northwest-1",
                                                "eu-central-1",
                                                "eu-north-1",
                                                "eu-west-1",
                                                "eu-west-2",
                                                "eu-west-3",
                                                "me-south-1",
                                                "sa-east-1",
                                                "us-gov-east-1",
                                                "us-gov-west-1",
                                                "us-east-1",
                                                "us-east-2",
                                                "us-west-1",
                                                "us-west-2"
                                             ]
                                          },
                                          "awsPartnerEventSource": {
                                             "type": "string",
                                             "description": "AWS EventBridge partner event source"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventgrid"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "azureSubscriptionId",
                                          "azureRegion",
                                          "azureResourceGroup"
                                       ],
                                       "properties": {
                                          "azureSubscriptionId": {
                                             "type": "string",
                                             "description": "Subscription ID"
                                          },
                                          "azureRegion": {
                                             "type": "string",
                                             "description": "Azure Region Name",
                                             "enum": [
                                                "australiacentral",
                                                "australiaeast",
                                                "australiasoutheast",
                                                "brazilsouth",
                                                "canadacentral",
                                                "canadaeast",
                                                "centralindia",
                                                "centralus",
                                                "eastasia",
                                                "eastus",
                                                "eastus2",
                                                "francecentral",
                                                "germanywestcentral",
                                                "japaneast",
                                                "japanwest",
                                                "koreacentral",
                                                "koreasouth",
                                                "northcentralus",
                                                "northeurope",
                                                "norwayeast",
                                                "southafricanorth",
                                                "southcentralus",
                                                "southeastasia",
                                                "southindia",
                                                "switzerlandnorth",
                                                "uaenorth",
                                                "uksouth",
                                                "ukwest",
                                                "westcentralus",
                                                "westeurope",
                                                "westindia",
                                                "westus",
                                                "westus2"
                                             ]
                                          },
                                          "azureResourceGroup": {
                                             "type": "string",
                                             "description": "Resource Group"
                                          },
                                          "azurePartnerTopic": {
                                             "type": "string",
                                             "description": "Partner Topic"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "datadog"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "datadogApiKey",
                                          "datadogRegion"
                                       ],
                                       "properties": {
                                          "datadogApiKey": {
                                             "type": "string",
                                             "description": "Datadog API Key"
                                          },
                                          "datadogRegion": {
                                             "type": "string",
                                             "description": "Datadog region",
                                             "enum": [
                                                "us",
                                                "eu",
                                                "us3",
                                                "us5"
                                             ]
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "splunk"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "splunkDomain",
                                          "splunkToken",
                                          "splunkPort",
                                          "splunkSecure"
                                       ],
                                       "properties": {
                                          "splunkDomain": {
                                             "type": "string",
                                             "description": "Splunk URL Endpoint"
                                          },
                                          "splunkPort": {
                                             "type": "string",
                                             "description": "Port"
                                          },
                                          "splunkToken": {
                                             "type": "string",
                                             "description": "Splunk token"
                                          },
                                          "splunkSecure": {
                                             "type": "boolean",
                                             "description": "Verify TLS certificate"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "sumo"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "sumoSourceAddress"
                                       ],
                                       "properties": {
                                          "sumoSourceAddress": {
                                             "type": "string",
                                             "description": "HTTP Source Address"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "segment"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "segmentWriteKey"
                                       ],
                                       "properties": {
                                          "segmentWriteKey": {
                                             "type": "string",
                                             "description": "Segment write key"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "mixpanel"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "mixpanelRegion",
                                          "mixpanelProjectId",
                                          "mixpanelServiceAccountUsername",
                                          "mixpanelServiceAccountPassword"
                                       ],
                                       "properties": {
                                          "mixpanelRegion": {
                                             "type": "string",
                                             "description": "Mixpanel Region",
                                             "enum": [
                                                "us",
                                                "eu"
                                             ]
                                          },
                                          "mixpanelProjectId": {
                                             "type": "string",
                                             "description": "Mixpanel Project Id"
                                          },
                                          "mixpanelServiceAccountUsername": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Username"
                                          },
                                          "mixpanelServiceAccountPassword": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Password"
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "409": {
                  "description": "You have reached the maximum number of log streams for your account."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_log-streams",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:log_streams"
                  ]
               }
            ]
         }
      },
      "/log-streams/{id}": {
         "get": {
            "summary": "Get log stream by ID",
            "description": "Retrieve a log stream configuration and status.\\n<h5>Sample responses</h5><h5>Amazon EventBridge Log Stream</h5><pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"eventbridge\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"awsAccountId\": \"string\",\\n\t\t\"awsRegion\": \"string\",\\n\t\t\"awsPartnerEventSource\": \"string\"\\n\t}\\n}<\/code></pre> <h5>HTTP Log Stream</h5><pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"http\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"httpContentFormat\": \"JSONLINES|JSONARRAY\",\\n\t\t\"httpContentType\": \"string\",\\n\t\t\"httpEndpoint\": \"string\",\\n\t\t\"httpAuthorization\": \"string\"\\n\t}\\n}<\/code></pre> <h5>Datadog Log Stream</h5><pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"datadog\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"datadogRegion\": \"string\",\\n\t\t\"datadogApiKey\": \"string\"\\n\t}\\n}<\/code></pre> <h5>Splunk Log Stream</h5><pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"splunk\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"splunkDomain\": \"string\",\\n\t\t\"splunkToken\": \"string\",\\n\t\t\"splunkPort\": \"string\",\\n\t\t\"splunkSecure\": \"boolean\"\\n\t}\\n}<\/code></pre> <h5>Sumo Logic Log Stream</h5><pre><code>{\\n\t\"id\": \"string\",\\n\t\"name\": \"string\",\\n\t\"type\": \"sumo\",\\n\t\"status\": \"active|paused|suspended\",\\n\t\"sink\": {\\n\t\t\"sumoSourceAddress\": \"string\",\\n\t}\\n}<\/code></pre> <h5>Status</h5> The <code>status<\/code> of a log stream maybe any of the following:\\n1. <code>active<\/code> - Stream is currently enabled.\\n2. <code>paused<\/code> - Stream is currently user disabled and will not attempt log delivery.\\n3. <code>suspended<\/code> - Stream is currently disabled because of errors and will not attempt log delivery.\\n",
            "tags": [
               "log-streams"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the log stream to get",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Returning log stream.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "http"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "httpEndpoint"
                                       ],
                                       "properties": {
                                          "httpAuthorization": {
                                             "type": "string",
                                             "description": "HTTP Authorization header"
                                          },
                                          "httpContentFormat": {
                                             "type": "string",
                                             "description": "HTTP JSON format",
                                             "enum": [
                                                "JSONARRAY",
                                                "JSONLINES",
                                                "JSONOBJECT"
                                             ]
                                          },
                                          "httpContentType": {
                                             "type": "string",
                                             "description": "HTTP Content-Type header"
                                          },
                                          "httpEndpoint": {
                                             "type": "string",
                                             "description": "HTTP endpoint"
                                          },
                                          "httpCustomHeaders": {
                                             "type": "array",
                                             "description": "custom HTTP headers",
                                             "items": {
                                                "type": "object",
                                                "properties": {
                                                   "header": {
                                                      "type": "string",
                                                      "description": "HTTP header name"
                                                   },
                                                   "value": {
                                                      "type": "string",
                                                      "description": "HTTP header value"
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventbridge"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "awsAccountId",
                                          "awsRegion"
                                       ],
                                       "properties": {
                                          "awsAccountId": {
                                             "type": "string",
                                             "description": "AWS account ID"
                                          },
                                          "awsRegion": {
                                             "type": "string",
                                             "description": "The region in which the EventBridge event source will be created",
                                             "enum": [
                                                "ap-east-1",
                                                "ap-northeast-1",
                                                "ap-northeast-2",
                                                "ap-northeast-3",
                                                "ap-south-1",
                                                "ap-southeast-1",
                                                "ap-southeast-2",
                                                "ca-central-1",
                                                "cn-north-1",
                                                "cn-northwest-1",
                                                "eu-central-1",
                                                "eu-north-1",
                                                "eu-west-1",
                                                "eu-west-2",
                                                "eu-west-3",
                                                "me-south-1",
                                                "sa-east-1",
                                                "us-gov-east-1",
                                                "us-gov-west-1",
                                                "us-east-1",
                                                "us-east-2",
                                                "us-west-1",
                                                "us-west-2"
                                             ]
                                          },
                                          "awsPartnerEventSource": {
                                             "type": "string",
                                             "description": "AWS EventBridge partner event source"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventgrid"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "azureSubscriptionId",
                                          "azureRegion",
                                          "azureResourceGroup"
                                       ],
                                       "properties": {
                                          "azureSubscriptionId": {
                                             "type": "string",
                                             "description": "Subscription ID"
                                          },
                                          "azureRegion": {
                                             "type": "string",
                                             "description": "Azure Region Name",
                                             "enum": [
                                                "australiacentral",
                                                "australiaeast",
                                                "australiasoutheast",
                                                "brazilsouth",
                                                "canadacentral",
                                                "canadaeast",
                                                "centralindia",
                                                "centralus",
                                                "eastasia",
                                                "eastus",
                                                "eastus2",
                                                "francecentral",
                                                "germanywestcentral",
                                                "japaneast",
                                                "japanwest",
                                                "koreacentral",
                                                "koreasouth",
                                                "northcentralus",
                                                "northeurope",
                                                "norwayeast",
                                                "southafricanorth",
                                                "southcentralus",
                                                "southeastasia",
                                                "southindia",
                                                "switzerlandnorth",
                                                "uaenorth",
                                                "uksouth",
                                                "ukwest",
                                                "westcentralus",
                                                "westeurope",
                                                "westindia",
                                                "westus",
                                                "westus2"
                                             ]
                                          },
                                          "azureResourceGroup": {
                                             "type": "string",
                                             "description": "Resource Group"
                                          },
                                          "azurePartnerTopic": {
                                             "type": "string",
                                             "description": "Partner Topic"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "datadog"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "datadogApiKey",
                                          "datadogRegion"
                                       ],
                                       "properties": {
                                          "datadogApiKey": {
                                             "type": "string",
                                             "description": "Datadog API Key"
                                          },
                                          "datadogRegion": {
                                             "type": "string",
                                             "description": "Datadog region",
                                             "enum": [
                                                "us",
                                                "eu",
                                                "us3",
                                                "us5"
                                             ]
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "splunk"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "splunkDomain",
                                          "splunkToken",
                                          "splunkPort",
                                          "splunkSecure"
                                       ],
                                       "properties": {
                                          "splunkDomain": {
                                             "type": "string",
                                             "description": "Splunk URL Endpoint"
                                          },
                                          "splunkPort": {
                                             "type": "string",
                                             "description": "Port"
                                          },
                                          "splunkToken": {
                                             "type": "string",
                                             "description": "Splunk token"
                                          },
                                          "splunkSecure": {
                                             "type": "boolean",
                                             "description": "Verify TLS certificate"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "sumo"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "sumoSourceAddress"
                                       ],
                                       "properties": {
                                          "sumoSourceAddress": {
                                             "type": "string",
                                             "description": "HTTP Source Address"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "segment"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "segmentWriteKey"
                                       ],
                                       "properties": {
                                          "segmentWriteKey": {
                                             "type": "string",
                                             "description": "Segment write key"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "mixpanel"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "mixpanelRegion",
                                          "mixpanelProjectId",
                                          "mixpanelServiceAccountUsername",
                                          "mixpanelServiceAccountPassword"
                                       ],
                                       "properties": {
                                          "mixpanelRegion": {
                                             "type": "string",
                                             "description": "Mixpanel Region",
                                             "enum": [
                                                "us",
                                                "eu"
                                             ]
                                          },
                                          "mixpanelProjectId": {
                                             "type": "string",
                                             "description": "Mixpanel Project Id"
                                          },
                                          "mixpanelServiceAccountUsername": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Username"
                                          },
                                          "mixpanelServiceAccountPassword": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Password"
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "404": {
                  "description": "The log stream does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_log-streams_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:log_streams"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete log stream",
            "description": "Delete a log stream.\\n",
            "tags": [
               "log-streams"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the log stream to delete",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "The log stream was deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected: delete:log_streams."
               },
               "404": {
                  "description": "The log stream does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_log-streams_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:log_streams"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a log stream",
            "description": "Update a log stream.\\n<h4>Examples of how to use the PATCH endpoint.</h4> The following fields may be updated in a PATCH operation: <ul><li>name</li><li>status</li><li>sink</li></ul> Note: For log streams of type <code>eventbridge<\/code> and <code>eventgrid<\/code>, updating the <code>sink<\/code> is not permitted.\\n<h5>Update the status of a log stream</h5><pre><code>{\\n\t\"status\": \"active|paused\"\\n}<\/code></pre>\\n<h5>Update the name of a log stream</h5><pre><code>{\\n\t\"name\": \"string\"\\n}<\/code></pre>\\n<h5>Update the sink properties of a stream of type <code>http<\/code></h5><pre><code>{\\n  \"sink\": {\\n    \"httpEndpoint\": \"string\",\\n    \"httpContentType\": \"string\",\\n    \"httpContentFormat\": \"JSONARRAY|JSONLINES\",\\n    \"httpAuthorization\": \"string\"\\n  }\\n}<\/code></pre>\\n<h5>Update the sink properties of a stream of type <code>datadog<\/code></h5><pre><code>{\\n  \"sink\": {\\n\t\t\"datadogRegion\": \"string\",\\n\t\t\"datadogApiKey\": \"string\"\\n  }\\n}<\/code></pre>\\n<h5>Update the sink properties of a stream of type <code>splunk<\/code></h5><pre><code>{\\n  \"sink\": {\\n    \"splunkDomain\": \"string\",\\n    \"splunkToken\": \"string\",\\n    \"splunkPort\": \"string\",\\n    \"splunkSecure\": \"boolean\"\\n  }\\n}<\/code></pre>\\n<h5>Update the sink properties of a stream of type <code>sumo<\/code></h5><pre><code>{\\n  \"sink\": {\\n    \"sumoSourceAddress\": \"string\"\\n  }\\n}<\/code></pre> ",
            "tags": [
               "log-streams"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The id of the log stream to get",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "log stream name"
                           },
                           "status": {
                              "type": "string",
                              "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                              "enum": [
                                 "active",
                                 "paused",
                                 "suspended"
                              ]
                           },
                           "filters": {
                              "type": "array",
                              "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "type": {
                                       "type": "string",
                                       "description": "Filter type. Currently `category` is the only valid type.",
                                       "enum": [
                                          "category"
                                       ]
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "Category group name",
                                       "enum": [
                                          "auth.ancillary.fail",
                                          "auth.ancillary.success",
                                          "auth.login.fail",
                                          "auth.login.notification",
                                          "auth.login.success",
                                          "auth.logout.fail",
                                          "auth.logout.success",
                                          "auth.signup.fail",
                                          "auth.signup.success",
                                          "auth.silent_auth.fail",
                                          "auth.silent_auth.success",
                                          "auth.token_exchange.fail",
                                          "auth.token_exchange.success",
                                          "management.fail",
                                          "management.success",
                                          "system.notification",
                                          "user.fail",
                                          "user.notification",
                                          "user.success",
                                          "other"
                                       ]
                                    }
                                 }
                              }
                           },
                           "sink": {
                              "oneOf": [
                                 {
                                    "type": "object",
                                    "required": [
                                       "httpEndpoint"
                                    ],
                                    "properties": {
                                       "httpAuthorization": {
                                          "type": "string",
                                          "description": "HTTP Authorization header"
                                       },
                                       "httpContentFormat": {
                                          "type": "string",
                                          "description": "HTTP JSON format",
                                          "enum": [
                                             "JSONARRAY",
                                             "JSONLINES",
                                             "JSONOBJECT"
                                          ]
                                       },
                                       "httpContentType": {
                                          "type": "string",
                                          "description": "HTTP Content-Type header"
                                       },
                                       "httpEndpoint": {
                                          "type": "string",
                                          "description": "HTTP endpoint"
                                       },
                                       "httpCustomHeaders": {
                                          "type": "array",
                                          "description": "custom HTTP headers",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "header": {
                                                   "type": "string",
                                                   "description": "HTTP header name"
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "HTTP header value"
                                                }
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "datadogApiKey",
                                       "datadogRegion"
                                    ],
                                    "properties": {
                                       "datadogApiKey": {
                                          "type": "string",
                                          "description": "Datadog API Key"
                                       },
                                       "datadogRegion": {
                                          "type": "string",
                                          "description": "Datadog region",
                                          "enum": [
                                             "us",
                                             "eu",
                                             "us3",
                                             "us5"
                                          ]
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "splunkDomain",
                                       "splunkToken",
                                       "splunkPort",
                                       "splunkSecure"
                                    ],
                                    "properties": {
                                       "splunkDomain": {
                                          "type": "string",
                                          "description": "Splunk URL Endpoint"
                                       },
                                       "splunkPort": {
                                          "type": "string",
                                          "description": "Port"
                                       },
                                       "splunkToken": {
                                          "type": "string",
                                          "description": "Splunk token"
                                       },
                                       "splunkSecure": {
                                          "type": "boolean",
                                          "description": "Verify TLS certificate"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "sumoSourceAddress"
                                    ],
                                    "properties": {
                                       "sumoSourceAddress": {
                                          "type": "string",
                                          "description": "HTTP Source Address"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "segmentWriteKey"
                                    ],
                                    "properties": {
                                       "segmentWriteKey": {
                                          "type": "string",
                                          "description": "Segment write key"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "mixpanelRegion",
                                       "mixpanelProjectId",
                                       "mixpanelServiceAccountUsername"
                                    ],
                                    "properties": {
                                       "mixpanelRegion": {
                                          "type": "string",
                                          "description": "Mixpanel Region",
                                          "enum": [
                                             "us",
                                             "eu"
                                          ]
                                       },
                                       "mixpanelProjectId": {
                                          "type": "string",
                                          "description": "Mixpanel Project Id"
                                       },
                                       "mixpanelServiceAccountUsername": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Username"
                                       },
                                       "mixpanelServiceAccountPassword": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Password"
                                       }
                                    }
                                 }
                              ]
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "log stream name"
                           },
                           "status": {
                              "type": "string",
                              "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                              "enum": [
                                 "active",
                                 "paused",
                                 "suspended"
                              ]
                           },
                           "filters": {
                              "type": "array",
                              "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "type": {
                                       "type": "string",
                                       "description": "Filter type. Currently `category` is the only valid type.",
                                       "enum": [
                                          "category"
                                       ]
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "Category group name",
                                       "enum": [
                                          "auth.ancillary.fail",
                                          "auth.ancillary.success",
                                          "auth.login.fail",
                                          "auth.login.notification",
                                          "auth.login.success",
                                          "auth.logout.fail",
                                          "auth.logout.success",
                                          "auth.signup.fail",
                                          "auth.signup.success",
                                          "auth.silent_auth.fail",
                                          "auth.silent_auth.success",
                                          "auth.token_exchange.fail",
                                          "auth.token_exchange.success",
                                          "management.fail",
                                          "management.success",
                                          "system.notification",
                                          "user.fail",
                                          "user.notification",
                                          "user.success",
                                          "other"
                                       ]
                                    }
                                 }
                              }
                           },
                           "sink": {
                              "oneOf": [
                                 {
                                    "type": "object",
                                    "required": [
                                       "httpEndpoint"
                                    ],
                                    "properties": {
                                       "httpAuthorization": {
                                          "type": "string",
                                          "description": "HTTP Authorization header"
                                       },
                                       "httpContentFormat": {
                                          "type": "string",
                                          "description": "HTTP JSON format",
                                          "enum": [
                                             "JSONARRAY",
                                             "JSONLINES",
                                             "JSONOBJECT"
                                          ]
                                       },
                                       "httpContentType": {
                                          "type": "string",
                                          "description": "HTTP Content-Type header"
                                       },
                                       "httpEndpoint": {
                                          "type": "string",
                                          "description": "HTTP endpoint"
                                       },
                                       "httpCustomHeaders": {
                                          "type": "array",
                                          "description": "custom HTTP headers",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "header": {
                                                   "type": "string",
                                                   "description": "HTTP header name"
                                                },
                                                "value": {
                                                   "type": "string",
                                                   "description": "HTTP header value"
                                                }
                                             }
                                          }
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "datadogApiKey",
                                       "datadogRegion"
                                    ],
                                    "properties": {
                                       "datadogApiKey": {
                                          "type": "string",
                                          "description": "Datadog API Key"
                                       },
                                       "datadogRegion": {
                                          "type": "string",
                                          "description": "Datadog region",
                                          "enum": [
                                             "us",
                                             "eu",
                                             "us3",
                                             "us5"
                                          ]
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "splunkDomain",
                                       "splunkToken",
                                       "splunkPort",
                                       "splunkSecure"
                                    ],
                                    "properties": {
                                       "splunkDomain": {
                                          "type": "string",
                                          "description": "Splunk URL Endpoint"
                                       },
                                       "splunkPort": {
                                          "type": "string",
                                          "description": "Port"
                                       },
                                       "splunkToken": {
                                          "type": "string",
                                          "description": "Splunk token"
                                       },
                                       "splunkSecure": {
                                          "type": "boolean",
                                          "description": "Verify TLS certificate"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "sumoSourceAddress"
                                    ],
                                    "properties": {
                                       "sumoSourceAddress": {
                                          "type": "string",
                                          "description": "HTTP Source Address"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "segmentWriteKey"
                                    ],
                                    "properties": {
                                       "segmentWriteKey": {
                                          "type": "string",
                                          "description": "Segment write key"
                                       }
                                    }
                                 },
                                 {
                                    "type": "object",
                                    "required": [
                                       "mixpanelRegion",
                                       "mixpanelProjectId",
                                       "mixpanelServiceAccountUsername"
                                    ],
                                    "properties": {
                                       "mixpanelRegion": {
                                          "type": "string",
                                          "description": "Mixpanel Region",
                                          "enum": [
                                             "us",
                                             "eu"
                                          ]
                                       },
                                       "mixpanelProjectId": {
                                          "type": "string",
                                          "description": "Mixpanel Project Id"
                                       },
                                       "mixpanelServiceAccountUsername": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Username"
                                       },
                                       "mixpanelServiceAccountPassword": {
                                          "type": "string",
                                          "description": "Mixpanel Service Account Password"
                                       }
                                    }
                                 }
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Log stream updated",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "http"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "httpEndpoint"
                                       ],
                                       "properties": {
                                          "httpAuthorization": {
                                             "type": "string",
                                             "description": "HTTP Authorization header"
                                          },
                                          "httpContentFormat": {
                                             "type": "string",
                                             "description": "HTTP JSON format",
                                             "enum": [
                                                "JSONARRAY",
                                                "JSONLINES",
                                                "JSONOBJECT"
                                             ]
                                          },
                                          "httpContentType": {
                                             "type": "string",
                                             "description": "HTTP Content-Type header"
                                          },
                                          "httpEndpoint": {
                                             "type": "string",
                                             "description": "HTTP endpoint"
                                          },
                                          "httpCustomHeaders": {
                                             "type": "array",
                                             "description": "custom HTTP headers",
                                             "items": {
                                                "type": "object",
                                                "properties": {
                                                   "header": {
                                                      "type": "string",
                                                      "description": "HTTP header name"
                                                   },
                                                   "value": {
                                                      "type": "string",
                                                      "description": "HTTP header value"
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventbridge"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "awsAccountId",
                                          "awsRegion"
                                       ],
                                       "properties": {
                                          "awsAccountId": {
                                             "type": "string",
                                             "description": "AWS account ID"
                                          },
                                          "awsRegion": {
                                             "type": "string",
                                             "description": "The region in which the EventBridge event source will be created",
                                             "enum": [
                                                "ap-east-1",
                                                "ap-northeast-1",
                                                "ap-northeast-2",
                                                "ap-northeast-3",
                                                "ap-south-1",
                                                "ap-southeast-1",
                                                "ap-southeast-2",
                                                "ca-central-1",
                                                "cn-north-1",
                                                "cn-northwest-1",
                                                "eu-central-1",
                                                "eu-north-1",
                                                "eu-west-1",
                                                "eu-west-2",
                                                "eu-west-3",
                                                "me-south-1",
                                                "sa-east-1",
                                                "us-gov-east-1",
                                                "us-gov-west-1",
                                                "us-east-1",
                                                "us-east-2",
                                                "us-west-1",
                                                "us-west-2"
                                             ]
                                          },
                                          "awsPartnerEventSource": {
                                             "type": "string",
                                             "description": "AWS EventBridge partner event source"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "eventgrid"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "azureSubscriptionId",
                                          "azureRegion",
                                          "azureResourceGroup"
                                       ],
                                       "properties": {
                                          "azureSubscriptionId": {
                                             "type": "string",
                                             "description": "Subscription ID"
                                          },
                                          "azureRegion": {
                                             "type": "string",
                                             "description": "Azure Region Name",
                                             "enum": [
                                                "australiacentral",
                                                "australiaeast",
                                                "australiasoutheast",
                                                "brazilsouth",
                                                "canadacentral",
                                                "canadaeast",
                                                "centralindia",
                                                "centralus",
                                                "eastasia",
                                                "eastus",
                                                "eastus2",
                                                "francecentral",
                                                "germanywestcentral",
                                                "japaneast",
                                                "japanwest",
                                                "koreacentral",
                                                "koreasouth",
                                                "northcentralus",
                                                "northeurope",
                                                "norwayeast",
                                                "southafricanorth",
                                                "southcentralus",
                                                "southeastasia",
                                                "southindia",
                                                "switzerlandnorth",
                                                "uaenorth",
                                                "uksouth",
                                                "ukwest",
                                                "westcentralus",
                                                "westeurope",
                                                "westindia",
                                                "westus",
                                                "westus2"
                                             ]
                                          },
                                          "azureResourceGroup": {
                                             "type": "string",
                                             "description": "Resource Group"
                                          },
                                          "azurePartnerTopic": {
                                             "type": "string",
                                             "description": "Partner Topic"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "datadog"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "datadogApiKey",
                                          "datadogRegion"
                                       ],
                                       "properties": {
                                          "datadogApiKey": {
                                             "type": "string",
                                             "description": "Datadog API Key"
                                          },
                                          "datadogRegion": {
                                             "type": "string",
                                             "description": "Datadog region",
                                             "enum": [
                                                "us",
                                                "eu",
                                                "us3",
                                                "us5"
                                             ]
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "splunk"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "splunkDomain",
                                          "splunkToken",
                                          "splunkPort",
                                          "splunkSecure"
                                       ],
                                       "properties": {
                                          "splunkDomain": {
                                             "type": "string",
                                             "description": "Splunk URL Endpoint"
                                          },
                                          "splunkPort": {
                                             "type": "string",
                                             "description": "Port"
                                          },
                                          "splunkToken": {
                                             "type": "string",
                                             "description": "Splunk token"
                                          },
                                          "splunkSecure": {
                                             "type": "boolean",
                                             "description": "Verify TLS certificate"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "sumo"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "sumoSourceAddress"
                                       ],
                                       "properties": {
                                          "sumoSourceAddress": {
                                             "type": "string",
                                             "description": "HTTP Source Address"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "segment"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "segmentWriteKey"
                                       ],
                                       "properties": {
                                          "segmentWriteKey": {
                                             "type": "string",
                                             "description": "Segment write key"
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "id": {
                                       "type": "string",
                                       "description": "The id of the log stream"
                                    },
                                    "name": {
                                       "type": "string",
                                       "description": "log stream name"
                                    },
                                    "status": {
                                       "type": "string",
                                       "description": "The status of the log stream. Possible values: `active`, `paused`, `suspended`",
                                       "enum": [
                                          "active",
                                          "paused",
                                          "suspended"
                                       ]
                                    },
                                    "type": {
                                       "type": "string",
                                       "enum": [
                                          "mixpanel"
                                       ]
                                    },
                                    "filters": {
                                       "type": "array",
                                       "description": "Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered.",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "type": {
                                                "type": "string",
                                                "description": "Filter type. Currently `category` is the only valid type.",
                                                "enum": [
                                                   "category"
                                                ]
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Category group name",
                                                "enum": [
                                                   "auth.ancillary.fail",
                                                   "auth.ancillary.success",
                                                   "auth.login.fail",
                                                   "auth.login.notification",
                                                   "auth.login.success",
                                                   "auth.logout.fail",
                                                   "auth.logout.success",
                                                   "auth.signup.fail",
                                                   "auth.signup.success",
                                                   "auth.silent_auth.fail",
                                                   "auth.silent_auth.success",
                                                   "auth.token_exchange.fail",
                                                   "auth.token_exchange.success",
                                                   "management.fail",
                                                   "management.success",
                                                   "system.notification",
                                                   "user.fail",
                                                   "user.notification",
                                                   "user.success",
                                                   "other"
                                                ]
                                             }
                                          }
                                       }
                                    },
                                    "sink": {
                                       "type": "object",
                                       "required": [
                                          "mixpanelRegion",
                                          "mixpanelProjectId",
                                          "mixpanelServiceAccountUsername",
                                          "mixpanelServiceAccountPassword"
                                       ],
                                       "properties": {
                                          "mixpanelRegion": {
                                             "type": "string",
                                             "description": "Mixpanel Region",
                                             "enum": [
                                                "us",
                                                "eu"
                                             ]
                                          },
                                          "mixpanelProjectId": {
                                             "type": "string",
                                             "description": "Mixpanel Project Id"
                                          },
                                          "mixpanelServiceAccountUsername": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Username"
                                          },
                                          "mixpanelServiceAccountPassword": {
                                             "type": "string",
                                             "description": "Mixpanel Service Account Password"
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "The account is not allowed to perform this operation."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_log-streams_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:log_streams"
                  ]
               }
            ]
         }
      },
      "/logs": {
         "get": {
            "summary": "Search log events",
            "description": "Retrieve log entries that match the specified search criteria (or all log entries if no criteria specified).\\n\\nSet custom search criteria using the <code>q<\/code> parameter, or search from a specific log ID (<i>\"search from checkpoint\"</i>).\\n\\nFor more information on all possible event types, their respective acronyms, and descriptions, see <a href=\"https://auth0.com/docs/logs/log-event-type-codes\">Log Event Type Codes</a>.\\n\\n<h5>To set custom search criteria, use the following parameters:</h5>\\n\\n<ul>\\n    <li><b>q:</b> Search Criteria using <a href=\"https://auth0.com/docs/logs/log-search-query-syntax\">Query String Syntax</a></li>\\n    <li><b>page:</b> Page index of the results to return. First page is 0.</li>\\n    <li><b>per_page:</b> Number of results per page.</li>\\n    <li><b>sort:</b> Field to use for sorting appended with `:1` for ascending and `:-1` for descending. e.g. `date:-1`</li>\\n    <li><b>fields:</b> Comma-separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields.</li>\\n    <li><b>include_fields:</b> Whether specified fields are to be included (true) or excluded (false).</li>\\n    <li><b>include_totals:</b> Return results inside an object that contains the total result count (true) or as a direct array of results (false, default). <b>Deprecated:</b> this field is deprecated and should be removed from use. See <a href=\"https://auth0.com/docs/product-lifecycle/deprecations-and-migrations/migrate-to-tenant-log-search-v3#pagination\">Search Engine V3 Breaking Changes</a></li>\\n</ul>\\n\\nFor more information on the list of fields that can be used in <code>fields<\/code> and <code>sort<\/code>, see <a href=\"https://auth0.com/docs/logs/log-search-query-syntax#searchable-fields\">Searchable Fields</a>.\\n\\nAuth0 <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#limitations\">limits the number of logs</a> you can return by search criteria to 100 logs per request. Furthermore, you may paginate only through 1,000 search results. If you exceed this threshold, please redefine your search or use the <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#retrieve-logs-by-checkpoint\">get logs by checkpoint method</a>.\\n\\n<h5>To search from a checkpoint log ID, use the following parameters:</h5>\\n<ul>\\n    <li><b>from:</b> Log Event ID from which to start retrieving logs. You can limit the number of logs returned using the <code>take<\/code> parameter. If you use <code>from<\/code> at the same time as <code>q<\/code>, <code>from<\/code> takes precedence and <code>q<\/code> is ignored.</li>\\n    <li><b>take:</b> Number of entries to retrieve when using the <code>from<\/code> parameter.</li>\\n</ul>\\n\\n<strong>Important:</strong> When fetching logs from a checkpoint log ID, any parameter other than <code>from<\/code> and <code>take<\/code> will be ignored, and date ordering is not guaranteed.\\n",
            "tags": [
               "logs"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": " Number of results per page. Paging is disabled if parameter not sent. Default: <code>50<\/code>. Max value: <code>100<\/code>",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 0
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "Field to use for sorting appended with <code>:1<\/code>  for ascending and <code>:-1<\/code> for descending. e.g. <code>date:-1<\/code>",
                  "schema": {
                     "type": "string",
                     "pattern": "^(([a-zA-Z0-9_\\\\.]+))\\:(1|-1)$"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for <code>include_fields<\/code>) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (<code>true<\/code>) or excluded (<code>false<\/code>)",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results as an array when false (default). Return results inside an object that also contains a total result count when true.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "Log Event Id from which to start selection from.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "take",
                  "in": "query",
                  "description": "Number of entries to retrieve when using the <code>from<\/code> parameter. Default <code>50<\/code>, max <code>100<\/code>",
                  "schema": {
                     "type": "integer"
                  }
               },
               {
                  "name": "q",
                  "in": "query",
                  "description": "Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>.",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Logs successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/log"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "length": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "logs": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/log"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_logs",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:logs",
                     "read:logs_users"
                  ]
               }
            ]
         }
      },
      "/logs/{id}": {
         "get": {
            "summary": "Get a log event by id",
            "description": "Retrieve an individual log event.",
            "tags": [
               "logs"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "log_id of the log to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Log successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/log"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
               },
               "404": {
                  "description": "Log not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_logs_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:logs",
                     "read:logs_users"
                  ]
               }
            ]
         }
      },
      "/organizations": {
         "get": {
            "summary": "Get organizations",
            "description": "List available organizations. This endpoint supports two types of pagination:\\n- Offset pagination\\n- Checkpoint pagination\\n\\nCheckpoint pagination must be used if you need to retrieve more than 1000 organizations.\\n\\n<h2>Checkpoint Pagination</h2>\\n\\nTo search by checkpoint, use the following parameters:\\n- from: Optional id from which to start selection.\\n- take: The total amount of entries to retrieve when using the from parameter. Defaults to 50.\\n\\nNote: The first time you call this endpoint using Checkpoint Pagination, you should omit the <code>from<\/code> parameter. If there are more results, a <code>next<\/code> value will be included in the response. You can use this for subsequent API calls. When <code>next<\/code> is no longer included in the response, this indicates there are no more pages remaining.\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "maximum": 1000,
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "Optional Id from which to start selection.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "take",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Organizations successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "Organization identifier"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "The name of this organization.",
                                          "default": "organization-1",
                                          "minLength": 3,
                                          "maxLength": 50
                                       },
                                       "display_name": {
                                          "type": "string",
                                          "description": "Friendly name of this organization.",
                                          "default": "Acme Users",
                                          "minLength": 3,
                                          "maxLength": 255
                                       },
                                       "branding": {
                                          "type": "object",
                                          "description": "Theme defines how to style the login pages",
                                          "properties": {
                                             "logo_url": {
                                                "type": "string",
                                                "description": "URL of logo to display on login page"
                                             },
                                             "colors": {
                                                "type": "object",
                                                "description": "Color scheme used to customize the login pages",
                                                "required": [
                                                   "primary",
                                                   "page_background"
                                                ],
                                                "properties": {
                                                   "primary": {
                                                      "type": "string",
                                                      "description": "HEX Color for primary elements"
                                                   },
                                                   "page_background": {
                                                      "type": "string",
                                                      "description": "HEX Color for background"
                                                   }
                                                }
                                             }
                                          }
                                       },
                                       "metadata": {
                                          "type": "object",
                                          "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                          "additionalProperties": {}
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "organizations": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "Organization identifier"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of this organization.",
                                                "default": "organization-1",
                                                "minLength": 3,
                                                "maxLength": 50
                                             },
                                             "display_name": {
                                                "type": "string",
                                                "description": "Friendly name of this organization.",
                                                "default": "Acme Users",
                                                "minLength": 3,
                                                "maxLength": 255
                                             },
                                             "branding": {
                                                "type": "object",
                                                "description": "Theme defines how to style the login pages",
                                                "properties": {
                                                   "logo_url": {
                                                      "type": "string",
                                                      "description": "URL of logo to display on login page"
                                                   },
                                                   "colors": {
                                                      "type": "object",
                                                      "description": "Color scheme used to customize the login pages",
                                                      "required": [
                                                         "primary",
                                                         "page_background"
                                                      ],
                                                      "properties": {
                                                         "primary": {
                                                            "type": "string",
                                                            "description": "HEX Color for primary elements"
                                                         },
                                                         "page_background": {
                                                            "type": "string",
                                                            "description": "HEX Color for background"
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "metadata": {
                                                "type": "object",
                                                "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                                "additionalProperties": {}
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "next": {
                                       "type": "string"
                                    },
                                    "organizations": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "Organization identifier"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of this organization.",
                                                "default": "organization-1",
                                                "minLength": 3,
                                                "maxLength": 50
                                             },
                                             "display_name": {
                                                "type": "string",
                                                "description": "Friendly name of this organization.",
                                                "default": "Acme Users",
                                                "minLength": 3,
                                                "maxLength": 255
                                             },
                                             "branding": {
                                                "type": "object",
                                                "description": "Theme defines how to style the login pages",
                                                "properties": {
                                                   "logo_url": {
                                                      "type": "string",
                                                      "description": "URL of logo to display on login page"
                                                   },
                                                   "colors": {
                                                      "type": "object",
                                                      "description": "Color scheme used to customize the login pages",
                                                      "required": [
                                                         "primary",
                                                         "page_background"
                                                      ],
                                                      "properties": {
                                                         "primary": {
                                                            "type": "string",
                                                            "description": "HEX Color for primary elements"
                                                         },
                                                         "page_background": {
                                                            "type": "string",
                                                            "description": "HEX Color for background"
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "metadata": {
                                                "type": "object",
                                                "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                                "additionalProperties": {}
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid query string paging options. The message will vary depending on the cause"
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organizations."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_organizations",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organizations",
                     "read:organizations_summary"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create an Organization",
            "description": "Create an organization\\n",
            "tags": [
               "organizations"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of this organization.",
                              "default": "organization-1",
                              "minLength": 3,
                              "maxLength": 50
                           },
                           "display_name": {
                              "type": "string",
                              "description": "Friendly name of this organization.",
                              "default": "Acme Users",
                              "minLength": 3,
                              "maxLength": 255
                           },
                           "branding": {
                              "type": "object",
                              "description": "Theme defines how to style the login pages",
                              "properties": {
                                 "logo_url": {
                                    "type": "string",
                                    "description": "URL of logo to display on login page"
                                 },
                                 "colors": {
                                    "type": "object",
                                    "description": "Color scheme used to customize the login pages",
                                    "required": [
                                       "primary",
                                       "page_background"
                                    ],
                                    "properties": {
                                       "primary": {
                                          "type": "string",
                                          "description": "HEX Color for primary elements"
                                       },
                                       "page_background": {
                                          "type": "string",
                                          "description": "HEX Color for background"
                                       }
                                    }
                                 }
                              }
                           },
                           "metadata": {
                              "type": "object",
                              "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                              "additionalProperties": {}
                           },
                           "enabled_connections": {
                              "type": "array",
                              "description": "Connections that will be enabled for this organization. See POST enabled_connections endpoint for the object format. (Max of 10 connections allowed)",
                              "items": {
                                 "type": "object",
                                 "description": "Connection to be added to the organization.",
                                 "required": [
                                    "connection_id"
                                 ],
                                 "properties": {
                                    "connection_id": {
                                       "type": "string",
                                       "description": "ID of the connection."
                                    },
                                    "assign_membership_on_login": {
                                       "type": "boolean",
                                       "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "name"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of this organization.",
                              "default": "organization-1",
                              "minLength": 3,
                              "maxLength": 50
                           },
                           "display_name": {
                              "type": "string",
                              "description": "Friendly name of this organization.",
                              "default": "Acme Users",
                              "minLength": 3,
                              "maxLength": 255
                           },
                           "branding": {
                              "type": "object",
                              "description": "Theme defines how to style the login pages",
                              "properties": {
                                 "logo_url": {
                                    "type": "string",
                                    "description": "URL of logo to display on login page"
                                 },
                                 "colors": {
                                    "type": "object",
                                    "description": "Color scheme used to customize the login pages",
                                    "required": [
                                       "primary",
                                       "page_background"
                                    ],
                                    "properties": {
                                       "primary": {
                                          "type": "string",
                                          "description": "HEX Color for primary elements"
                                       },
                                       "page_background": {
                                          "type": "string",
                                          "description": "HEX Color for background"
                                       }
                                    }
                                 }
                              }
                           },
                           "metadata": {
                              "type": "object",
                              "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                              "additionalProperties": {}
                           },
                           "enabled_connections": {
                              "type": "array",
                              "description": "Connections that will be enabled for this organization. See POST enabled_connections endpoint for the object format. (Max of 10 connections allowed)",
                              "items": {
                                 "type": "object",
                                 "description": "Connection to be added to the organization.",
                                 "required": [
                                    "connection_id"
                                 ],
                                 "properties": {
                                    "connection_id": {
                                       "type": "string",
                                       "description": "ID of the connection."
                                    },
                                    "assign_membership_on_login": {
                                       "type": "boolean",
                                       "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Organization successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of this organization.",
                                 "default": "organization-1",
                                 "minLength": 3,
                                 "maxLength": 50
                              },
                              "display_name": {
                                 "type": "string",
                                 "description": "Friendly name of this organization.",
                                 "default": "Acme Users",
                                 "minLength": 3,
                                 "maxLength": 255
                              },
                              "branding": {
                                 "type": "object",
                                 "description": "Theme defines how to style the login pages",
                                 "properties": {
                                    "logo_url": {
                                       "type": "string",
                                       "description": "URL of logo to display on login page"
                                    },
                                    "colors": {
                                       "type": "object",
                                       "description": "Color scheme used to customize the login pages",
                                       "required": [
                                          "primary",
                                          "page_background"
                                       ],
                                       "properties": {
                                          "primary": {
                                             "type": "string",
                                             "description": "HEX Color for primary elements"
                                          },
                                          "page_background": {
                                             "type": "string",
                                             "description": "HEX Color for background"
                                          }
                                       }
                                    }
                                 }
                              },
                              "metadata": {
                                 "type": "object",
                                 "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                 "additionalProperties": {}
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:organizations."
               },
               "409": {
                  "description": "An organization with this name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_organizations",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:organizations",
                     "create:organization_connections"
                  ]
               }
            ]
         }
      },
      "/organizations/name/{name}": {
         "get": {
            "summary": "Get organization by name",
            "description": "Get a specific organization by name\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "name",
                  "in": "path",
                  "description": "name of the organization to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Organization successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of this organization.",
                                 "default": "organization-1",
                                 "minLength": 3,
                                 "maxLength": 50
                              },
                              "display_name": {
                                 "type": "string",
                                 "description": "Friendly name of this organization.",
                                 "default": "Acme Users",
                                 "minLength": 3,
                                 "maxLength": 255
                              },
                              "branding": {
                                 "type": "object",
                                 "description": "Theme defines how to style the login pages",
                                 "properties": {
                                    "logo_url": {
                                       "type": "string",
                                       "description": "URL of logo to display on login page"
                                    },
                                    "colors": {
                                       "type": "object",
                                       "description": "Color scheme used to customize the login pages",
                                       "required": [
                                          "primary",
                                          "page_background"
                                       ],
                                       "properties": {
                                          "primary": {
                                             "type": "string",
                                             "description": "HEX Color for primary elements"
                                          },
                                          "page_background": {
                                             "type": "string",
                                             "description": "HEX Color for background"
                                          }
                                       }
                                    }
                                 }
                              },
                              "metadata": {
                                 "type": "object",
                                 "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                 "additionalProperties": {}
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organizations."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_name_by_name",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organizations"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}": {
         "get": {
            "summary": "Get organization",
            "description": "Get a specific organization\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the organization to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Organization successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of this organization.",
                                 "default": "organization-1",
                                 "minLength": 3,
                                 "maxLength": 50
                              },
                              "display_name": {
                                 "type": "string",
                                 "description": "Friendly name of this organization.",
                                 "default": "Acme Users",
                                 "minLength": 3,
                                 "maxLength": 255
                              },
                              "branding": {
                                 "type": "object",
                                 "description": "Theme defines how to style the login pages",
                                 "properties": {
                                    "logo_url": {
                                       "type": "string",
                                       "description": "URL of logo to display on login page"
                                    },
                                    "colors": {
                                       "type": "object",
                                       "description": "Color scheme used to customize the login pages",
                                       "required": [
                                          "primary",
                                          "page_background"
                                       ],
                                       "properties": {
                                          "primary": {
                                             "type": "string",
                                             "description": "HEX Color for primary elements"
                                          },
                                          "page_background": {
                                             "type": "string",
                                             "description": "HEX Color for background"
                                          }
                                       }
                                    }
                                 }
                              },
                              "metadata": {
                                 "type": "object",
                                 "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                 "additionalProperties": {}
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organizations."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_organizations_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organizations",
                     "read:organizations_summary"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete organization",
            "description": "Delete a specific organization\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "The organization was deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:organizations."
               },
               "404": {
                  "description": "The organization does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_organizations_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:organizations"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Modify an Organization",
            "description": "Modify an organization\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the organization to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "display_name": {
                              "type": "string",
                              "description": "Friendly name of this organization.",
                              "default": "Acme Users",
                              "minLength": 3,
                              "maxLength": 255
                           },
                           "name": {
                              "type": "string",
                              "description": "The name of this organization.",
                              "default": "organization-1",
                              "minLength": 3,
                              "maxLength": 50
                           },
                           "branding": {
                              "type": "object",
                              "nullable": true,
                              "description": "Theme defines how to style the login pages",
                              "properties": {
                                 "logo_url": {
                                    "type": "string",
                                    "description": "URL of logo to display on login page"
                                 },
                                 "colors": {
                                    "type": "object",
                                    "description": "Color scheme used to customize the login pages",
                                    "required": [
                                       "primary",
                                       "page_background"
                                    ],
                                    "properties": {
                                       "primary": {
                                          "type": "string",
                                          "description": "HEX Color for primary elements"
                                       },
                                       "page_background": {
                                          "type": "string",
                                          "description": "HEX Color for background"
                                       }
                                    }
                                 }
                              }
                           },
                           "metadata": {
                              "type": "object",
                              "nullable": true,
                              "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                              "additionalProperties": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "display_name": {
                              "type": "string",
                              "description": "Friendly name of this organization.",
                              "default": "Acme Users",
                              "minLength": 3,
                              "maxLength": 255
                           },
                           "name": {
                              "type": "string",
                              "description": "The name of this organization.",
                              "default": "organization-1",
                              "minLength": 3,
                              "maxLength": 50
                           },
                           "branding": {
                              "type": "object",
                              "nullable": true,
                              "description": "Theme defines how to style the login pages",
                              "properties": {
                                 "logo_url": {
                                    "type": "string",
                                    "description": "URL of logo to display on login page"
                                 },
                                 "colors": {
                                    "type": "object",
                                    "description": "Color scheme used to customize the login pages",
                                    "required": [
                                       "primary",
                                       "page_background"
                                    ],
                                    "properties": {
                                       "primary": {
                                          "type": "string",
                                          "description": "HEX Color for primary elements"
                                       },
                                       "page_background": {
                                          "type": "string",
                                          "description": "HEX Color for background"
                                       }
                                    }
                                 }
                              }
                           },
                           "metadata": {
                              "type": "object",
                              "nullable": true,
                              "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                              "additionalProperties": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Organization successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "name": {
                                 "type": "string",
                                 "description": "The name of this organization.",
                                 "default": "organization-1",
                                 "minLength": 3,
                                 "maxLength": 50
                              },
                              "display_name": {
                                 "type": "string",
                                 "description": "Friendly name of this organization.",
                                 "default": "Acme Users",
                                 "minLength": 3,
                                 "maxLength": 255
                              },
                              "branding": {
                                 "type": "object",
                                 "description": "Theme defines how to style the login pages",
                                 "properties": {
                                    "logo_url": {
                                       "type": "string",
                                       "description": "URL of logo to display on login page"
                                    },
                                    "colors": {
                                       "type": "object",
                                       "description": "Color scheme used to customize the login pages",
                                       "required": [
                                          "primary",
                                          "page_background"
                                       ],
                                       "properties": {
                                          "primary": {
                                             "type": "string",
                                             "description": "HEX Color for primary elements"
                                          },
                                          "page_background": {
                                             "type": "string",
                                             "description": "HEX Color for background"
                                          }
                                       }
                                    }
                                 }
                              },
                              "metadata": {
                                 "type": "object",
                                 "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                 "additionalProperties": {}
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:organizations."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_organizations_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:organizations"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/enabled_connections": {
         "get": {
            "summary": "Get connections enabled for an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Connections successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "connection_id": {
                                          "type": "string",
                                          "description": "ID of the connection."
                                       },
                                       "assign_membership_on_login": {
                                          "type": "boolean",
                                          "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                                       },
                                       "connection": {
                                          "type": "object",
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "The name of the enabled connection."
                                             },
                                             "strategy": {
                                                "type": "string",
                                                "description": "The strategy of the enabled connection."
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "enabled_connections": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "connection_id": {
                                                "type": "string",
                                                "description": "ID of the connection."
                                             },
                                             "assign_membership_on_login": {
                                                "type": "boolean",
                                                "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                                             },
                                             "connection": {
                                                "type": "object",
                                                "properties": {
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The name of the enabled connection."
                                                   },
                                                   "strategy": {
                                                      "type": "string",
                                                      "description": "The strategy of the enabled connection."
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_connections."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_enabled_connections",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_connections"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Add connections to an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "connection_id"
                        ],
                        "properties": {
                           "connection_id": {
                              "type": "string",
                              "description": "Single connection ID to add to the organization."
                           },
                           "assign_membership_on_login": {
                              "type": "boolean",
                              "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "connection_id"
                        ],
                        "properties": {
                           "connection_id": {
                              "type": "string",
                              "description": "Single connection ID to add to the organization."
                           },
                           "assign_membership_on_login": {
                              "type": "boolean",
                              "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Organization connection successfully added.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "connection_id": {
                                 "type": "string",
                                 "description": "ID of the connection."
                              },
                              "assign_membership_on_login": {
                                 "type": "boolean",
                                 "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                              },
                              "connection": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the enabled connection."
                                    },
                                    "strategy": {
                                       "type": "string",
                                       "description": "The strategy of the enabled connection."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:organization_connections."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_enabled_connections",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:organization_connections"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/enabled_connections/{connectionId}": {
         "get": {
            "summary": "Get an enabled connection for an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "connectionId",
                  "in": "path",
                  "description": "Connection identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Connection successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "connection_id": {
                                 "type": "string",
                                 "description": "ID of the connection."
                              },
                              "assign_membership_on_login": {
                                 "type": "boolean",
                                 "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                              },
                              "connection": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the enabled connection."
                                    },
                                    "strategy": {
                                       "type": "string",
                                       "description": "The strategy of the enabled connection."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_connections."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_enabled_connections_by_connectionId",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_connections"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete connections from an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "connectionId",
                  "in": "path",
                  "description": "Connection identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Connection successfully removed from organization."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:organization_connections."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_enabled_connections_by_connectionId",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:organization_connections"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Modify an Organizations Connection",
            "description": "Modify an enabled_connection belonging to an Organization.\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "connectionId",
                  "in": "path",
                  "description": "Connection identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "assign_membership_on_login"
                        ],
                        "properties": {
                           "assign_membership_on_login": {
                              "type": "boolean",
                              "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "assign_membership_on_login"
                        ],
                        "properties": {
                           "assign_membership_on_login": {
                              "type": "boolean",
                              "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Organization connection successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "connection_id": {
                                 "type": "string",
                                 "description": "ID of the connection."
                              },
                              "assign_membership_on_login": {
                                 "type": "boolean",
                                 "description": "When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection."
                              },
                              "connection": {
                                 "type": "object",
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The name of the enabled connection."
                                    },
                                    "strategy": {
                                       "type": "string",
                                       "description": "The strategy of the enabled connection."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:organization_connections."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_enabled_connections_by_connectionId",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:organization_connections"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/invitations": {
         "get": {
            "summary": "Get invitations to organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "When true, return results inside an object that also contains the start and limit.  When false (default), a direct array of results is returned.  We do not yet support returning the total invitations count.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((app_metadata)|(user_metadata)|(client_id)|(connection_id)|(created_at)|(expires_at)|(id)|(invitation_url)|(invitee)|(inviter)|(organization_id)|(roles))(,((app_metadata)|(user_metadata)|(client_id)|(connection_id)|(created_at)|(expires_at)|(id)|(invitation_url)|(invitee)|(inviter)|(organization_id)|(roles)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "Field to sort by. Use field:order where order is 1 for ascending and -1 for descending Defaults to created_at:-1.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((created_at))\\:(1|-1)$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Invitations successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "The id of the user invitation.",
                                          "default": "uinv_0000000000000001"
                                       },
                                       "organization_id": {
                                          "type": "string",
                                          "description": "Organization identifier"
                                       },
                                       "inviter": {
                                          "type": "object",
                                          "required": [
                                             "name"
                                          ],
                                          "properties": {
                                             "name": {
                                                "type": "string",
                                                "description": "The inviter's name.",
                                                "default": "Jane Doe",
                                                "minLength": 1,
                                                "maxLength": 300
                                             }
                                          }
                                       },
                                       "invitee": {
                                          "type": "object",
                                          "required": [
                                             "email"
                                          ],
                                          "properties": {
                                             "email": {
                                                "type": "string",
                                                "description": "The invitee's email.",
                                                "default": "john.doe@gmail.com"
                                             }
                                          }
                                       },
                                       "invitation_url": {
                                          "type": "string",
                                          "description": "The invitation url to be send to the invitee.",
                                          "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme"
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
                                          "default": "2020-08-20T19:10:06.299Z"
                                       },
                                       "expires_at": {
                                          "type": "string",
                                          "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                                          "default": "2020-08-27T19:10:06.299Z"
                                       },
                                       "client_id": {
                                          "type": "string",
                                          "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                                          "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                                       },
                                       "connection_id": {
                                          "type": "string",
                                          "description": "The id of the connection to force invitee to authenticate with.",
                                          "default": "con_0000000000000001"
                                       },
                                       "app_metadata": {
                                          "type": "object",
                                          "description": "Data related to the user that does affect the application's core functionality.",
                                          "properties": {
                                             "clientID": {},
                                             "globalClientID": {},
                                             "global_client_id": {},
                                             "email_verified": {},
                                             "user_id": {},
                                             "identities": {},
                                             "lastIP": {},
                                             "lastLogin": {},
                                             "metadata": {},
                                             "created_at": {},
                                             "loginsCount": {},
                                             "_id": {},
                                             "email": {},
                                             "blocked": {},
                                             "__tenant": {},
                                             "updated_at": {}
                                          }
                                       },
                                       "user_metadata": {
                                          "type": "object",
                                          "description": "Data related to the user that does not affect the application's core functionality.",
                                          "additionalProperties": {}
                                       },
                                       "roles": {
                                          "type": "array",
                                          "description": "List of roles IDs to associated with the user.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "ticket_id": {
                                          "type": "string",
                                          "description": "The id of the invitation ticket"
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "invitations": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "The id of the user invitation.",
                                                "default": "uinv_0000000000000001"
                                             },
                                             "organization_id": {
                                                "type": "string",
                                                "description": "Organization identifier"
                                             },
                                             "inviter": {
                                                "type": "object",
                                                "required": [
                                                   "name"
                                                ],
                                                "properties": {
                                                   "name": {
                                                      "type": "string",
                                                      "description": "The inviter's name.",
                                                      "default": "Jane Doe",
                                                      "minLength": 1,
                                                      "maxLength": 300
                                                   }
                                                }
                                             },
                                             "invitee": {
                                                "type": "object",
                                                "required": [
                                                   "email"
                                                ],
                                                "properties": {
                                                   "email": {
                                                      "type": "string",
                                                      "description": "The invitee's email.",
                                                      "default": "john.doe@gmail.com"
                                                   }
                                                }
                                             },
                                             "invitation_url": {
                                                "type": "string",
                                                "description": "The invitation url to be send to the invitee.",
                                                "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme"
                                             },
                                             "created_at": {
                                                "type": "string",
                                                "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
                                                "default": "2020-08-20T19:10:06.299Z"
                                             },
                                             "expires_at": {
                                                "type": "string",
                                                "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                                                "default": "2020-08-27T19:10:06.299Z"
                                             },
                                             "client_id": {
                                                "type": "string",
                                                "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                                                "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                                             },
                                             "connection_id": {
                                                "type": "string",
                                                "description": "The id of the connection to force invitee to authenticate with.",
                                                "default": "con_0000000000000001"
                                             },
                                             "app_metadata": {
                                                "type": "object",
                                                "description": "Data related to the user that does affect the application's core functionality.",
                                                "properties": {
                                                   "clientID": {},
                                                   "globalClientID": {},
                                                   "global_client_id": {},
                                                   "email_verified": {},
                                                   "user_id": {},
                                                   "identities": {},
                                                   "lastIP": {},
                                                   "lastLogin": {},
                                                   "metadata": {},
                                                   "created_at": {},
                                                   "loginsCount": {},
                                                   "_id": {},
                                                   "email": {},
                                                   "blocked": {},
                                                   "__tenant": {},
                                                   "updated_at": {}
                                                }
                                             },
                                             "user_metadata": {
                                                "type": "object",
                                                "description": "Data related to the user that does not affect the application's core functionality.",
                                                "additionalProperties": {}
                                             },
                                             "roles": {
                                                "type": "array",
                                                "description": "List of roles IDs to associated with the user.",
                                                "items": {
                                                   "type": "string"
                                                }
                                             },
                                             "ticket_id": {
                                                "type": "string",
                                                "description": "The id of the invitation ticket"
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Requesting page exceeds the allowed maximum of 1000 records"
               },
               "401": {
                  "description": "Invalid token."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_invitations."
               },
               "404": {
                  "description": "No organization found by that id."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_invitations",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_invitations"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create invitations to organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "inviter",
                           "invitee",
                           "client_id"
                        ],
                        "properties": {
                           "inviter": {
                              "type": "object",
                              "required": [
                                 "name"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "The inviter's name.",
                                    "default": "Jane Doe",
                                    "minLength": 1,
                                    "maxLength": 300
                                 }
                              }
                           },
                           "invitee": {
                              "type": "object",
                              "required": [
                                 "email"
                              ],
                              "properties": {
                                 "email": {
                                    "type": "string",
                                    "description": "The invitee's email.",
                                    "default": "john.doe@gmail.com"
                                 }
                              }
                           },
                           "client_id": {
                              "type": "string",
                              "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                              "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "The id of the connection to force invitee to authenticate with.",
                              "default": "con_0000000000000001"
                           },
                           "app_metadata": {
                              "type": "object",
                              "description": "Data related to the user that does affect the application's core functionality.",
                              "properties": {
                                 "clientID": {},
                                 "globalClientID": {},
                                 "global_client_id": {},
                                 "email_verified": {},
                                 "user_id": {},
                                 "identities": {},
                                 "lastIP": {},
                                 "lastLogin": {},
                                 "metadata": {},
                                 "created_at": {},
                                 "loginsCount": {},
                                 "_id": {},
                                 "email": {},
                                 "blocked": {},
                                 "__tenant": {},
                                 "updated_at": {}
                              }
                           },
                           "user_metadata": {
                              "type": "object",
                              "description": "Data related to the user that does not affect the application's core functionality.",
                              "additionalProperties": {}
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the invitation is valid before expiration. If unspecified or set to 0, this value defaults to 604800 seconds (7 days). Max value: 2592000 seconds (30 days)."
                           },
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string"
                              }
                           },
                           "send_invitation_email": {
                              "type": "boolean",
                              "description": "Whether the user will receive an invitation email (true) or no email (false), true by default",
                              "default": true
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "inviter",
                           "invitee",
                           "client_id"
                        ],
                        "properties": {
                           "inviter": {
                              "type": "object",
                              "required": [
                                 "name"
                              ],
                              "properties": {
                                 "name": {
                                    "type": "string",
                                    "description": "The inviter's name.",
                                    "default": "Jane Doe",
                                    "minLength": 1,
                                    "maxLength": 300
                                 }
                              }
                           },
                           "invitee": {
                              "type": "object",
                              "required": [
                                 "email"
                              ],
                              "properties": {
                                 "email": {
                                    "type": "string",
                                    "description": "The invitee's email.",
                                    "default": "john.doe@gmail.com"
                                 }
                              }
                           },
                           "client_id": {
                              "type": "string",
                              "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                              "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "The id of the connection to force invitee to authenticate with.",
                              "default": "con_0000000000000001"
                           },
                           "app_metadata": {
                              "type": "object",
                              "description": "Data related to the user that does affect the application's core functionality.",
                              "properties": {
                                 "clientID": {},
                                 "globalClientID": {},
                                 "global_client_id": {},
                                 "email_verified": {},
                                 "user_id": {},
                                 "identities": {},
                                 "lastIP": {},
                                 "lastLogin": {},
                                 "metadata": {},
                                 "created_at": {},
                                 "loginsCount": {},
                                 "_id": {},
                                 "email": {},
                                 "blocked": {},
                                 "__tenant": {},
                                 "updated_at": {}
                              }
                           },
                           "user_metadata": {
                              "type": "object",
                              "description": "Data related to the user that does not affect the application's core functionality.",
                              "additionalProperties": {}
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the invitation is valid before expiration. If unspecified or set to 0, this value defaults to 604800 seconds (7 days). Max value: 2592000 seconds (30 days)."
                           },
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string"
                              }
                           },
                           "send_invitation_email": {
                              "type": "boolean",
                              "description": "Whether the user will receive an invitation email (true) or no email (false), true by default",
                              "default": true
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Invitation successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The id of the user invitation.",
                                 "default": "uinv_0000000000000001"
                              },
                              "organization_id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "inviter": {
                                 "type": "object",
                                 "required": [
                                    "name"
                                 ],
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The inviter's name.",
                                       "default": "Jane Doe",
                                       "minLength": 1,
                                       "maxLength": 300
                                    }
                                 }
                              },
                              "invitee": {
                                 "type": "object",
                                 "required": [
                                    "email"
                                 ],
                                 "properties": {
                                    "email": {
                                       "type": "string",
                                       "description": "The invitee's email.",
                                       "default": "john.doe@gmail.com"
                                    }
                                 }
                              },
                              "invitation_url": {
                                 "type": "string",
                                 "description": "The invitation url to be send to the invitee.",
                                 "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
                                 "default": "2020-08-20T19:10:06.299Z"
                              },
                              "expires_at": {
                                 "type": "string",
                                 "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                                 "default": "2020-08-27T19:10:06.299Z"
                              },
                              "client_id": {
                                 "type": "string",
                                 "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                                 "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                              },
                              "connection_id": {
                                 "type": "string",
                                 "description": "The id of the connection to force invitee to authenticate with.",
                                 "default": "con_0000000000000001"
                              },
                              "app_metadata": {
                                 "type": "object",
                                 "description": "Data related to the user that does affect the application's core functionality.",
                                 "properties": {
                                    "clientID": {},
                                    "globalClientID": {},
                                    "global_client_id": {},
                                    "email_verified": {},
                                    "user_id": {},
                                    "identities": {},
                                    "lastIP": {},
                                    "lastLogin": {},
                                    "metadata": {},
                                    "created_at": {},
                                    "loginsCount": {},
                                    "_id": {},
                                    "email": {},
                                    "blocked": {},
                                    "__tenant": {},
                                    "updated_at": {}
                                 }
                              },
                              "user_metadata": {
                                 "type": "object",
                                 "description": "Data related to the user that does not affect the application's core functionality.",
                                 "additionalProperties": {}
                              },
                              "roles": {
                                 "type": "array",
                                 "description": "List of roles IDs to associated with the user.",
                                 "items": {
                                    "type": "string"
                                 }
                              },
                              "ticket_id": {
                                 "type": "string",
                                 "description": "The id of the invitation ticket"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The specified connection does not exist."
               },
               "401": {
                  "description": "Invalid token."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:organization_invitations."
               },
               "404": {
                  "description": "No organization found by that id."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_invitations",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:organization_invitations"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/invitations/{invitation_id}": {
         "get": {
            "summary": "Get an invitation to organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invitation_id",
                  "in": "path",
                  "description": "The id of the user invitation.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((app_metadata)|(user_metadata)|(client_id)|(connection_id)|(created_at)|(expires_at)|(id)|(invitation_url)|(invitee)|(inviter)|(organization_id)|(roles))(,((app_metadata)|(user_metadata)|(client_id)|(connection_id)|(created_at)|(expires_at)|(id)|(invitation_url)|(invitee)|(inviter)|(organization_id)|(roles)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Invitation successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "The id of the user invitation.",
                                 "default": "uinv_0000000000000001"
                              },
                              "organization_id": {
                                 "type": "string",
                                 "description": "Organization identifier"
                              },
                              "inviter": {
                                 "type": "object",
                                 "required": [
                                    "name"
                                 ],
                                 "properties": {
                                    "name": {
                                       "type": "string",
                                       "description": "The inviter's name.",
                                       "default": "Jane Doe",
                                       "minLength": 1,
                                       "maxLength": 300
                                    }
                                 }
                              },
                              "invitee": {
                                 "type": "object",
                                 "required": [
                                    "email"
                                 ],
                                 "properties": {
                                    "email": {
                                       "type": "string",
                                       "description": "The invitee's email.",
                                       "default": "john.doe@gmail.com"
                                    }
                                 }
                              },
                              "invitation_url": {
                                 "type": "string",
                                 "description": "The invitation url to be send to the invitee.",
                                 "default": "https://mycompany.org/login?invitation=f81dWWYW6gzGGicxT8Ha0txBkGNcAcYr&organization=org_0000000000000001&organization_name=acme"
                              },
                              "created_at": {
                                 "type": "string",
                                 "description": "The ISO 8601 formatted timestamp representing the creation time of the invitation.",
                                 "default": "2020-08-20T19:10:06.299Z"
                              },
                              "expires_at": {
                                 "type": "string",
                                 "description": "The ISO 8601 formatted timestamp representing the expiration time of the invitation.",
                                 "default": "2020-08-27T19:10:06.299Z"
                              },
                              "client_id": {
                                 "type": "string",
                                 "description": "Auth0 client ID. Used to resolve the application's login initiation endpoint.",
                                 "default": "AaiyAPdpYdesoKnqjj8HJqRn4T5titww"
                              },
                              "connection_id": {
                                 "type": "string",
                                 "description": "The id of the connection to force invitee to authenticate with.",
                                 "default": "con_0000000000000001"
                              },
                              "app_metadata": {
                                 "type": "object",
                                 "description": "Data related to the user that does affect the application's core functionality.",
                                 "properties": {
                                    "clientID": {},
                                    "globalClientID": {},
                                    "global_client_id": {},
                                    "email_verified": {},
                                    "user_id": {},
                                    "identities": {},
                                    "lastIP": {},
                                    "lastLogin": {},
                                    "metadata": {},
                                    "created_at": {},
                                    "loginsCount": {},
                                    "_id": {},
                                    "email": {},
                                    "blocked": {},
                                    "__tenant": {},
                                    "updated_at": {}
                                 }
                              },
                              "user_metadata": {
                                 "type": "object",
                                 "description": "Data related to the user that does not affect the application's core functionality.",
                                 "additionalProperties": {}
                              },
                              "roles": {
                                 "type": "array",
                                 "description": "List of roles IDs to associated with the user.",
                                 "items": {
                                    "type": "string"
                                 }
                              },
                              "ticket_id": {
                                 "type": "string",
                                 "description": "The id of the invitation ticket"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid token."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_invitations."
               },
               "404": {
                  "description": "The invitation does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_invitations_by_invitation_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_invitations"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete an invitation to organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "invitation_id",
                  "in": "path",
                  "description": "The id of the user invitation.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Invitation successfully deleted."
               },
               "401": {
                  "description": "Invalid token."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:organization_invitations."
               },
               "404": {
                  "description": "No organization found by that id."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_invitations_by_invitation_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:organization_invitations"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/members": {
         "get": {
            "summary": "Get members who belong to an organization",
            "description": "List organization members. This endpoint supports two types of pagination:\\n- Offset pagination\\n- Checkpoint pagination\\n\\nCheckpoint pagination must be used if you need to retrieve more than 1000 organization members.\\n\\n<h2>Checkpoint Pagination</h2>\\n\\nTo search by checkpoint, use the following parameters:\\n- from: Optional id from which to start selection.\\n- take: The total amount of entries to retrieve when using the from parameter. Defaults to 50.\\n\\nNote: The first time you call this endpoint using Checkpoint Pagination, you should omit the <code>from<\/code> parameter. If there are more results, a <code>next<\/code> value will be included in the response. You can use this for subsequent API calls. When <code>next<\/code> is no longer included in the response, this indicates there are no more pages remaining.\\n",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "maximum": 1000,
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "Optional Id from which to start selection.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "take",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Members successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "user_id": {
                                          "type": "string",
                                          "description": "ID of this user."
                                       },
                                       "picture": {
                                          "type": "string",
                                          "description": "URL to a picture for this user."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of this user."
                                       },
                                       "email": {
                                          "type": "string",
                                          "description": "Email address of this user.",
                                          "default": "john.doe@gmail.com"
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "members": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "user_id": {
                                                "type": "string",
                                                "description": "ID of this user."
                                             },
                                             "picture": {
                                                "type": "string",
                                                "description": "URL to a picture for this user."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of this user."
                                             },
                                             "email": {
                                                "type": "string",
                                                "description": "Email address of this user.",
                                                "default": "john.doe@gmail.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "next": {
                                       "type": "string"
                                    },
                                    "members": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "user_id": {
                                                "type": "string",
                                                "description": "ID of this user."
                                             },
                                             "picture": {
                                                "type": "string",
                                                "description": "URL to a picture for this user."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of this user."
                                             },
                                             "email": {
                                                "type": "string",
                                                "description": "Email address of this user.",
                                                "default": "john.doe@gmail.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid query string paging options. The message will vary depending on the cause"
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_members."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_members",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_members"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete members from an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "members"
                        ],
                        "properties": {
                           "members": {
                              "type": "array",
                              "description": "List of user IDs to remove from the organization.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "members"
                        ],
                        "properties": {
                           "members": {
                              "type": "array",
                              "description": "List of user IDs to remove from the organization.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Users successfully removed from organization."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:organization_members."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_members",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:organization_members"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Add members to an organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "members"
                        ],
                        "properties": {
                           "members": {
                              "type": "array",
                              "description": "List of user IDs to add to the organization as members.",
                              "items": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "members"
                        ],
                        "properties": {
                           "members": {
                              "type": "array",
                              "description": "List of user IDs to add to the organization as members.",
                              "items": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Members successfully added to organization."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:organization_members."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_members",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:organization_members"
                  ]
               }
            ]
         }
      },
      "/organizations/{id}/members/{user_id}/roles": {
         "get": {
            "summary": "Get the roles assigned to an organization member",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "user_id",
                  "in": "path",
                  "description": "ID of the user to associate roles with.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "maximum": 1000,
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Roles successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "ID for this role."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of the role."
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Description of the role."
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "roles": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "ID for this role."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of the role."
                                             },
                                             "description": {
                                                "type": "string",
                                                "description": "Description of the role."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid query string paging options. The message will vary depending on the cause"
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:organization_member_roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_organization_member_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organization_member_roles"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Remove one or more roles from a given user in the context of the provided organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "user_id",
                  "in": "path",
                  "description": "User ID of the organization member to remove roles from.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs associated with the organization member to remove.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs associated with the organization member to remove.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Roles successfully removed from organization member."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:organization_member_roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_organization_member_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:organization_member_roles"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Assign one or more roles to a given user that will be applied in the context of the provided organization",
            "tags": [
               "organizations"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Organization identifier",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "user_id",
                  "in": "path",
                  "description": "ID of the user to associate roles with.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Roles successfully associated with user."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:organization_member_roles."
               },
               "409": {
                  "description": "No more roles can be assigned to this organization member."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_organization_member_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:organization_member_roles"
                  ]
               }
            ]
         }
      },
      "/prompts": {
         "get": {
            "summary": "Get prompts settings",
            "description": "Retrieve prompts settings.",
            "tags": [
               "prompts"
            ],
            "responses": {
               "200": {
                  "description": "Prompt settings successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/promptsSettings"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:prompts."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_prompts",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:prompts"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update prompts settings",
            "description": "Update prompts settings.",
            "tags": [
               "prompts"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/promptsSettingsUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/promptsSettingsUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Prompts settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/promptsSettings"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:prompts."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_prompts",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:prompts"
                  ]
               }
            ]
         }
      },
      "/prompts/{prompt}/custom-text/{language}": {
         "get": {
            "summary": "Get custom text for a prompt",
            "description": "Retrieve custom text for a specific prompt and language.",
            "tags": [
               "prompts"
            ],
            "parameters": [
               {
                  "name": "prompt",
                  "in": "path",
                  "description": "Name of the prompt.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "login",
                        "login-id",
                        "login-password",
                        "login-email-verification",
                        "signup",
                        "signup-id",
                        "signup-password",
                        "reset-password",
                        "consent",
                        "mfa-push",
                        "mfa-otp",
                        "mfa-voice",
                        "mfa-phone",
                        "mfa-webauthn",
                        "mfa-sms",
                        "mfa-email",
                        "mfa-recovery-code",
                        "mfa",
                        "status",
                        "device-flow",
                        "email-verification",
                        "email-otp-challenge",
                        "organizations",
                        "invitation",
                        "common"
                     ]
                  }
               },
               {
                  "name": "language",
                  "in": "path",
                  "description": "Language to update.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "ar",
                        "bg",
                        "bs",
                        "cs",
                        "da",
                        "de",
                        "el",
                        "en",
                        "es",
                        "et",
                        "fi",
                        "fr",
                        "fr-CA",
                        "fr-FR",
                        "he",
                        "hi",
                        "hr",
                        "hu",
                        "id",
                        "is",
                        "it",
                        "ja",
                        "ko",
                        "lt",
                        "lv",
                        "nb",
                        "nl",
                        "pl",
                        "pt",
                        "pt-BR",
                        "pt-PT",
                        "ro",
                        "ru",
                        "sk",
                        "sl",
                        "sr",
                        "sv",
                        "th",
                        "tr",
                        "uk",
                        "vi",
                        "zh-CN",
                        "zh-TW"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Prompt dictionaries successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "description": "An object containing custom dictionaries for a group of screens.",
                           "additionalProperties": {}
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:prompts."
               },
               "404": {
                  "description": "The prompt does not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_custom-text_by_language",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:prompts"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Set custom text for a specific prompt",
            "description": "Set custom text for a specific prompt. Existing texts will be overwritten.",
            "tags": [
               "prompts"
            ],
            "parameters": [
               {
                  "name": "prompt",
                  "in": "path",
                  "description": "Name of the prompt.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "login",
                        "login-id",
                        "login-password",
                        "login-email-verification",
                        "signup",
                        "signup-id",
                        "signup-password",
                        "reset-password",
                        "consent",
                        "mfa-push",
                        "mfa-otp",
                        "mfa-voice",
                        "mfa-phone",
                        "mfa-webauthn",
                        "mfa-sms",
                        "mfa-email",
                        "mfa-recovery-code",
                        "mfa",
                        "status",
                        "device-flow",
                        "email-verification",
                        "email-otp-challenge",
                        "organizations",
                        "invitation",
                        "common"
                     ]
                  }
               },
               {
                  "name": "language",
                  "in": "path",
                  "description": "Language to update.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "ar",
                        "bg",
                        "bs",
                        "cs",
                        "da",
                        "de",
                        "el",
                        "en",
                        "es",
                        "et",
                        "fi",
                        "fr",
                        "fr-CA",
                        "fr-FR",
                        "he",
                        "hi",
                        "hr",
                        "hu",
                        "id",
                        "is",
                        "it",
                        "ja",
                        "ko",
                        "lt",
                        "lv",
                        "nb",
                        "nl",
                        "pl",
                        "pt",
                        "pt-BR",
                        "pt-PT",
                        "ro",
                        "ru",
                        "sk",
                        "sl",
                        "sr",
                        "sv",
                        "th",
                        "tr",
                        "uk",
                        "vi",
                        "zh-CN",
                        "zh-TW"
                     ]
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "description": "An object containing custom dictionaries for a group of screens.",
                        "additionalProperties": {}
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "description": "An object containing custom dictionaries for a group of screens.",
                        "additionalProperties": {}
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Prompt dictionaries successfully updated."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:prompts."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "put_custom-text_by_language",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:prompts"
                  ]
               }
            ]
         }
      },
      "/resource-servers": {
         "get": {
            "summary": "Get resource servers",
            "description": "Retrieve <a href=\"https://auth0.com/docs/apis\">APIs</a> (also known as resource servers) that you can consume from your authorized applications. ",
            "tags": [
               "resource-servers"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource servers successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/resourceServer"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "resource_servers": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/resourceServer"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:resource_servers."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_resource-servers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:resource_servers"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a resource server",
            "description": "Create a new API (also known as a resource server).",
            "tags": [
               "resource-servers"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "identifier"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Friendly name for this resource server. Can not contain `<` or `>` characters.",
                              "maxLength": 200
                           },
                           "identifier": {
                              "type": "string",
                              "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.",
                              "minLength": 1,
                              "maxLength": 600
                           },
                           "scopes": {
                              "type": "array",
                              "description": "List of permissions (scopes) that this API uses.",
                              "items": {
                                 "$ref": "#/components/schemas/scope"
                              }
                           },
                           "signing_alg": {
                              "type": "string",
                              "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                              "enum": [
                                 "HS256",
                                 "RS256"
                              ]
                           },
                           "signing_secret": {
                              "type": "string",
                              "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
                              "minLength": 16
                           },
                           "allow_offline_access": {
                              "type": "boolean",
                              "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
                           },
                           "token_lifetime": {
                              "type": "integer",
                              "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
                           },
                           "token_dialect": {
                              "type": "string",
                              "description": "Dialect of issued access token. Can be `access_token` or `access_token_authz` (includes permissions). Values can be `access_token` or `access_token_authz` (includes permissions).",
                              "enum": [
                                 "access_token",
                                 "access_token_authz"
                              ]
                           },
                           "skip_consent_for_verifiable_first_party_clients": {
                              "type": "boolean",
                              "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
                           },
                           "enforce_policies": {
                              "type": "boolean",
                              "description": "Whether to enforce authorization policies (true) or to ignore them (false)."
                           },
                           "client": {
                              "type": "object",
                              "properties": {}
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "identifier"
                        ],
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "Friendly name for this resource server. Can not contain `<` or `>` characters.",
                              "maxLength": 200
                           },
                           "identifier": {
                              "type": "string",
                              "description": "Unique identifier for the API used as the audience parameter on authorization calls. Can not be changed once set.",
                              "minLength": 1,
                              "maxLength": 600
                           },
                           "scopes": {
                              "type": "array",
                              "description": "List of permissions (scopes) that this API uses.",
                              "items": {
                                 "$ref": "#/components/schemas/scope"
                              }
                           },
                           "signing_alg": {
                              "type": "string",
                              "description": "Algorithm used to sign JWTs. Can be `HS256` or `RS256`.",
                              "enum": [
                                 "HS256",
                                 "RS256"
                              ]
                           },
                           "signing_secret": {
                              "type": "string",
                              "description": "Secret used to sign tokens when using symmetric algorithms (HS256).",
                              "minLength": 16
                           },
                           "allow_offline_access": {
                              "type": "boolean",
                              "description": "Whether refresh tokens can be issued for this API (true) or not (false)."
                           },
                           "token_lifetime": {
                              "type": "integer",
                              "description": "Expiration value (in seconds) for access tokens issued for this API from the token endpoint."
                           },
                           "token_dialect": {
                              "type": "string",
                              "description": "Dialect of issued access token. Can be `access_token` or `access_token_authz` (includes permissions). Values can be `access_token` or `access_token_authz` (includes permissions).",
                              "enum": [
                                 "access_token",
                                 "access_token_authz"
                              ]
                           },
                           "skip_consent_for_verifiable_first_party_clients": {
                              "type": "boolean",
                              "description": "Whether to skip user consent for applications flagged as first party (true) or not (false)."
                           },
                           "enforce_policies": {
                              "type": "boolean",
                              "description": "Whether to enforce authorization policies (true) or to ignore them (false)."
                           },
                           "client": {
                              "type": "object",
                              "properties": {}
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Resource server successfully created."
               },
               "400": {
                  "description": "The selected identifier is reserved."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "You reached the limit of entities of this type for this tenant."
               },
               "409": {
                  "description": "A resource server with the same identifier already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_resource-servers",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:resource_servers"
                  ]
               }
            ]
         }
      },
      "/resource-servers/{id}": {
         "get": {
            "summary": "Get a resource server",
            "description": "Retrieve an <a href=\"https://auth0.com/docs/apis\">API</a> (also known as resource server).",
            "tags": [
               "resource-servers"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID or audience of the resource server to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Resource server successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/resourceServer"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Some fields cannot be read with the permissions granted by the bearer token scopes. The message will vary depending on the fields and the scopes."
               },
               "404": {
                  "description": "Resource server not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_resource-servers_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:resource_servers"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a resource server",
            "description": "Delete an existing API (also known as a resource server).",
            "tags": [
               "resource-servers"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID or the audience of the resource server to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Resource server successfully deleted."
               },
               "400": {
                  "description": "System resource servers cannot be deleted."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:resource_servers."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_resource-servers_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:resource_servers"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a resource server",
            "description": "Update an existing API (also known as a resource server).",
            "tags": [
               "resource-servers"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID or audience of the resource server to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/resourceServerUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/resourceServerUpdate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Resource server successfully updated."
               },
               "400": {
                  "description": "System resource servers cannot be patched."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:resource_servers."
               },
               "409": {
                  "description": "A resource server with the same identifier already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_resource-servers_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:resource_servers"
                  ]
               }
            ]
         }
      },
      "/roles": {
         "get": {
            "summary": "Get roles",
            "description": "Retrieve filtered list of roles that can be assigned to users.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "name_filter",
                  "in": "query",
                  "description": "Optional filter on name (case-insensitive).",
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Roles successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "ID for this role."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of the role."
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Description of the role."
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "roles": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "ID for this role."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of the role."
                                             },
                                             "description": {
                                                "type": "string",
                                                "description": "Description of the role."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:roles"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a role",
            "description": "Create a new role.\\n",
            "tags": [
               "roles"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/roleCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/roleCreate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Role successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "ID for this role."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of the role."
                              },
                              "description": {
                                 "type": "string",
                                 "description": "Description of the role."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: create:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:roles"
                  ]
               }
            ]
         }
      },
      "/roles/{id}": {
         "get": {
            "summary": "Get a role",
            "description": "Retrieve a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Role successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "ID for this role."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of the role."
                              },
                              "description": {
                                 "type": "string",
                                 "description": "Description of the role."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:roles."
               },
               "404": {
                  "description": "Role not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_roles_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:roles"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a role",
            "description": "Delete a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Role successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: delete:roles."
               },
               "404": {
                  "description": "Role not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_roles_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:roles"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a role",
            "description": "Update a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/roleUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/roleUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Role successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "string",
                                 "description": "ID for this role."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of the role."
                              },
                              "description": {
                                 "type": "string",
                                 "description": "Description of the role."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_roles_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:roles"
                  ]
               }
            ]
         }
      },
      "/roles/{id}/permissions": {
         "get": {
            "summary": "Get permissions granted by role",
            "description": "Retrieve list of permissions granted by a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to list granted permissions.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Role permissions successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/permission"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "permissions": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/permission"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:roles."
               },
               "404": {
                  "description": "Role not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_role_permission",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:roles"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Remove permissions from a role",
            "description": "Remove permissions associated with a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to remove permissions from.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "array of resource_server_identifier, permission_name pairs.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "array of resource_server_identifier, permission_name pairs.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Role permissions successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {}
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_role_permission_assignment",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:roles"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Associate permissions with a role",
            "description": "Associate permissions with a role.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to add permissions to.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "array of resource_server_identifier, permission_name pairs.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "array of resource_server_identifier, permission_name pairs.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Role permissions updated.",
                  "content": {
                     "application/json": {
                        "schema": {}
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_role_permission_assignment",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:roles"
                  ]
               }
            ]
         }
      },
      "/roles/{id}/users": {
         "get": {
            "summary": "Get a role's users",
            "description": "Retrieve users associated with a role. This endpoint supports two types of pagination:\\n- Offset pagination\\n- Checkpoint pagination\\n\\nCheckpoint pagination must be used if you need to retrieve more than 1000 users for a given role.\\n\\n<h2>Checkpoint Pagination</h2>\\n\\nTo search by checkpoint, use the following parameters:\\n- from: Optional id from which to start selection.\\n- take: The total amount of entries to retrieve when using the from parameter. Defaults to 50.\\n\\nNote: The first time you call this endpoint using Checkpoint Pagination, you should omit the <code>from<\/code> parameter. If there are more results, a <code>next<\/code> value will be included in the response. You can use this for subsequent API calls. When <code>next<\/code> is no longer included in the response, this indicates there are no more pages remaining.\\n",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to retrieve a list of users associated with.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "from",
                  "in": "query",
                  "description": "Optional Id from which to start selection.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "take",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Role users successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "user_id": {
                                          "type": "string",
                                          "description": "ID of this user."
                                       },
                                       "picture": {
                                          "type": "string",
                                          "description": "URL to a picture for this user."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of this user."
                                       },
                                       "email": {
                                          "type": "string",
                                          "description": "Email address of this user.",
                                          "default": "john.doe@gmail.com"
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "users": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "user_id": {
                                                "type": "string",
                                                "description": "ID of this user."
                                             },
                                             "picture": {
                                                "type": "string",
                                                "description": "URL to a picture for this user."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of this user."
                                             },
                                             "email": {
                                                "type": "string",
                                                "description": "Email address of this user.",
                                                "default": "john.doe@gmail.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "next": {
                                       "type": "string"
                                    },
                                    "users": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "user_id": {
                                                "type": "string",
                                                "description": "ID of this user."
                                             },
                                             "picture": {
                                                "type": "string",
                                                "description": "URL to a picture for this user."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of this user."
                                             },
                                             "email": {
                                                "type": "string",
                                                "description": "Email address of this user.",
                                                "default": "john.doe@gmail.com"
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected all of: read:users, read:roles."
               },
               "404": {
                  "description": "Role not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_role_user",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users",
                     "read:roles",
                     "read:role_members"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Assign users to a role",
            "description": "Assign users to a role.",
            "tags": [
               "roles"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the role to assign users to.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "users"
                        ],
                        "properties": {
                           "users": {
                              "type": "array",
                              "description": "user_id's of the users to assign the role to.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "users"
                        ],
                        "properties": {
                           "users": {
                              "type": "array",
                              "description": "user_id's of the users to assign the role to.",
                              "items": {
                                 "type": "string"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Role users successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {}
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:roles."
               },
               "404": {
                  "description": "One or more of the users do not exist."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_role_users",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:roles",
                     "create:role_members"
                  ]
               }
            ]
         }
      },
      "/rules": {
         "get": {
            "summary": "Get rules",
            "description": "Retrieve a filtered list of <a href=\"https://auth0.com/docs/rules\">rules</a>. Accepts a list of fields to include or exclude.\\n",
            "tags": [
               "rules"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "enabled",
                  "in": "query",
                  "description": "Optional filter on whether a rule is enabled (true) or disabled (false).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(enabled)|(script)|(order)|(id)|(stage))(,((name)|(enabled)|(script)|(order)|(id)|(stage)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Rules successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/rule"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "rules": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/rule"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:rules."
               },
               "404": {
                  "description": "Rule not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_rules",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:rules"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a rule",
            "description": "Create a <a href=\"https://auth0.com/docs/rules#create-a-new-rule-using-the-management-api\">new rule</a>.\\n\\nNote: Changing a rule's stage of execution from the default <code>login_success<\/code> can change the rule's function signature to have user omitted.\\n",
            "tags": [
               "rules"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/ruleCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/ruleCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Rule successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/rule"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "You reached the limit of entities of this type for this tenant."
               },
               "409": {
                  "description": "A rule with the same execution stage already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_rules",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:rules"
                  ]
               }
            ]
         }
      },
      "/rules-configs": {
         "get": {
            "summary": "Retrieve config variable keys for rules (get_rules-configs)",
            "description": "Retrieve rules config variable keys.\\n\\n    Note: For security, config variable values cannot be retrieved outside rule execution.",
            "tags": [
               "rules-configs"
            ],
            "responses": {
               "200": {
                  "description": "Rules config keys successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "object",
                              "properties": {
                                 "key": {
                                    "type": "string",
                                    "description": "Key for a rules config variable.",
                                    "default": "MY_RULES_CONFIG_KEY",
                                    "minLength": 1,
                                    "maxLength": 127
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:rules_configs."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_rules-configs",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:rules_configs"
                  ]
               }
            ]
         }
      },
      "/rules-configs/{key}": {
         "delete": {
            "summary": "Delete rules config for a given key",
            "description": "Delete a rules config variable identified by its key.",
            "tags": [
               "rules-configs"
            ],
            "parameters": [
               {
                  "name": "key",
                  "in": "path",
                  "description": "Key of the rules config variable to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9_\\-@*+:]*$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Rules config variable successfully removed."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:rules_configs."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_rules-configs_by_key",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:rules_configs"
                  ]
               }
            ]
         },
         "put": {
            "summary": "Set rules config for a given key",
            "description": "Sets a rules config variable.",
            "tags": [
               "rules-configs"
            ],
            "parameters": [
               {
                  "name": "key",
                  "in": "path",
                  "description": "Key of the rules config variable to set (max length: 127 characters).",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^[A-Za-z0-9_\\-@*+:]*$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "value"
                        ],
                        "properties": {
                           "value": {
                              "type": "string",
                              "description": "Value for a rules config variable.",
                              "default": "MY_RULES_CONFIG_VALUE"
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "value"
                        ],
                        "properties": {
                           "value": {
                              "type": "string",
                              "description": "Value for a rules config variable.",
                              "default": "MY_RULES_CONFIG_VALUE"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Rules config variable successfully set.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "key",
                              "value"
                           ],
                           "properties": {
                              "key": {
                                 "type": "string",
                                 "description": "Key for a rules config variable.",
                                 "default": "MY_RULES_CONFIG_KEY",
                                 "minLength": 1,
                                 "maxLength": 127
                              },
                              "value": {
                                 "type": "string",
                                 "description": "Value for a rules config variable.",
                                 "default": "MY_RULES_CONFIG_VALUE"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:rules_configs."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "put_rules-configs_by_key",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:rules_configs"
                  ]
               }
            ]
         }
      },
      "/rules/{id}": {
         "get": {
            "summary": "Get a rule",
            "description": "Retrieve <a href=\"https://auth0.com/docs/rules\">rule</a> details. Accepts a list of fields to include or exclude in the result.\\n",
            "tags": [
               "rules"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the rule to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^rul_[A-Za-z0-9]{16}$"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((name)|(enabled)|(script)|(order)|(id)|(stage))(,((name)|(enabled)|(script)|(order)|(id)|(stage)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Rule successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/rule"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:rules."
               },
               "404": {
                  "description": "Rule not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_rules_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:rules"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a rule",
            "description": "Delete a rule.\\n",
            "tags": [
               "rules"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the rule to delete.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^rul_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Rule successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:rules."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_rules_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:rules"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a rule",
            "description": "Update an existing rule.\\n",
            "tags": [
               "rules"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the rule to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "pattern": "^rul_[A-Za-z0-9]{16}$"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/ruleUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/ruleUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Rule successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/rule"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:rules."
               },
               "404": {
                  "description": "Rule not found."
               },
               "409": {
                  "description": "A rule with the same name already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_rules_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:rules"
                  ]
               }
            ]
         }
      },
      "/stats/active-users": {
         "get": {
            "summary": "Get active users count",
            "description": "Retrieve the number of active users that logged in during the last 30 days.",
            "tags": [
               "stats"
            ],
            "responses": {
               "200": {
                  "description": "Number of active users successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "number",
                           "description": "Number of active users in the last 30 days.",
                           "default": 100
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:stats."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_active-users",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:stats"
                  ]
               }
            ]
         }
      },
      "/stats/daily": {
         "get": {
            "summary": "Get daily stats",
            "description": "Retrieve the number of logins, signups and breached-password detections (subscription required) that occurred each day within a specified date range.",
            "tags": [
               "stats"
            ],
            "parameters": [
               {
                  "name": "from",
                  "in": "query",
                  "description": "Optional first day of the date range (inclusive) in YYYYMMDD format.",
                  "schema": {
                     "type": "string",
                     "pattern": "^2[0-9]{3}((0[1-9])|(1[0-2]))((0[1-9])|([12][0-9])|(3[01]))$"
                  }
               },
               {
                  "name": "to",
                  "in": "query",
                  "description": "Optional last day of the date range (inclusive) in YYYYMMDD format.",
                  "schema": {
                     "type": "string",
                     "pattern": "^2[0-9]{3}((0[1-9])|(1[0-2]))((0[1-9])|([12][0-9])|(3[01]))$"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Daily stats successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/statsEntry"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "'from' date cannot be greater than 'to' date."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:stats."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_daily",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:stats"
                  ]
               }
            ]
         }
      },
      "/tenants/settings": {
         "get": {
            "summary": "Get tenant settings",
            "description": "Retrieve tenant settings. A list of fields to include or exclude may also be specified.",
            "tags": [
               "tenants"
            ],
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((allowed_logout_urls)|(change_password)|(error_page)|(flags)|(friendly_name)|(picture_url)|(support_email)|(support_url)|(session_lifetime)|(default_audience)|(default_directory)|(device_flow)|(idle_session_lifetime)|(default_redirection_uri)|(universal_login)|(universal_login\\.colors)|(enabled_locales)|(session_cookie))(,((allowed_logout_urls)|(change_password)|(error_page)|(flags)|(friendly_name)|(picture_url)|(support_email)|(support_url)|(session_lifetime)|(default_audience)|(default_directory)|(device_flow)|(idle_session_lifetime)|(default_redirection_uri)|(universal_login)|(universal_login\\.colors)|(enabled_locales)|(session_cookie)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Tenant settings successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/tenantSettings"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:tenant_settings."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "tenant_settings_route",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:tenant_settings"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update tenant settings",
            "description": "Update settings for a tenant.",
            "tags": [
               "tenants"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/tenantSettingsUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/tenantSettingsUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Tenant settings successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/tenantSettings"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:tenant_settings."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_settings",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:tenant_settings"
                  ]
               }
            ]
         }
      },
      "/tickets/email-verification": {
         "post": {
            "summary": "Create an email verification ticket",
            "description": "Create a <a href=\"https://auth0.com/docs/email/custom#verification-email\">ticket to verify a user's email address</a>.",
            "tags": [
               "tickets"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "user_id"
                        ],
                        "properties": {
                           "result_url": {
                              "type": "string",
                              "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                              "default": "http://myapp.com/callback"
                           },
                           "user_id": {
                              "type": "string",
                              "description": "user_id of for whom the ticket should be created."
                           },
                           "client_id": {
                              "type": "string",
                              "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
                              "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                           },
                           "identity": {
                              "type": "object",
                              "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
                              "required": [
                                 "user_id",
                                 "provider"
                              ],
                              "properties": {
                                 "user_id": {
                                    "type": "string",
                                    "description": "user_id of the identity to be verified.",
                                    "default": "5457edea1b8f22891a000004"
                                 },
                                 "provider": {
                                    "type": "string",
                                    "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
                                    "default": "google-oauth2",
                                    "enum": [
                                       "ad",
                                       "adfs",
                                       "amazon",
                                       "apple",
                                       "dropbox",
                                       "bitbucket",
                                       "aol",
                                       "auth0-oidc",
                                       "auth0",
                                       "baidu",
                                       "bitly",
                                       "box",
                                       "custom",
                                       "daccount",
                                       "dwolla",
                                       "email",
                                       "evernote-sandbox",
                                       "evernote",
                                       "exact",
                                       "facebook",
                                       "fitbit",
                                       "flickr",
                                       "github",
                                       "google-apps",
                                       "google-oauth2",
                                       "instagram",
                                       "ip",
                                       "linkedin",
                                       "miicard",
                                       "oauth1",
                                       "oauth2",
                                       "office365",
                                       "oidc",
                                       "paypal",
                                       "paypal-sandbox",
                                       "pingfederate",
                                       "planningcenter",
                                       "renren",
                                       "salesforce-community",
                                       "salesforce-sandbox",
                                       "salesforce",
                                       "samlp",
                                       "sharepoint",
                                       "shopify",
                                       "sms",
                                       "soundcloud",
                                       "thecity-sandbox",
                                       "thecity",
                                       "thirtysevensignals",
                                       "twitter",
                                       "untappd",
                                       "vkontakte",
                                       "waad",
                                       "weibo",
                                       "windowslive",
                                       "wordpress",
                                       "yahoo",
                                       "yammer",
                                       "yandex",
                                       "line"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "user_id"
                        ],
                        "properties": {
                           "result_url": {
                              "type": "string",
                              "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                              "default": "http://myapp.com/callback"
                           },
                           "user_id": {
                              "type": "string",
                              "description": "user_id of for whom the ticket should be created."
                           },
                           "client_id": {
                              "type": "string",
                              "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
                              "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                           },
                           "identity": {
                              "type": "object",
                              "description": "This must be provided to verify primary social, enterprise and passwordless email identities. Also, is needed to verify secondary identities.",
                              "required": [
                                 "user_id",
                                 "provider"
                              ],
                              "properties": {
                                 "user_id": {
                                    "type": "string",
                                    "description": "user_id of the identity to be verified.",
                                    "default": "5457edea1b8f22891a000004"
                                 },
                                 "provider": {
                                    "type": "string",
                                    "description": "Identity provider name of the identity (e.g. `google-oauth2`).",
                                    "default": "google-oauth2",
                                    "enum": [
                                       "ad",
                                       "adfs",
                                       "amazon",
                                       "apple",
                                       "dropbox",
                                       "bitbucket",
                                       "aol",
                                       "auth0-oidc",
                                       "auth0",
                                       "baidu",
                                       "bitly",
                                       "box",
                                       "custom",
                                       "daccount",
                                       "dwolla",
                                       "email",
                                       "evernote-sandbox",
                                       "evernote",
                                       "exact",
                                       "facebook",
                                       "fitbit",
                                       "flickr",
                                       "github",
                                       "google-apps",
                                       "google-oauth2",
                                       "instagram",
                                       "ip",
                                       "linkedin",
                                       "miicard",
                                       "oauth1",
                                       "oauth2",
                                       "office365",
                                       "oidc",
                                       "paypal",
                                       "paypal-sandbox",
                                       "pingfederate",
                                       "planningcenter",
                                       "renren",
                                       "salesforce-community",
                                       "salesforce-sandbox",
                                       "salesforce",
                                       "samlp",
                                       "sharepoint",
                                       "shopify",
                                       "sms",
                                       "soundcloud",
                                       "thecity-sandbox",
                                       "thecity",
                                       "thirtysevensignals",
                                       "twitter",
                                       "untappd",
                                       "vkontakte",
                                       "waad",
                                       "weibo",
                                       "windowslive",
                                       "wordpress",
                                       "yahoo",
                                       "yammer",
                                       "yandex",
                                       "line"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Ticket successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "ticket"
                           ],
                           "properties": {
                              "ticket": {
                                 "type": "string",
                                 "description": "URL representing the ticket.",
                                 "default": "https://login.auth0.com/lo/verify_email?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The user with id {user_id} is not a member of organization with id {organization_id}."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:user_tickets."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_email-verification",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:user_tickets"
                  ]
               }
            ]
         }
      },
      "/tickets/password-change": {
         "post": {
            "summary": "Create a password change ticket",
            "description": "Create a <a href=\"https://auth0.com/docs/connections/database/password-change\">password change ticket</a> for a user.",
            "tags": [
               "tickets"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "result_url": {
                              "type": "string",
                              "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                              "default": "http://myapp.com/callback"
                           },
                           "user_id": {
                              "type": "string",
                              "description": "user_id of for whom the ticket should be created."
                           },
                           "client_id": {
                              "type": "string",
                              "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
                              "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.",
                              "default": "con_0000000000000001"
                           },
                           "email": {
                              "type": "string",
                              "description": "Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id."
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                           },
                           "mark_email_as_verified": {
                              "type": "boolean",
                              "description": "Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).",
                              "default": false
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "result_url": {
                              "type": "string",
                              "description": "URL the user will be redirected to in the classic Universal Login experience once the ticket is used.",
                              "default": "http://myapp.com/callback"
                           },
                           "user_id": {
                              "type": "string",
                              "description": "user_id of for whom the ticket should be created."
                           },
                           "client_id": {
                              "type": "string",
                              "description": "ID of the client. If provided for tenants using New Universal Login experience, the user will be prompted to redirect to the default login route of the corresponding application once the ticket is used. See <a target='' href='https://manage.local.dev.auth0.com/docs/universal-login/configure-default-login-routes#completing-the-password-reset-flow'>Configuring Default Login Routes</a> for more details.",
                              "default": "DaM8bokEXBWrTUFCiJjWn50jei6ardyX"
                           },
                           "organization_id": {
                              "type": "string",
                              "description": "(Optional) Organization ID – the ID of the Organization. If provided, organization parameters will be made available to the email template and organization branding will be applied to the prompt. In addition, the redirect link in the prompt will include organization_id and organization_name query string parameters.",
                              "default": "org_2eondWoxcMIpaLQc"
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "ID of the connection. If provided, allows the user to be specified using email instead of user_id. If you set this value, you must also send the email parameter. You cannot send user_id when specifying a connection_id.",
                              "default": "con_0000000000000001"
                           },
                           "email": {
                              "type": "string",
                              "description": "Email address of the user for whom the tickets should be created. Requires the connection_id parameter. Cannot be specified when using user_id."
                           },
                           "ttl_sec": {
                              "type": "integer",
                              "description": "Number of seconds for which the ticket is valid before expiration. If unspecified or set to 0, this value defaults to 432000 seconds (5 days)."
                           },
                           "mark_email_as_verified": {
                              "type": "boolean",
                              "description": "Whether to set the email_verified attribute to true (true) or whether it should not be updated (false).",
                              "default": false
                           },
                           "includeEmailInRedirect": {
                              "type": "boolean",
                              "description": "Whether to include the email address as part of the returnUrl in the reset_email (true), or not (false)."
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Ticket successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "required": [
                              "ticket"
                           ],
                           "properties": {
                              "ticket": {
                                 "type": "string",
                                 "description": "URL representing the ticket.",
                                 "default": "https://login.auth0.com/lo/reset?client_id=nsaPS2p3cargoFy82WT7betaOPOt3qSh&tenant=mdocs&bewit=bmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPdDNxU2hcMTQzMDY2MjE4MVxuRTcxM0RSeUNlbEpzUUJmaFVaS3A1NEdJbWFzSUZMYzRTdEFtY2NMMXhZPVx7ImVtYWloojoiZGFtaWtww2NoQGhvdG1haWwuY29tIiwidGVuYW50IjoiZHNjaGVua2tjwWFuIiwiY2xpZW50X2lkIjoibmNlR01CcDNOUE1GeXVzODJXVDdyY1RUT1BPiiqxU2giLCJjb25uZWN0aW9uIjoiRGFtaWmsdiwicmVzdWx0VXJsIjoiIn0"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The user with id {user_id} is not a member of organization with id {organization_id}."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: create:user_tickets."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_password-change",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:user_tickets"
                  ]
               }
            ]
         }
      },
      "/user-blocks": {
         "get": {
            "summary": "Get blocks by identifier",
            "description": "Retrieve a list of blocked IP addresses for a given identifier (e.g., username, phone number or email).\\n",
            "tags": [
               "user-blocks"
            ],
            "parameters": [
               {
                  "name": "identifier",
                  "in": "query",
                  "description": "Should be any of a username, phone number, or email.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "consider_brute_force_enablement",
                  "in": "query",
                  "description": "\\n          If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.\\n          If true and Brute Force Protection is disabled, will return an empty list.",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "User successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/userBlock"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_user-blocks",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Unblock by identifier",
            "description": "Unblock a user blocked due to an excessive amount of incorrectly-provided credentials.\\n",
            "tags": [
               "user-blocks"
            ],
            "parameters": [
               {
                  "name": "identifier",
                  "in": "query",
                  "description": "Should be any of a username, phone number, or email.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "User successfully unblocked."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_user-blocks",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/user-blocks/{id}": {
         "get": {
            "summary": "Get a user's blocks",
            "description": "Retrieve a list of blocked IP addresses for the login identifiers (email, username, phone number, etc) associated with the specified user.\\n\\n",
            "tags": [
               "user-blocks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "user_id of the user blocks to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "consider_brute_force_enablement",
                  "in": "query",
                  "description": "\\n          If true and Brute Force Protection is enabled and configured to block logins, will return a list of blocked IP addresses.\\n          If true and Brute Force Protection is disabled, will return an empty list.",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "User block successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/userBlock"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_user-blocks_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Unblock a user",
            "description": "Unblock a user that was blocked due to an excessive amount of incorrectly provided credentials.\\n\\nNote: This endpoint does not unblock users that were <a href=\"https://auth0.com/docs/user-profile#block-and-unblock-a-user\">blocked by admins</a>.\\n",
            "tags": [
               "user-blocks"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The user_id of the user to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "User successfully unblocked."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_user-blocks_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/users": {
         "get": {
            "summary": "List or Search Users",
            "description": "Retrieve details of users. It is possible to:\\n\\n- Specify a search criteria for users\\n- Sort the users to be returned\\n- Select the fields to be returned\\n- Specify the number of users to retrieve per page and the page index\\n <!-- only v3 is available -->\\nThe <code>q<\/code> query parameter can be used to get users that match the specified criteria <a href=\"https://manage.local.dev.auth0.com/docs/users/search/v3/query-syntax\">using query string syntax.</a>\\n\\n<a href=\"https://manage.local.dev.auth0.com/docs/users/search/v3\">Learn more about searching for users.</a>\\n\\nRead about <a href=\"https://manage.local.dev.auth0.com/docs/users/search/best-practices\">best practices</a> when working with the API endpoints for retrieving users.\\n\\nAuth0 limits the number of users you can return. If you exceed this threshold, please redefine your search, use the <a href=\"https://manage.local.dev.auth0.com/docs/api/management/v2#!/Jobs/post_users_exports\">export job</a>, or the <a href=\"https://manage.local.dev.auth0.com/docs/extensions/user-import-export\">User Import / Export</a> extension.\\n",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "Field to sort by. Use <code>field:order<\/code> where order is <code>1<\/code> for ascending and <code>-1<\/code> for descending. e.g. <code>created_at:1<\/code>",
                  "schema": {
                     "type": "string",
                     "pattern": "^(([a-zA-Z0-9_\\\\.]+))\\:(1|-1)$"
                  }
               },
               {
                  "name": "connection",
                  "in": "query",
                  "description": "Connection filter. Only applies when using <code>search_engine=v1<\/code>. To filter by connection with <code>search_engine=v2|v3<\/code>, use <code>q=identities.connection:\"connection_name\"<\/code>",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "q",
                  "in": "query",
                  "description": "Query in <a target='_new' href ='http://www.lucenetutorial.com/lucene-query-syntax.html'>Lucene query string syntax</a>. Some query types cannot be used on metadata fields, for details see <a href='https://manage.local.dev.auth0.com/docs/users/search/v3/query-syntax#searchable-fields'>Searchable Fields</a>.",
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "search_engine",
                  "in": "query",
                  "description": "The version of the search engine",
                  "schema": {
                     "type": "string",
                     "enum": [
                        "v1",
                        "v2",
                        "v3"
                     ]
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Users successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "additionalProperties": {},
                                    "properties": {
                                       "user_id": {
                                          "type": "string",
                                          "description": "ID of the user which can be used when interacting with other APIs.",
                                          "default": "auth0|507f1f77bcf86cd799439020"
                                       },
                                       "email": {
                                          "type": "string",
                                          "description": "Email address of this user.",
                                          "default": "john.doe@gmail.com"
                                       },
                                       "email_verified": {
                                          "type": "boolean",
                                          "description": "Whether this email address is verified (true) or unverified (false).",
                                          "default": false
                                       },
                                       "username": {
                                          "type": "string",
                                          "description": "Username of this user.",
                                          "default": "johndoe"
                                       },
                                       "phone_number": {
                                          "type": "string",
                                          "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                          "default": "+199999999999999"
                                       },
                                       "phone_verified": {
                                          "type": "boolean",
                                          "description": "Whether this phone number has been verified (true) or not (false).",
                                          "default": false
                                       },
                                       "created_at": {
                                          "oneOf": [
                                             {
                                                "type": "string",
                                                "description": "Date and time when this user was created (ISO_8601 format)."
                                             },
                                             {
                                                "type": "object",
                                                "description": "Date and time when this user was created (ISO_8601 format).",
                                                "additionalProperties": {}
                                             }
                                          ]
                                       },
                                       "updated_at": {
                                          "oneOf": [
                                             {
                                                "type": "string",
                                                "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                             },
                                             {
                                                "type": "object",
                                                "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                                "additionalProperties": {}
                                             }
                                          ]
                                       },
                                       "identities": {
                                          "type": "array",
                                          "description": "Array of user identity objects when accounts are linked.",
                                          "items": {
                                             "type": "object",
                                             "properties": {
                                                "connection": {
                                                   "type": "string",
                                                   "description": "Name of the connection containing this identity."
                                                },
                                                "user_id": {
                                                   "type": "string",
                                                   "description": "Unique identifier of the user user for this identity."
                                                },
                                                "provider": {
                                                   "type": "string",
                                                   "description": "The type of identity provider"
                                                },
                                                "isSocial": {
                                                   "type": "boolean",
                                                   "description": "Whether this identity is from a social provider (true) or not (false)."
                                                },
                                                "access_token": {
                                                   "type": "string",
                                                   "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                                },
                                                "access_token_secret": {
                                                   "type": "string",
                                                   "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                                },
                                                "refresh_token": {
                                                   "type": "string",
                                                   "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                                },
                                                "profileData": {
                                                   "$ref": "#/components/schemas/userProfile"
                                                }
                                             }
                                          }
                                       },
                                       "app_metadata": {
                                          "type": "object",
                                          "description": "User metadata to which this user has read-only access.",
                                          "additionalProperties": {}
                                       },
                                       "user_metadata": {
                                          "type": "object",
                                          "description": "User metadata to which this user has read/write access.",
                                          "additionalProperties": {}
                                       },
                                       "picture": {
                                          "type": "string",
                                          "description": "URL to picture, photo, or avatar of this user."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of this user."
                                       },
                                       "nickname": {
                                          "type": "string",
                                          "description": "Preferred nickname or alias of this user."
                                       },
                                       "multifactor": {
                                          "type": "array",
                                          "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                          "items": {
                                             "type": "string"
                                          }
                                       },
                                       "last_ip": {
                                          "type": "string",
                                          "description": "Last IP address from which this user logged in."
                                       },
                                       "last_login": {
                                          "oneOf": [
                                             {
                                                "type": "string",
                                                "description": "Last date and time this user logged in (ISO_8601 format)."
                                             },
                                             {
                                                "type": "object",
                                                "description": "Last date and time this user logged in (ISO_8601 format).",
                                                "additionalProperties": {}
                                             }
                                          ]
                                       },
                                       "logins_count": {
                                          "type": "integer",
                                          "description": "Total number of logins this user has performed."
                                       },
                                       "blocked": {
                                          "type": "boolean",
                                          "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                                       },
                                       "given_name": {
                                          "type": "string",
                                          "description": "Given name/first name/forename of this user."
                                       },
                                       "family_name": {
                                          "type": "string",
                                          "description": "Family name/last name/surname of this user."
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "length": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "users": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "additionalProperties": {},
                                          "properties": {
                                             "user_id": {
                                                "type": "string",
                                                "description": "ID of the user which can be used when interacting with other APIs.",
                                                "default": "auth0|507f1f77bcf86cd799439020"
                                             },
                                             "email": {
                                                "type": "string",
                                                "description": "Email address of this user.",
                                                "default": "john.doe@gmail.com"
                                             },
                                             "email_verified": {
                                                "type": "boolean",
                                                "description": "Whether this email address is verified (true) or unverified (false).",
                                                "default": false
                                             },
                                             "username": {
                                                "type": "string",
                                                "description": "Username of this user.",
                                                "default": "johndoe"
                                             },
                                             "phone_number": {
                                                "type": "string",
                                                "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                                "default": "+199999999999999"
                                             },
                                             "phone_verified": {
                                                "type": "boolean",
                                                "description": "Whether this phone number has been verified (true) or not (false).",
                                                "default": false
                                             },
                                             "created_at": {
                                                "oneOf": [
                                                   {
                                                      "type": "string",
                                                      "description": "Date and time when this user was created (ISO_8601 format)."
                                                   },
                                                   {
                                                      "type": "object",
                                                      "description": "Date and time when this user was created (ISO_8601 format).",
                                                      "additionalProperties": {}
                                                   }
                                                ]
                                             },
                                             "updated_at": {
                                                "oneOf": [
                                                   {
                                                      "type": "string",
                                                      "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                                   },
                                                   {
                                                      "type": "object",
                                                      "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                                      "additionalProperties": {}
                                                   }
                                                ]
                                             },
                                             "identities": {
                                                "type": "array",
                                                "description": "Array of user identity objects when accounts are linked.",
                                                "items": {
                                                   "type": "object",
                                                   "properties": {
                                                      "connection": {
                                                         "type": "string",
                                                         "description": "Name of the connection containing this identity."
                                                      },
                                                      "user_id": {
                                                         "type": "string",
                                                         "description": "Unique identifier of the user user for this identity."
                                                      },
                                                      "provider": {
                                                         "type": "string",
                                                         "description": "The type of identity provider"
                                                      },
                                                      "isSocial": {
                                                         "type": "boolean",
                                                         "description": "Whether this identity is from a social provider (true) or not (false)."
                                                      },
                                                      "access_token": {
                                                         "type": "string",
                                                         "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                                      },
                                                      "access_token_secret": {
                                                         "type": "string",
                                                         "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                                      },
                                                      "refresh_token": {
                                                         "type": "string",
                                                         "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                                      },
                                                      "profileData": {
                                                         "$ref": "#/components/schemas/userProfile"
                                                      }
                                                   }
                                                }
                                             },
                                             "app_metadata": {
                                                "type": "object",
                                                "description": "User metadata to which this user has read-only access.",
                                                "additionalProperties": {}
                                             },
                                             "user_metadata": {
                                                "type": "object",
                                                "description": "User metadata to which this user has read/write access.",
                                                "additionalProperties": {}
                                             },
                                             "picture": {
                                                "type": "string",
                                                "description": "URL to picture, photo, or avatar of this user."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of this user."
                                             },
                                             "nickname": {
                                                "type": "string",
                                                "description": "Preferred nickname or alias of this user."
                                             },
                                             "multifactor": {
                                                "type": "array",
                                                "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                                "items": {
                                                   "type": "string"
                                                }
                                             },
                                             "last_ip": {
                                                "type": "string",
                                                "description": "Last IP address from which this user logged in."
                                             },
                                             "last_login": {
                                                "oneOf": [
                                                   {
                                                      "type": "string",
                                                      "description": "Last date and time this user logged in (ISO_8601 format)."
                                                   },
                                                   {
                                                      "type": "object",
                                                      "description": "Last date and time this user logged in (ISO_8601 format).",
                                                      "additionalProperties": {}
                                                   }
                                                ]
                                             },
                                             "logins_count": {
                                                "type": "integer",
                                                "description": "Total number of logins this user has performed."
                                             },
                                             "blocked": {
                                                "type": "boolean",
                                                "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                                             },
                                             "given_name": {
                                                "type": "string",
                                                "description": "Given name/first name/forename of this user."
                                             },
                                             "family_name": {
                                                "type": "string",
                                                "description": "Family name/last name/surname of this user."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "You can only page through the first 1000 records. See https://manage.local.dev.auth0.com/docs/users/search/v3/view-search-results-by-page#limitation."
               },
               "401": {
                  "description": "Invalid token."
               },
               "403": {
                  "description": "Insufficient scope, expected any of: read:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               },
               "503": {
                  "description": "The query exceeded the timeout. Please try refining your search criteria. See https://manage.local.dev.auth0.com/docs/best-practices/search-best-practices."
               }
            },
            "operationId": "get_users",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users",
                     "read:user_idp_tokens"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Create a User",
            "description": "Create a new user for a given <a href=\"https://auth0.com/docs/connections/database\">database</a> or <a href=\"https://auth0.com/docs/connections/passwordless\">passwordless</a> connection.\\n\\nNote: <code>connection<\/code> is required but other parameters such as <code>email<\/code> and <code>password<\/code> are dependent upon the type of connection.",
            "tags": [
               "users"
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/userCreate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/userCreate"
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "User successfully created.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "additionalProperties": {},
                           "properties": {
                              "user_id": {
                                 "type": "string",
                                 "description": "ID of the user which can be used when interacting with other APIs.",
                                 "default": "auth0|507f1f77bcf86cd799439020"
                              },
                              "email": {
                                 "type": "string",
                                 "description": "Email address of this user.",
                                 "default": "john.doe@gmail.com"
                              },
                              "email_verified": {
                                 "type": "boolean",
                                 "description": "Whether this email address is verified (true) or unverified (false).",
                                 "default": false
                              },
                              "username": {
                                 "type": "string",
                                 "description": "Username of this user.",
                                 "default": "johndoe"
                              },
                              "phone_number": {
                                 "type": "string",
                                 "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                 "default": "+199999999999999"
                              },
                              "phone_verified": {
                                 "type": "boolean",
                                 "description": "Whether this phone number has been verified (true) or not (false).",
                                 "default": false
                              },
                              "created_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was created (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was created (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "updated_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "identities": {
                                 "type": "array",
                                 "description": "Array of user identity objects when accounts are linked.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "connection": {
                                          "type": "string",
                                          "description": "Name of the connection containing this identity."
                                       },
                                       "user_id": {
                                          "type": "string",
                                          "description": "Unique identifier of the user user for this identity."
                                       },
                                       "provider": {
                                          "type": "string",
                                          "description": "The type of identity provider"
                                       },
                                       "isSocial": {
                                          "type": "boolean",
                                          "description": "Whether this identity is from a social provider (true) or not (false)."
                                       },
                                       "access_token": {
                                          "type": "string",
                                          "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "access_token_secret": {
                                          "type": "string",
                                          "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "refresh_token": {
                                          "type": "string",
                                          "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "profileData": {
                                          "$ref": "#/components/schemas/userProfile"
                                       }
                                    }
                                 }
                              },
                              "app_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read-only access.",
                                 "additionalProperties": {}
                              },
                              "user_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read/write access.",
                                 "additionalProperties": {}
                              },
                              "picture": {
                                 "type": "string",
                                 "description": "URL to picture, photo, or avatar of this user."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of this user."
                              },
                              "nickname": {
                                 "type": "string",
                                 "description": "Preferred nickname or alias of this user."
                              },
                              "multifactor": {
                                 "type": "array",
                                 "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                 "items": {
                                    "type": "string"
                                 }
                              },
                              "last_ip": {
                                 "type": "string",
                                 "description": "Last IP address from which this user logged in."
                              },
                              "last_login": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Last date and time this user logged in (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Last date and time this user logged in (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "logins_count": {
                                 "type": "integer",
                                 "description": "Total number of logins this user has performed."
                              },
                              "blocked": {
                                 "type": "boolean",
                                 "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                              },
                              "given_name": {
                                 "type": "string",
                                 "description": "Given name/first name/forename of this user."
                              },
                              "family_name": {
                                 "type": "string",
                                 "description": "Family name/last name/surname of this user."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Connection is disabled."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope, expected any of: create:users."
               },
               "409": {
                  "description": "User already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_users",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "create:users"
                  ]
               }
            ]
         }
      },
      "/users-by-email": {
         "get": {
            "summary": "Search Users by Email",
            "description": "If Auth0 is the identify provider (idP), the email address associated with a user is saved in lower case, regardless of how you initially provided it. For example, if you register a user as <b>JohnSmith@example.com</b>, Auth0 saves the user's email as <b>johnsmith@example.com</b>.\\n\\nIn cases where Auth0 is not the idP, the `email` is stored based on the rules of idP, so make sure the search is made using the correct capitalization.\\n\\nWhen using this endpoint, make sure that you are searching for users via email addresses using the correct case.\\n",
            "tags": [
               "users-by-email"
            ],
            "parameters": [
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((phone_number)|(email)|(email_verified)|(picture)|(username)|(user_id)|(name)|(nickname)|(created_at)|(identities)|(app_metadata)|(user_metadata)|(last_ip)|(last_login)|(logins_count)|(updated_at)|(blocked)|(family_name)|(given_name))(,((phone_number)|(email)|(email_verified)|(picture)|(username)|(user_id)|(name)|(nickname)|(created_at)|(identities)|(app_metadata)|(user_metadata)|(last_ip)|(last_login)|(logins_count)|(updated_at)|(blocked)|(family_name)|(given_name)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false). Defaults to true.",
                  "schema": {
                     "type": "boolean"
                  }
               },
               {
                  "name": "email",
                  "in": "query",
                  "description": "Email address to search for (case-sensitive).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Users successfully searched.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "type": "object",
                              "additionalProperties": {},
                              "properties": {
                                 "user_id": {
                                    "type": "string",
                                    "description": "ID of the user which can be used when interacting with other APIs.",
                                    "default": "auth0|507f1f77bcf86cd799439020"
                                 },
                                 "email": {
                                    "type": "string",
                                    "description": "Email address of this user.",
                                    "default": "john.doe@gmail.com"
                                 },
                                 "email_verified": {
                                    "type": "boolean",
                                    "description": "Whether this email address is verified (true) or unverified (false).",
                                    "default": false
                                 },
                                 "username": {
                                    "type": "string",
                                    "description": "Username of this user.",
                                    "default": "johndoe"
                                 },
                                 "phone_number": {
                                    "type": "string",
                                    "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                    "default": "+199999999999999"
                                 },
                                 "phone_verified": {
                                    "type": "boolean",
                                    "description": "Whether this phone number has been verified (true) or not (false).",
                                    "default": false
                                 },
                                 "created_at": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "Date and time when this user was created (ISO_8601 format)."
                                       },
                                       {
                                          "type": "object",
                                          "description": "Date and time when this user was created (ISO_8601 format).",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 },
                                 "updated_at": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                       },
                                       {
                                          "type": "object",
                                          "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 },
                                 "identities": {
                                    "type": "array",
                                    "description": "Array of user identity objects when accounts are linked.",
                                    "items": {
                                       "type": "object",
                                       "properties": {
                                          "connection": {
                                             "type": "string",
                                             "description": "Name of the connection containing this identity."
                                          },
                                          "user_id": {
                                             "type": "string",
                                             "description": "Unique identifier of the user user for this identity."
                                          },
                                          "provider": {
                                             "type": "string",
                                             "description": "The type of identity provider"
                                          },
                                          "isSocial": {
                                             "type": "boolean",
                                             "description": "Whether this identity is from a social provider (true) or not (false)."
                                          },
                                          "access_token": {
                                             "type": "string",
                                             "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                          },
                                          "access_token_secret": {
                                             "type": "string",
                                             "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                          },
                                          "refresh_token": {
                                             "type": "string",
                                             "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                          },
                                          "profileData": {
                                             "$ref": "#/components/schemas/userProfile"
                                          }
                                       }
                                    }
                                 },
                                 "app_metadata": {
                                    "type": "object",
                                    "description": "User metadata to which this user has read-only access.",
                                    "additionalProperties": {}
                                 },
                                 "user_metadata": {
                                    "type": "object",
                                    "description": "User metadata to which this user has read/write access.",
                                    "additionalProperties": {}
                                 },
                                 "picture": {
                                    "type": "string",
                                    "description": "URL to picture, photo, or avatar of this user."
                                 },
                                 "name": {
                                    "type": "string",
                                    "description": "Name of this user."
                                 },
                                 "nickname": {
                                    "type": "string",
                                    "description": "Preferred nickname or alias of this user."
                                 },
                                 "multifactor": {
                                    "type": "array",
                                    "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                    "items": {
                                       "type": "string"
                                    }
                                 },
                                 "last_ip": {
                                    "type": "string",
                                    "description": "Last IP address from which this user logged in."
                                 },
                                 "last_login": {
                                    "oneOf": [
                                       {
                                          "type": "string",
                                          "description": "Last date and time this user logged in (ISO_8601 format)."
                                       },
                                       {
                                          "type": "object",
                                          "description": "Last date and time this user logged in (ISO_8601 format).",
                                          "additionalProperties": {}
                                       }
                                    ]
                                 },
                                 "logins_count": {
                                    "type": "integer",
                                    "description": "Total number of logins this user has performed."
                                 },
                                 "blocked": {
                                    "type": "boolean",
                                    "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                                 },
                                 "given_name": {
                                    "type": "string",
                                    "description": "Given name/first name/forename of this user."
                                 },
                                 "family_name": {
                                    "type": "string",
                                    "description": "Family name/last name/surname of this user."
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_users-by-email",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users"
                  ]
               }
            ]
         }
      },
      "/users/{id}": {
         "get": {
            "summary": "Get a User",
            "description": "Retrieve user details. A list of fields to include or exclude may also be specified.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to retrieve.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "fields",
                  "in": "query",
                  "description": "Comma-separated list of fields to include or exclude (based on value provided for include_fields) in the result. Leave empty to retrieve all fields.",
                  "schema": {
                     "type": "string",
                     "pattern": "^((phone_number)|(email)|(email_verified)|(picture)|(username)|(user_id)|(name)|(nickname)|(created_at)|(identities)|(app_metadata)|(user_metadata)|(last_ip)|(last_login)|(logins_count)|(updated_at)|(blocked)|(family_name)|(given_name))(,((phone_number)|(email)|(email_verified)|(picture)|(username)|(user_id)|(name)|(nickname)|(created_at)|(identities)|(app_metadata)|(user_metadata)|(last_ip)|(last_login)|(logins_count)|(updated_at)|(blocked)|(family_name)|(given_name)))*$"
                  }
               },
               {
                  "name": "include_fields",
                  "in": "query",
                  "description": "Whether specified fields are to be included (true) or excluded (false).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "User successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "additionalProperties": {},
                           "properties": {
                              "user_id": {
                                 "type": "string",
                                 "description": "ID of the user which can be used when interacting with other APIs.",
                                 "default": "auth0|507f1f77bcf86cd799439020"
                              },
                              "email": {
                                 "type": "string",
                                 "description": "Email address of this user.",
                                 "default": "john.doe@gmail.com"
                              },
                              "email_verified": {
                                 "type": "boolean",
                                 "description": "Whether this email address is verified (true) or unverified (false).",
                                 "default": false
                              },
                              "username": {
                                 "type": "string",
                                 "description": "Username of this user.",
                                 "default": "johndoe"
                              },
                              "phone_number": {
                                 "type": "string",
                                 "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                 "default": "+199999999999999"
                              },
                              "phone_verified": {
                                 "type": "boolean",
                                 "description": "Whether this phone number has been verified (true) or not (false).",
                                 "default": false
                              },
                              "created_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was created (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was created (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "updated_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "identities": {
                                 "type": "array",
                                 "description": "Array of user identity objects when accounts are linked.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "connection": {
                                          "type": "string",
                                          "description": "Name of the connection containing this identity."
                                       },
                                       "user_id": {
                                          "type": "string",
                                          "description": "Unique identifier of the user user for this identity."
                                       },
                                       "provider": {
                                          "type": "string",
                                          "description": "The type of identity provider"
                                       },
                                       "isSocial": {
                                          "type": "boolean",
                                          "description": "Whether this identity is from a social provider (true) or not (false)."
                                       },
                                       "access_token": {
                                          "type": "string",
                                          "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "access_token_secret": {
                                          "type": "string",
                                          "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "refresh_token": {
                                          "type": "string",
                                          "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "profileData": {
                                          "$ref": "#/components/schemas/userProfile"
                                       }
                                    }
                                 }
                              },
                              "app_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read-only access.",
                                 "additionalProperties": {}
                              },
                              "user_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read/write access.",
                                 "additionalProperties": {}
                              },
                              "picture": {
                                 "type": "string",
                                 "description": "URL to picture, photo, or avatar of this user."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of this user."
                              },
                              "nickname": {
                                 "type": "string",
                                 "description": "Preferred nickname or alias of this user."
                              },
                              "multifactor": {
                                 "type": "array",
                                 "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                 "items": {
                                    "type": "string"
                                 }
                              },
                              "last_ip": {
                                 "type": "string",
                                 "description": "Last IP address from which this user logged in."
                              },
                              "last_login": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Last date and time this user logged in (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Last date and time this user logged in (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "logins_count": {
                                 "type": "integer",
                                 "description": "Total number of logins this user has performed."
                              },
                              "blocked": {
                                 "type": "boolean",
                                 "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                              },
                              "given_name": {
                                 "type": "string",
                                 "description": "Given name/first name/forename of this user."
                              },
                              "family_name": {
                                 "type": "string",
                                 "description": "Family name/last name/surname of this user."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users, read:user_idp_tokens, read:current_user."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_users_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users",
                     "read:current_user",
                     "read:user_idp_tokens"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Delete a User",
            "description": "Delete a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "User successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: delete:users,delete:current_user."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_users_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:users",
                     "delete:current_user"
                  ]
               }
            ]
         },
         "patch": {
            "summary": "Update a User",
            "description": "Update a user.\\n\\nThese are the attributes that can be updated at the root level:\\n\\n<ul>\\n    <li>app_metadata</li>\\n    <li>blocked</li>\\n    <li>email</li>\\n    <li>email_verified</li>\\n    <li>family_name</li>\\n    <li>given_name</li>\\n    <li>name</li>\\n    <li>nickname</li>\\n    <li>password</li>\\n    <li>phone_number</li>\\n    <li>phone_verified</li>\\n    <li>picture</li>\\n    <li>username</li>\\n    <li>user_metadata</li>\\n    <li>verify_email</li>\\n</ul>\\n\\nSome considerations:\\n<ul>\\n    <li>The properties of the new object will replace the old ones.</li>\\n    <li>The metadata fields are an exception to this rule (<code>user_metadata<\/code> and <code>app_metadata<\/code>). These properties are merged instead of being replaced but be careful, the merge only occurs on the first level.</li>\\n    <li>If you are updating <code>email<\/code>, <code>email_verified<\/code>, <code>phone_number<\/code>, <code>phone_verified<\/code>, <code>username<\/code> or <code>password<\/code> of a secondary identity, you need to specify the <code>connection<\/code> property too.</li>\\n    <li>If you are updating <code>email<\/code> or <code>phone_number<\/code> you can specify, optionally, the <code>client_id<\/code> property.</li>\\n    <li>Updating <code>email_verified<\/code> is not supported for enterprise and passwordless sms connections.</li>\\n    <li>Updating the <code>blocked<\/code> to <code>false<\/code> does not affect the user's blocked state from an excessive amount of incorrectly provided credentials. Use the \"Unblock a user\" endpoint from the \"User Blocks\" API to change the user's state.</li>\\n</ul>\\n\\n<h5>Updating a field (non-metadata property)</h5>\\nTo mark the email address of a user as verified, the body to send should be:\\n<pre><code>{ \"email_verified\": true }<\/code></pre>\\n\\n<h5>Updating a user metadata root property</h5>Let's assume that our test user has the following <code>user_metadata<\/code>:\\n<pre><code>{ \"user_metadata\" : { \"profileCode\": 1479 } }<\/code></pre>\\n\\nTo add the field <code>addresses<\/code> the body to send should be:\\n<pre><code>{ \"user_metadata\" : { \"addresses\": {\"work_address\": \"100 Industrial Way\"} }}<\/code></pre>\\n\\nThe modified object ends up with the following <code>user_metadata<\/code> property:<pre><code>{\\n  \"user_metadata\": {\\n    \"profileCode\": 1479,\\n    \"addresses\": { \"work_address\": \"100 Industrial Way\" }\\n  }\\n}<\/code></pre>\\n\\n<h5>Updating an inner user metadata property</h5>If there's existing user metadata to which we want to add  <code>\"home_address\": \"742 Evergreen Terrace\"<\/code> (using the <code>addresses<\/code> property) we should send the whole <code>addresses<\/code> object. Since this is a first-level object, the object will be merged in, but its own properties will not be. The body to send should be:\\n<pre><code>{\\n  \"user_metadata\": {\\n    \"addresses\": {\\n      \"work_address\": \"100 Industrial Way\",\\n      \"home_address\": \"742 Evergreen Terrace\"\\n    }\\n  }\\n}<\/code></pre>\\n\\nThe modified object ends up with the following <code>user_metadata<\/code> property:\\n<pre><code>{\\n  \"user_metadata\": {\\n    \"profileCode\": 1479,\\n    \"addresses\": {\\n      \"work_address\": \"100 Industrial Way\",\\n      \"home_address\": \"742 Evergreen Terrace\"\\n    }\\n  }\\n}<\/code></pre>\\n",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to update.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/userUpdate"
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "$ref": "#/components/schemas/userUpdate"
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "User successfully updated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "additionalProperties": {},
                           "properties": {
                              "user_id": {
                                 "type": "string",
                                 "description": "ID of the user which can be used when interacting with other APIs.",
                                 "default": "auth0|507f1f77bcf86cd799439020"
                              },
                              "email": {
                                 "type": "string",
                                 "description": "Email address of this user.",
                                 "default": "john.doe@gmail.com"
                              },
                              "email_verified": {
                                 "type": "boolean",
                                 "description": "Whether this email address is verified (true) or unverified (false).",
                                 "default": false
                              },
                              "username": {
                                 "type": "string",
                                 "description": "Username of this user.",
                                 "default": "johndoe"
                              },
                              "phone_number": {
                                 "type": "string",
                                 "description": "Phone number for this user when using SMS connections. Follows the <a href=\"https://en.wikipedia.org/wiki/E.164\">E.164 recommendation</a>.",
                                 "default": "+199999999999999"
                              },
                              "phone_verified": {
                                 "type": "boolean",
                                 "description": "Whether this phone number has been verified (true) or not (false).",
                                 "default": false
                              },
                              "created_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was created (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was created (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "updated_at": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Date and time when this user was last updated/modified (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "identities": {
                                 "type": "array",
                                 "description": "Array of user identity objects when accounts are linked.",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "connection": {
                                          "type": "string",
                                          "description": "Name of the connection containing this identity."
                                       },
                                       "user_id": {
                                          "type": "string",
                                          "description": "Unique identifier of the user user for this identity."
                                       },
                                       "provider": {
                                          "type": "string",
                                          "description": "The type of identity provider"
                                       },
                                       "isSocial": {
                                          "type": "boolean",
                                          "description": "Whether this identity is from a social provider (true) or not (false)."
                                       },
                                       "access_token": {
                                          "type": "string",
                                          "description": "IDP access token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "access_token_secret": {
                                          "type": "string",
                                          "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "refresh_token": {
                                          "type": "string",
                                          "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                       },
                                       "profileData": {
                                          "$ref": "#/components/schemas/userProfile"
                                       }
                                    }
                                 }
                              },
                              "app_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read-only access.",
                                 "additionalProperties": {}
                              },
                              "user_metadata": {
                                 "type": "object",
                                 "description": "User metadata to which this user has read/write access.",
                                 "additionalProperties": {}
                              },
                              "picture": {
                                 "type": "string",
                                 "description": "URL to picture, photo, or avatar of this user."
                              },
                              "name": {
                                 "type": "string",
                                 "description": "Name of this user."
                              },
                              "nickname": {
                                 "type": "string",
                                 "description": "Preferred nickname or alias of this user."
                              },
                              "multifactor": {
                                 "type": "array",
                                 "description": "List of multi-factor authentication providers with which this user has enrolled.",
                                 "items": {
                                    "type": "string"
                                 }
                              },
                              "last_ip": {
                                 "type": "string",
                                 "description": "Last IP address from which this user logged in."
                              },
                              "last_login": {
                                 "oneOf": [
                                    {
                                       "type": "string",
                                       "description": "Last date and time this user logged in (ISO_8601 format)."
                                    },
                                    {
                                       "type": "object",
                                       "description": "Last date and time this user logged in (ISO_8601 format).",
                                       "additionalProperties": {}
                                    }
                                 ]
                              },
                              "logins_count": {
                                 "type": "integer",
                                 "description": "Total number of logins this user has performed."
                              },
                              "blocked": {
                                 "type": "boolean",
                                 "description": "Whether this user was blocked by an administrator (true) or is not (false)."
                              },
                              "given_name": {
                                 "type": "string",
                                 "description": "Given name/first name/forename of this user."
                              },
                              "family_name": {
                                 "type": "string",
                                 "description": "Family name/last name/surname of this user."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "The following user attributes cannot be removed: foo, bar. The connection (some-connection) should have disabled 'Sync user profile attributes at each login' (see <a href='https://manage.local.dev.auth0.com/docs/users/configure-connection-sync-with-auth0'>Configuring Connection Sync with Auth0</a>) or defined these attributes in 'options.non_persistent_attrs' array (see <a href='https://manage.local.dev.auth0.com/docs/security/denylist-user-attributes'>Add User Attributes to DenyList</a>)."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users,update:users_app_metadata,update:current_user_metadata."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "patch_users_by_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users",
                     "update:users_app_metadata",
                     "update:current_user_metadata"
                  ]
               }
            ]
         }
      },
      "/users/{id}/authenticators": {
         "delete": {
            "summary": "Delete All Authenticators",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to delete.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "All authenticators successfully deleted."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: remove:authenticators"
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_authenticators",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "delete:guardian_enrollments"
                  ]
               }
            ]
         }
      },
      "/users/{id}/enrollments": {
         "get": {
            "summary": "Get the First Confirmed Multi-factor Authentication Enrollment",
            "description": "Retrieve the first confirmed <a href=\"https://auth0.com/docs/multifactor-authentication/guardian\">Guardian</a> enrollment for a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to list enrollments for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Enrollments successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "items": {
                              "$ref": "#/components/schemas/userEnrollment"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request query string. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users,read:current_user."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_enrollments",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users",
                     "read:current_user"
                  ]
               }
            ]
         }
      },
      "/users/{id}/identities": {
         "post": {
            "summary": "Link a User Account",
            "description": "Link two user accounts together forming a primary and secondary relationship. On successful linking, the endpoint returns the new array of the primary account identities.\\n\\nNote: There are two ways of invoking the endpoint:\\n\\n<ul>\\n  <li>With the authenticated primary account's JWT in the Authorization header, which has the <code>update:current_user_identities<\/code> scope:\\n    <pre>\\n      POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities\\n      Authorization: \"Bearer PRIMARY_ACCOUNT_JWT\"\\n      {\\n        \"link_with\": \"SECONDARY_ACCOUNT_JWT\"\\n      }\\n    </pre>\\n    In this case, only the <code>link_with<\/code> param is required in the body, which also contains the JWT obtained upon the secondary account's authentication.\\n  </li>\\n  <li>With a token generated by the API V2 containing the <code>update:users<\/code> scope:\\n    <pre>\\n    POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities\\n    Authorization: \"Bearer YOUR_API_V2_TOKEN\"\\n    {\\n      \"provider\": \"SECONDARY_ACCOUNT_PROVIDER\",\\n      \"connection_id\": \"SECONDARY_ACCOUNT_CONNECTION_ID(OPTIONAL)\",\\n      \"user_id\": \"SECONDARY_ACCOUNT_USER_ID\"\\n    }\\n    </pre>\\n    In this case you need to send <code>provider<\/code> and <code>user_id<\/code> in the body. Optionally you can also send the <code>connection_id<\/code> param which is suitable for identifying a particular database connection for the 'auth0' provider.\\n  </li>\\n</ul>",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the primary user account to link a second user account to.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "provider": {
                              "type": "string",
                              "description": "Identity provider of the secondary user account being linked.",
                              "default": "twitter",
                              "enum": [
                                 "ad",
                                 "adfs",
                                 "amazon",
                                 "apple",
                                 "dropbox",
                                 "bitbucket",
                                 "aol",
                                 "auth0-oidc",
                                 "auth0",
                                 "baidu",
                                 "bitly",
                                 "box",
                                 "custom",
                                 "daccount",
                                 "dwolla",
                                 "email",
                                 "evernote-sandbox",
                                 "evernote",
                                 "exact",
                                 "facebook",
                                 "fitbit",
                                 "flickr",
                                 "github",
                                 "google-apps",
                                 "google-oauth2",
                                 "instagram",
                                 "ip",
                                 "linkedin",
                                 "miicard",
                                 "oauth1",
                                 "oauth2",
                                 "office365",
                                 "oidc",
                                 "paypal",
                                 "paypal-sandbox",
                                 "pingfederate",
                                 "planningcenter",
                                 "renren",
                                 "salesforce-community",
                                 "salesforce-sandbox",
                                 "salesforce",
                                 "samlp",
                                 "sharepoint",
                                 "shopify",
                                 "sms",
                                 "soundcloud",
                                 "thecity-sandbox",
                                 "thecity",
                                 "thirtysevensignals",
                                 "twitter",
                                 "untappd",
                                 "vkontakte",
                                 "waad",
                                 "weibo",
                                 "windowslive",
                                 "wordpress",
                                 "yahoo",
                                 "yammer",
                                 "yandex",
                                 "line"
                              ]
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "connection_id of the secondary user account being linked when more than one `auth0` database provider exists."
                           },
                           "user_id": {
                              "description": "user_id of the secondary user account being linked.",
                              "oneOf": [
                                 {
                                    "type": "string",
                                    "default": "abc",
                                    "minLength": 1
                                 },
                                 {
                                    "type": "integer",
                                    "default": 191919191
                                 }
                              ]
                           },
                           "link_with": {
                              "type": "string",
                              "description": "JWT for the secondary account being linked. If sending this parameter, `provider`, `user_id`, and `connection_id` must not be sent.",
                              "default": "{SECONDARY_ACCOUNT_JWT}"
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "provider": {
                              "type": "string",
                              "description": "Identity provider of the secondary user account being linked.",
                              "default": "twitter",
                              "enum": [
                                 "ad",
                                 "adfs",
                                 "amazon",
                                 "apple",
                                 "dropbox",
                                 "bitbucket",
                                 "aol",
                                 "auth0-oidc",
                                 "auth0",
                                 "baidu",
                                 "bitly",
                                 "box",
                                 "custom",
                                 "daccount",
                                 "dwolla",
                                 "email",
                                 "evernote-sandbox",
                                 "evernote",
                                 "exact",
                                 "facebook",
                                 "fitbit",
                                 "flickr",
                                 "github",
                                 "google-apps",
                                 "google-oauth2",
                                 "instagram",
                                 "ip",
                                 "linkedin",
                                 "miicard",
                                 "oauth1",
                                 "oauth2",
                                 "office365",
                                 "oidc",
                                 "paypal",
                                 "paypal-sandbox",
                                 "pingfederate",
                                 "planningcenter",
                                 "renren",
                                 "salesforce-community",
                                 "salesforce-sandbox",
                                 "salesforce",
                                 "samlp",
                                 "sharepoint",
                                 "shopify",
                                 "sms",
                                 "soundcloud",
                                 "thecity-sandbox",
                                 "thecity",
                                 "thirtysevensignals",
                                 "twitter",
                                 "untappd",
                                 "vkontakte",
                                 "waad",
                                 "weibo",
                                 "windowslive",
                                 "wordpress",
                                 "yahoo",
                                 "yammer",
                                 "yandex",
                                 "line"
                              ]
                           },
                           "connection_id": {
                              "type": "string",
                              "description": "connection_id of the secondary user account being linked when more than one `auth0` database provider exists."
                           },
                           "user_id": {
                              "description": "user_id of the secondary user account being linked.",
                              "oneOf": [
                                 {
                                    "type": "string",
                                    "default": "abc",
                                    "minLength": 1
                                 },
                                 {
                                    "type": "integer",
                                    "default": 191919191
                                 }
                              ]
                           },
                           "link_with": {
                              "type": "string",
                              "description": "JWT for the secondary account being linked. If sending this parameter, `provider`, `user_id`, and `connection_id` must not be sent.",
                              "default": "{SECONDARY_ACCOUNT_JWT}"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Identity successfully added.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "description": "An array of objects with information about the user's identities.",
                           "items": {
                              "$ref": "#/components/schemas/userIdentity"
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Provided secondary account not found."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "User to be acted on does not match subject in bearer token."
               },
               "409": {
                  "description": "Specified identity already exists."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_identities",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users",
                     "update:current_user_identities"
                  ]
               }
            ]
         }
      },
      "/users/{id}/identities/{provider}/{user_id}": {
         "delete": {
            "summary": "Unlink a User Identity",
            "description": "Unlink an identity from the target user making it a separate user account again.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the primary user account.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "provider",
                  "in": "path",
                  "description": "Identity provider name of the secondary linked account (e.g. `google-oauth2`).",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "ad",
                        "adfs",
                        "amazon",
                        "apple",
                        "dropbox",
                        "bitbucket",
                        "aol",
                        "auth0-oidc",
                        "auth0",
                        "baidu",
                        "bitly",
                        "box",
                        "custom",
                        "daccount",
                        "dwolla",
                        "email",
                        "evernote-sandbox",
                        "evernote",
                        "exact",
                        "facebook",
                        "fitbit",
                        "flickr",
                        "github",
                        "google-apps",
                        "google-oauth2",
                        "instagram",
                        "ip",
                        "linkedin",
                        "miicard",
                        "oauth1",
                        "oauth2",
                        "office365",
                        "oidc",
                        "paypal",
                        "paypal-sandbox",
                        "pingfederate",
                        "planningcenter",
                        "renren",
                        "salesforce-community",
                        "salesforce-sandbox",
                        "salesforce",
                        "samlp",
                        "sharepoint",
                        "shopify",
                        "sms",
                        "soundcloud",
                        "thecity-sandbox",
                        "thecity",
                        "thirtysevensignals",
                        "twitter",
                        "untappd",
                        "vkontakte",
                        "waad",
                        "weibo",
                        "windowslive",
                        "wordpress",
                        "yahoo",
                        "yammer",
                        "yandex",
                        "line"
                     ]
                  }
               },
               {
                  "name": "user_id",
                  "in": "path",
                  "description": "ID of the secondary linked account (e.g. `123456789081523216417` part after the `|` in `google-oauth2|123456789081523216417`).",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "User identity successfully unlinked.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "array",
                           "description": "An array of objects with information about the user's identities.",
                           "items": {
                              "type": "object",
                              "required": [
                                 "provider",
                                 "user_id",
                                 "connection"
                              ],
                              "properties": {
                                 "connection": {
                                    "type": "string",
                                    "description": "The name of the connection for the identity.",
                                    "default": "Initial-Connection"
                                 },
                                 "user_id": {
                                    "type": "string",
                                    "description": "The unique identifier for the user for the identity.",
                                    "default": "5457edea1b8f22891a000004"
                                 },
                                 "provider": {
                                    "type": "string",
                                    "description": "The type of identity provider.",
                                    "default": "auth0"
                                 },
                                 "isSocial": {
                                    "type": "boolean",
                                    "description": "<code>true<\/code> if the identity provider is a social provider, <code>false<\/code>s otherwise"
                                 },
                                 "access_token": {
                                    "type": "string",
                                    "description": "IDP access token returned only if scope read:user_idp_tokens is defined"
                                 },
                                 "access_token_secret": {
                                    "type": "string",
                                    "description": "IDP access token secret returned only if scope read:user_idp_tokens is defined."
                                 },
                                 "refresh_token": {
                                    "type": "string",
                                    "description": "IDP refresh token returned only if scope read:user_idp_tokens is defined."
                                 },
                                 "profileData": {
                                    "$ref": "#/components/schemas/userProfile"
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Main identity cannot be removed."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "User to be acted on does not match subject in bearer token."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_user_identity_by_user_id",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users",
                     "update:current_user_identities"
                  ]
               }
            ]
         }
      },
      "/users/{id}/logs": {
         "get": {
            "summary": "Get user's log events",
            "description": "Retrieve log events for a specific user.\\n\\nNote: For more information on all possible event types, their respective acronyms and descriptions, see <a href=\"https://auth0.com/docs/logs/log-event-type-codes\">Log Event Type Codes</a>.\\n\\nFor more information on the list of fields that can be used in `sort`, see <a href=\"https://auth0.com/docs/logs/log-search-query-syntax#searchable-fields\">Searchable Fields</a>.\\n\\nAuth0 <a href=\"https://auth0.com/docs/logs/retrieve-log-events-using-mgmt-api#limitations\">limits the number of logs</a> you can return by search criteria to 100 logs per request. Furthermore, you may only paginate through up to 1,000 search results. If you exceed this threshold, please redefine your search.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user of the logs to retrieve",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "Field to sort by. Use `fieldname:1` for ascending order and `fieldname:-1` for descending.",
                  "schema": {
                     "type": "string",
                     "pattern": "^(([a-zA-Z0-9_\\\\.]+))\\:(1|-1)$"
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Logs successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "$ref": "#/components/schemas/log"
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "length": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "logs": {
                                       "type": "array",
                                       "items": {
                                          "$ref": "#/components/schemas/log"
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:logs, read:logs_users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_logs_by_user",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:logs",
                     "read:logs_users"
                  ]
               }
            ]
         }
      },
      "/users/{id}/multifactor/actions/invalidate-remember-browser": {
         "post": {
            "summary": "Invalidate All Remembered Browsers for Multi-factor Authentication",
            "description": "Invalidate all remembered browsers across all <a href=\"https://auth0.com/docs/multifactor-authentication\">authentication factors</a> for a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to invalidate all remembered browsers and authentication factors for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Remembered browsers for MFA invalidated."
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:users."
               }
            },
            "operationId": "post_invalidate-remember-browser",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/users/{id}/multifactor/{provider}": {
         "delete": {
            "summary": "Delete a User's Multi-factor Provider",
            "description": "Delete a <a href=\"https://auth0.com/docs/multifactor-authentication\">multifactor</a> configuration for a user. This forces the user to re-configure the multi-factor provider.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to remove a multifactor configuration from.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "provider",
                  "in": "path",
                  "description": "The multi-factor provider. Supported values 'duo' or 'google-authenticator'",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "duo",
                        "google-authenticator"
                     ]
                  }
               }
            ],
            "responses": {
               "204": {
                  "description": "Multi-factor provider successfully deleted for user."
               },
               "400": {
                  "description": "Invalid request URI. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_multifactor_by_provider",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/users/{id}/organizations": {
         "get": {
            "summary": "List user's organizations",
            "description": "This endpoint will retrieve all organizations that the specified user is a member of.\\n",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to retrieve the organizations for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "maximum": 1000,
                     "minimum": 0
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Defaults to 50.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Organizations successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "Organization identifier"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "The name of this organization.",
                                          "default": "organization-1",
                                          "minLength": 3,
                                          "maxLength": 50
                                       },
                                       "display_name": {
                                          "type": "string",
                                          "description": "Friendly name of this organization.",
                                          "default": "Acme Users",
                                          "minLength": 3,
                                          "maxLength": 255
                                       },
                                       "branding": {
                                          "type": "object",
                                          "description": "Theme defines how to style the login pages",
                                          "properties": {
                                             "logo_url": {
                                                "type": "string",
                                                "description": "URL of logo to display on login page"
                                             },
                                             "colors": {
                                                "type": "object",
                                                "description": "Color scheme used to customize the login pages",
                                                "required": [
                                                   "primary",
                                                   "page_background"
                                                ],
                                                "properties": {
                                                   "primary": {
                                                      "type": "string",
                                                      "description": "HEX Color for primary elements"
                                                   },
                                                   "page_background": {
                                                      "type": "string",
                                                      "description": "HEX Color for background"
                                                   }
                                                }
                                             }
                                          }
                                       },
                                       "metadata": {
                                          "type": "object",
                                          "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                          "additionalProperties": {}
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "organizations": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "Organization identifier"
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "The name of this organization.",
                                                "default": "organization-1",
                                                "minLength": 3,
                                                "maxLength": 50
                                             },
                                             "display_name": {
                                                "type": "string",
                                                "description": "Friendly name of this organization.",
                                                "default": "Acme Users",
                                                "minLength": 3,
                                                "maxLength": 255
                                             },
                                             "branding": {
                                                "type": "object",
                                                "description": "Theme defines how to style the login pages",
                                                "properties": {
                                                   "logo_url": {
                                                      "type": "string",
                                                      "description": "URL of logo to display on login page"
                                                   },
                                                   "colors": {
                                                      "type": "object",
                                                      "description": "Color scheme used to customize the login pages",
                                                      "required": [
                                                         "primary",
                                                         "page_background"
                                                      ],
                                                      "properties": {
                                                         "primary": {
                                                            "type": "string",
                                                            "description": "HEX Color for primary elements"
                                                         },
                                                         "page_background": {
                                                            "type": "string",
                                                            "description": "HEX Color for background"
                                                         }
                                                      }
                                                   }
                                                }
                                             },
                                             "metadata": {
                                                "type": "object",
                                                "description": "Metadata associated with the organization, in the form of an object with string values (max 255 chars).  Maximum of 10 metadata properties allowed.",
                                                "additionalProperties": {}
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Client is not global."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:users, read:organizations."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_user_organizations",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:organizations"
                  ]
               }
            ]
         }
      },
      "/users/{id}/permissions": {
         "get": {
            "summary": "Get a User's Permissions",
            "description": "Retrieve all permissions associated with the user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to retrieve the permissions for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Permissions successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "sources": {},
                                       "resource_server_identifier": {
                                          "type": "string",
                                          "description": "Resource server (API) identifier that this permission is for."
                                       },
                                       "permission_name": {
                                          "type": "string",
                                          "description": "Name of this permission."
                                       },
                                       "resource_server_name": {
                                          "type": "string",
                                          "description": "Resource server (API) name this permission is for."
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Description of this permission."
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "permissions": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "sources": {},
                                             "resource_server_identifier": {
                                                "type": "string",
                                                "description": "Resource server (API) identifier that this permission is for."
                                             },
                                             "permission_name": {
                                                "type": "string",
                                                "description": "Name of this permission."
                                             },
                                             "resource_server_name": {
                                                "type": "string",
                                                "description": "Resource server (API) name this permission is for."
                                             },
                                             "description": {
                                                "type": "string",
                                                "description": "Description of this permission."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: read:users."
               },
               "404": {
                  "description": "User not found."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_permissions",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Remove Permissions from a User",
            "description": "Remove permissions from a user.\\n",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to remove permissions from.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "List of permissions to remove from this user.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "List of permissions to remove from this user.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "User permissions removed."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_permissions",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Assign Permissions to a User",
            "description": "Assign permissions to a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to assign permissions to.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "List of permissions to add to this user.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "permissions"
                        ],
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "description": "List of permissions to add to this user.",
                              "items": {
                                 "type": "object",
                                 "required": [
                                    "resource_server_identifier",
                                    "permission_name"
                                 ],
                                 "properties": {
                                    "resource_server_identifier": {
                                       "type": "string",
                                       "description": "Resource server (API) identifier that this permission is for."
                                    },
                                    "permission_name": {
                                       "type": "string",
                                       "description": "Name of this permission."
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Permissions assigned to user.",
                  "content": {
                     "application/json": {
                        "schema": {}
                     }
                  }
               },
               "400": {
                  "description": "No more permissions can be assigned to this user."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_permissions",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/users/{id}/recovery-code-regeneration": {
         "post": {
            "summary": "Generate New Multi-factor Authentication Recovery Code",
            "description": "Remove the current <a href=\"https://auth0.com/docs/multifactor-authentication/guardian\">multi-factor authentication</a> recovery code and generate a new one.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to regenerate a multi-factor authentication recovery code for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "New recovery code successfully generated.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "recovery_code": {
                                 "type": "string",
                                 "description": "New account recovery code."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid input based on schemas."
               },
               "401": {
                  "description": "Token has expired or signature is invalid."
               },
               "403": {
                  "description": "Insufficient scope; expected: update:users."
               },
               "404": {
                  "description": "Enrollment not found."
               }
            },
            "operationId": "post_recovery-code-regeneration",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users"
                  ]
               }
            ]
         }
      },
      "/users/{id}/roles": {
         "get": {
            "summary": "Get a user's roles",
            "description": "List the the roles associated with a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to list roles for.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "per_page",
                  "in": "query",
                  "description": "Number of results per page. Paging is disabled if parameter not sent.",
                  "schema": {
                     "type": "integer",
                     "maximum": 100,
                     "minimum": 1
                  }
               },
               {
                  "name": "page",
                  "in": "query",
                  "description": "Page index of the results to return. First page is 0.",
                  "schema": {
                     "type": "integer",
                     "minimum": 0
                  }
               },
               {
                  "name": "include_totals",
                  "in": "query",
                  "description": "Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).",
                  "schema": {
                     "type": "boolean"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Roles successfully retrieved.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "oneOf": [
                              {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "string",
                                          "description": "ID for this role."
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of the role."
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Description of the role."
                                       }
                                    }
                                 }
                              },
                              {
                                 "type": "object",
                                 "properties": {
                                    "start": {
                                       "type": "number"
                                    },
                                    "limit": {
                                       "type": "number"
                                    },
                                    "total": {
                                       "type": "number"
                                    },
                                    "roles": {
                                       "type": "array",
                                       "items": {
                                          "type": "object",
                                          "properties": {
                                             "id": {
                                                "type": "string",
                                                "description": "ID for this role."
                                             },
                                             "name": {
                                                "type": "string",
                                                "description": "Name of the role."
                                             },
                                             "description": {
                                                "type": "string",
                                                "description": "Description of the role."
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected all of: read:users, read:roles."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "get_user_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:users",
                     "read:roles",
                     "read:role_members"
                  ]
               }
            ]
         },
         "delete": {
            "summary": "Removes roles from a user",
            "description": "Remove roles from a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to remove roles from.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to remove from the user.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to remove from the user.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Users roles successfully removed."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "delete_user_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "update:users",
                     "delete:role_members"
                  ]
               }
            ]
         },
         "post": {
            "summary": "Assign roles to a user",
            "description": "Associate roles with a user.",
            "tags": [
               "users"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "ID of the user to associate roles with.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     }
                  },
                  "application/x-www-form-urlencoded": {
                     "schema": {
                        "type": "object",
                        "required": [
                           "roles"
                        ],
                        "properties": {
                           "roles": {
                              "type": "array",
                              "description": "List of roles IDs to associated with the user.",
                              "items": {
                                 "type": "string",
                                 "minLength": 1
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "204": {
                  "description": "Roles successfully associated with user."
               },
               "400": {
                  "description": "Invalid request body. The message will vary depending on the cause."
               },
               "401": {
                  "description": "Invalid signature received for JSON Web Token validation."
               },
               "403": {
                  "description": "Insufficient scope; expected any of: read:roles, update:users."
               },
               "429": {
                  "description": "Too many requests. Check the X-RateLimit-Limit, X-RateLimit-Remaining and X-RateLimit-Reset headers."
               }
            },
            "operationId": "post_user_roles",
            "security": [
               {
                  "bearerAuth": []
               },
               {
                  "oAuth2ClientCredentials": [
                     "read:roles",
                     "update:users",
                     "create:role_members"
                  ]
               }
            ]
         }
      }
   }
}